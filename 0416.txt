Distributed Supervisor Synthesis for Automated Manufacturing Systems
Using Petri Nets
HeSuan Hu
1
, Senior Member, IEEE, Chen Chen
1
, Rong Su
2
,YangLiu
3
, and MengChu Zhou
4
, Fellow, IEEE
Abstract—Due to the competition for limited resources by
many concurrent processes in large scale automated manufac-
turing systems (AMS), one has to resolve a deadlock issue in
order to reach their production goal without disruption and
downtime. Monolithic resolution is a conventional approach
for optimal or acceptable solutions, but suffers from com-
putational difﬁculty. On the other hand, some decentralized
methods are more powerful in ﬁnding approximate solutions,
butmost are application-dependent.By modeling AMS as Petri
nets, we develop an innovative distributed control approach,
which can create a trajectory leading to a desired destination
and are adaptable to different kinds of constraints. Control
strategies are applied to processes locally such that they can
concurrently proceed efﬁciently. Global destinations are always
reachable through the local observation upon processes without
knowing external and extra information. Efﬁcient algorithms
are proposed to ﬁnd such distributed controllers.
I. INTRODUCTION
Manufacturing systems often experience dramatic changes
thanks to the emergence of intensive market competition
and the availability of advanced automation technology [1]–
[4], [6], [9]–[12], [17]. To facilitate a quick response to
a market change and allow mass product customization,
automated manufacturing systems (AMS) are developed.
They consist of a group of numerically-controlled machines,
interconnected by a centralized control system, via loading,
unloading, storage stations, and automated material handling
systems [13]. They are designed so as to rapidly and in-
expensively change manufacturing executions on numerous
product designs in smaller quantity and with faster delivery.
Manufacturers can be beneﬁted by increasing automation,
quality, and productivity, reducing cost, waste, and down-
time, and authorizing customization, reconﬁguration, and
*This work was supported by the Natural Science Foundation of China
under Grant Nos. 61203037 and 51305321, Fundamental Research Funds for
the Central Universities Under Grant Nos. K5051304004 and K5051304021,
New Century Excellent Talents in University under Grant No NCET-12-
0921, and NAP under Grant Nos. M4081155.020 and M4080996.020.
1
Hesuan Hu and Chen Chen are with School of Electro-mechanical
Engineering, Xidian University, Xi’an, Shaanxi 710071, P. R. China. Hesuan
Hu is also with School of Electrical and Electronic Engineering as well
as School of Computer Engineering, Nanyang Technological University,
Singapore 639798. hshu@mail.xidian.edu.cn
2
Rong Su is with School of Electrical and Electronic Engineering,
Nanyang Technological University, Singapore 639798. rsu@ntu.edu.
sg
3
Yang Liu is with School of Computer Engineering, Nanyang Techno-
logical University, Singapore 639798. yangliu@ntu.edu.sg
4
MengChu Zhou is with the Department of Electrical and Computer
Engineering, New Jersey Institute of Technology, NJ 07102, USA. zhou
@njit.edu
ﬂexibility. The avoidance of undesired behaviors in AMS
requires the synthesis of a supervisor to deal with all the
possible system behavior. However, the design of a central-
ized supervisor can be too difﬁcult for systems with a large
scale due to state explosion [5], [19], [20], [23], [26].
Industrial AMS are featured with large scales. Each global
AMS is constituted by collections of relatively small-size, lo-
cal, interacting, asynchronous, and event-driven subsystems.
Its execution is an interactive synchronization of these local
subsystems on shared actions. Apparently, as the number
of modules increases, state explosion is met when design-
ing a monolithic and centralized supervisor. All monolithic
approaches are no longer applicable because of it in the
supervisor synthesis procedures [7], [8], [14]–[16].
In the framework of Petri nets, this work intends to
avoid the enumerative state-space search when designing and
controlling large scale systems. A method is developed to
ensure the entire system’s nonblockingness by checking local
conditions only [7], [18]–[25]. For the sake of scalability, a
local system architecture is restricted and thus the global
maximal permissiveness cannot be ensured. As a result, one
can obtain a suboptimal instead of an optimal solution,
but the former is computationally tractable. Despite their
considerable complexity, industrial systems exhibit modular
structures that can be exploited to avoid explicit subsystem
synchronous composition and thereby the state explosion
issues. In contrast to the construction of the entire reach-
ability graph, the static analysis of a system conﬁguration
can accurately determine the solvability of a nonblocking
supervisory control problem. A dynamic search procedure
can lead to a supervisor that approximates the maximal
permissive solution with nonblockness. The posterior ver-
iﬁcation of nonblockingness is unnecessary because it is
ensured in theory.
This paper is structured as follows. Section II reviews the
basic deﬁnitions and notations of Petri nets used throughout
this paper. Section III is devoted to a special class of Petri
nets with a supervisory controller design. In Section IV ,
with a dynamic search technique, our method is proposed
to synthesize a liveness enforcing supervisor in a distributed
way. Concluding remarks are given in Section V .
II. PRELIMINARIES
APetri netis N =(P , T , F , W) where P is a set of
places, T is a set of transitions such that P ? T = ?, P ?
T = ?, F ? (P ? T ) ? (T ? P ) is a set of directed arcs
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 4423
from places to transitions or from transitions to places, and
W :(P ? T )? (T ? P )? N ={0, 1, 2, ...} is the weight
function on arcs and W (x, y) = 0if(x, y)= F . The preset
of a node x ? P ? T is deﬁned as
•
x = {y ? P ? T | (y,
x)? F}. Its postset x
•
={y ? P ? T | (x, y)? F}. N is
a state machine if W : F?{1} and ?t ? T ,|
•
t| = |t
•
| =
1. It is a marked graph if W : F?{1} and ?p ? P , |
•
p|
= |p
•
| = 1. N’s input incidence matrix [N
?
]= [W (p
i
, t
j
)]
and output one [N
+
]= [W (t
j
, p
i
)]. Its incidence matrix is
[N]= [N
+
] ? [N
?
]. [N
pi
] (resp., [N
?
pi
], [N
+
pi
])isthe i-th
row of [N] (resp., [N
?
], [N
+
]).
A marking of N is a mapping M : P ? N. Given an
initial marking M
0
, we call (N, M
0
) a net system or simply
net. t is enabled, denoted by M[t
,if ?p ?
•
t, M(p) ≥
W(p, t). M

is reachable from M, denoted by M[?
M

,if
there exists a ﬁring sequence ? = t
1
t
2
... t
n

 such that
M[t
1

M
1
... [t
n

 M

.
? ?
? is a |T|-dimensional ﬁring count
vector where
? ?
? (t) states the number of t’s appearances in
?. The set of all markings reachable from M
0
is denoted by
R(N, M
0
).(N, M
0
) is bounded if?k? N
+
= N\{0},?M
? R(N, M
0
), ?p ? P , M(p) ≤ k. t ? T is live under M
0
if ?M ? R(N, M
0
), ?M

? R(N, M), M

[t
 holds. (N,
M
0
) is deadlock-free if ?M ? R(N, M
0
), ?t ? T , M[t
.
t is dead at M ? R(N, M
0
)if M

? R(N, M),  M

[t

holds. It is a livelock if ?M ? R(N, M
0
), ?{t, t

}? T ,
 M[t
 and t is dead. (N, M
0
) is live if ?t ? T , t is live
under M
0
.
A P - (resp., T -) vector is a column vector I : P (resp.,
J : T ) ? Z indexed by P (resp., T ), where Z is the set of
integers. A P -vector I = 0 becomes a P -invariant if [N]
T
· I = 0,where 0 means a vector of zeros. A P -invariant
is called a P -semiﬂow if I ≥ 0. I = {p ? P | I(p) =
0} is called the support of I. For economy of space,

p?P
M(p) · p (resp.,

p?P
I(p) · p,

t?T
J(t) · t)is used
to denote vector M (resp., I, J). (N, M
0
) is conservative
(resp., consistent) if ?I> 0 (resp., ?J> 0)sothat I
T
·
[N]= 0
T
(resp., [N] · J
T
= 0). A circuit is an ordered set
x
1
, x
2
, ..., x
n

 such that: 1) {x
1
, x
2
, ..., x
n
}? P ? T ;
2)?i? N
n?1
, x
i+1
? x
•
i
;3)?{i, j}? N
n
except{i, j} =
{1, n}, x
i
= x
j
; and 4) x
1
= x
n
.
A nonempty set S ? P (resp., Q? P ) is a siphon (resp.,
trap) if
•
S ? S
•
(resp., Q
•
?
•
Q). A strict minimal siphon
is a siphon containing neither other siphon nor trap. M(p)
indicates the number of tokens in p under M. p is marked
by M if M(p) > 0. The sum of tokens in S is denoted by
M(S),where M(S)=

p?S
M(p). A subset S ? P is
marked by M if M(S) > 0. A siphon is undermarked if t
? S
•
can ﬁre.
Let D be a set. A multiset ? over D is deﬁned as a
mapping ? : D ? N and can be represented as ? =

d?D
?(d) · d. We denote Bag(D) = {?| ? is a multiset of D}.
In Bag(D), the following operators are deﬁned. If ?, ?

?
Bag(D), then: 1) ? ≥ ?

iff ?(d) ≥ ?

(d), ?d ? D;2) ?
+ ?

=

d?D
(?(d) + ?

(d))· d;3) max(?, ?

) =

d?D
(max(?(d), ?

(d)))· d;4) ?? ?

=

d?D
(?(d)? ?

(d))·
d. Without abuse of notations, a multi-set can also be denoted
as

d?D
?(d). This overlaps the economical notation of a
vector without causing any confusion.
III. PETRI NET MODELING OF AMS
For better understanding, we focus throughout this paper
on a special class of Petri nets, namely, Feedback System of
Sequential Systems with Shared Resources (FS
4
R). Never-
theless, this does not necessarily compromise the applicabil-
ity of our proposed method. In fact, it can be used in more
general systems without extra effort. In FS
4
R, various job
types are modeled by state machines. The availability of var-
ious resources is modeled by tokens in their corresponding
resource places. Since there is no special limitation upon
the resource quantity and types at each operation stage, an
FS
4
R models a general resource allocation mechanism. Let
N
L
={1, 2, ..., L} and N
K
={1, 2, ..., K}.AnAMS has
a set of resource types R ={r
i
, i? N
L
} and handles a set of
process types J = {J
j
, j ? N
K
}. Every resource type r
i
is
further characterized by its capacity C
i
? N
+
. Processing
requirements of process type J
j
are deﬁned by a set of
concurrent and/or sequential stages. Each process stage, say
k, modeled by a place p
jk
is associated with a conjunctive
resource requirement, expressed by an m-dimensional vector
a
p
jk
with a
p
jk
[i], i ? N
L
, indicating how many units of
resource r
i
are required to support the execution of the stage
denoted by p
jk
.
Deﬁnition 1: An FS
4
R is a strongly-connected general-
ized pure Petri net N = (P , T , F , W)where:
1) P = P
B
? P
E
? P
A
? P
R
is a partition such that: a)
P
B
, P
E
, P
A
,and P
R
are called beginning, ending, activity or
operation, and resource places, respectively; b) P
B
= {p
bi
,
i ? N
K
} and P
E
= {p
ei
, i ? N
K
};c) P
A
= ?
i?NK
P
Ai
,
where for each i ? N
K
, P
Ai
= ?,and ?i, j ? N
K
, i = j,
P
Ai
? P
Aj
= ?; and d) P
R
= {r
i
, i ? N
K
},n> 0;
2) T = ?
i?NK
T
i
?{t
fi
}, where for each i ? N
K
, T
i
=
?, and for each i, j ? N
K
, i = j, T
i
? T
j
= ?;
3) For each i ? N
K
, subnet N
i
= N | ({p
bi
}?{p
ei
}
? P
Ai
, T
i
?{t
fi
}, F
i
, W
i
) is a strongly connected state
machine, except for W (t
fi
, p
bi
) = W (p
ei
, t
fi
) = M
0
(p
0i
),
such that every cycle contains p
bi
, p
ei
,and t
fi
;
4) For each r ? P
R
, ? a unique minimal P -semiﬂow X
r
? N
|P|
such that {r} = X
r
? P
R
, P
B
?X
r
 = ?, P
E
?X
r
 = ?, P
A
?X
r
 = ?,and X
r
(r)= 1; and
5) P
A
= ?
r?PR
(X
r
\{r}).
In N, ?p
0
? P
0
, M
0
(p
0
) indicates the maximum number
of products that are allowed to be concurrently manufactured
in a process initialized by p
0
.?p? P
A
, M(p) > 0 means an
ongoing operation modeled by p. ?r ? P
R
, M
0
(r) denotes
the capacity of resource type r. From Deﬁnition 1, FS
4
R is
evidently conservative and consistent.
Deﬁnition 2: M
0
is an acceptable initial marking in N if
(1) M
0
(p
bi
)= W (t
fi
, p
bi
),?p
bi
? P
B
,?i? N
K
;(2) M
0
(p)
= 0,?p? P
A
? P
E
;and (3) M
0
(r)≥ X
r
(p),?r ? P
R
,?p
? P
A
.
Givenan arbitrarymarking M ? R(N, M
0
), a transition
t is M-process-enabled if M(
•
t ? P
A
) > 0. Note that |
•
t
? P
A
|=1 by deﬁnition. Correspondingly, t is M-resource-
4424
p
1
t
1
t
1 5 
p
1 0 
p
1 2 
p
2
p
8
p
1 1 
t
5
t
1 2 
t
1 4 
t
1 3 
t
1 0 
t
1 1 
p
4
p
7
p
5
p
6
p
9
2
2
4
2
3
2
p
3
p
1 3 
p
1 4 
p
1 5 
p
1 6 
p
1 7 
t
2
t
3
t
4
t
6
t
7
t
9
t
8
t
1 6 
3
3
3
3
4
4
2
3
2
Fig. 1. An example FS
4
R net.
enabled by r ?
•
t ? P
R
if M(r) ≥ W(r, t). In the rest of
this paper, (N, M
0
) is an acceptably marked FS
4
R.
Deﬁnition 3: (N
i
, M
i
0
)is the i-th sub-process net system
(process net, for short) such that |M
i
0
| = |P
Ai
| + 2.
Deﬁnition 4: Let r? P
R
be a resource place in (N, M
0
).
The set of its holders is the support of a minimal P -semiﬂow
X
r
without r, i.e., H(r)= X(r)\{r}.
Clearly, H(r) contains only operation places due to
X(r)? P
R
= {r}.Let S
R
= S ? P
R
and S
A
= S
? P
A
.
Deﬁnition 5: Let S be a siphon that can be undermarked
in (N, M
0
). Its token takers,

H(S) = ?
r?SR
H(r) ? S,is
the set of the places that correspond to the holders of the
resources in S but do not belong to S.
Suppose H
SR
= ?
r?SR
H(r).Wehave

H(S)= H
SR
\
S = (H
SR
? P
A
) \ S
A
.
Thanks to their special structure,FS
4
R can describe AMS
in which each product is manufactured via sequential and/or
concurrent manufacturing processes. It is composed of a
set of process nets N
i
, i ? N
K
, which are in one-to-one
correspondence with a product and its related manufacturing
processes. More speciﬁcally, each N
i
can be decomposed
into an acyclic graph and a feedback transition t
fi
. The op-
erations together with their interactions required by a process
are represented by the activity places and transitions involved
in the respective acyclic graph of N
i
. A set of transitions
with a same ingoing place correspond to the initialization
of a number of ﬂexible routes, while the ones with a same
outgoing places correspond to common termination. The
initial marking of a beginning place p
bi
corresponds to the
number of products that are allowed in the process at a
TABLE I
SUPERVISOR FOR PETRI NET IN FIG.1
•
pc
i M
0
(pc )
p
•
c
{2 · t
3
,2 · t
5
,4 · t
6
,2 · t
11
, t
12
, t
13
,2 · t
14
}
1 8
{2 · t
1
, t
2
, t
4
, t
9
,2 · t
10
}
{2 · t
2
,3 · t
3
,6 · t
4
,3 · t
11
,3 · t
12
}
2 6
{2 · t
2
, t
3
,4 · t
4
, t
9
,2 · t
10
}
{2 · t
2
}
3 2
{t
2
}
{2 · t
11
,2 · t
12
}
4 2
{t
9
, t
10
}
time. Place p
ei
is designated as the ﬁnal destination of all
ﬁnished process instances. Firing t
fi
models the repetitive
production of a new batch of process type i. Places in P
R
are
used to model various resource types. Their marking during
the evolution of a Petri net corresponds to the number of
available resources in the modeled AMS. In particular, their
initial markings deﬁne the capacities of the corresponding
resource types.
Under the assumption that P
B
= {p
1
, p
8
}, P
E
= {p
7
,
p
14
}, P
A1
= {p
2
? p
6
}, P
A2
= {p
9
? p
13
}, P
R
= {p
15
? p
17
}, t
f1
= t
8
,and t
f2
= t
16
,Fig. 1 shows an FS
4
R
example representing an AMS consisting of three resource
types r
1
? r
3
with capacities C
1
= C
2
= 4, and C
3
= 2,
and handling job typesJ
1
andJ
2
.J
1
(resp.,J
2
)isdeﬁned
by a set of partially ordered job stages{p
1
? p
7
} (resp.,{p
8
? p
14
}). The conjunctive resource requirements associated
with various job stages are as follows: a
p2
= 2· p
15
, a
p3
=
3 · p
15
, a
p4
= p
15
+ p
17
, a
p5
= 4 · p
15
, a
p6
= p
16
, a
p9
=
p
16
, a
p10
= 3· p
16
, a
p11
= p
15
, a
p12
= p
15
,and a
p13
= p
17
.
The P -semiﬂows corresponding to the resources are: X
1
=
2· p
2
+ 3· p
3
+ p
4
+ 4· p
15
+ p
11
+ p
12
+ p
15
, X
2
= p
6
+ p
9
+ 3· p
12
+ p
16
,and X
3
= p
4
+ p
13
+ p
17
.There are
two sub-process net systems, i.e., (N
1
, M
1
0
)and (N
2
, M
2
0
).
(N
1
, M
1
0
) is composed by {p
1
? p
7
} and {t
1
? t
8
} along
with their related arcs. M
1
0
= 3· p
1
.(N
2
, M
2
0
) is composed
by{p
8
? p
14
} and{t
9
? t
16
} along with their related arcs.
M
2
0
= 3· p
8
. Obviously, this Petri net model allows multiple
units of resource acquisition at each operation stage as well
as ﬂexible routes.
Siphon-based liveness analysis is crucial for most Petri net
models; however, it is of difﬁculty to derive such structural
objects owing to their complexity. In this work, we simplify
this problem by restricting the behavior of FS
4
R to trajec-
tories ensuring the liveness and deadlock-freeness.
Take the net shown in Fig. 1 as an example. Totally, there
are four siphons, i.e., S
1
= {p
6
, p
13
, p
15
? p
17
}, S
2
=
{p
3
, p
6
, p
11
, p
12
, p
15
, p
16
}, S
3
={p
3
? p
5
, p
11
, p
12
, p
15
},
and S
4
= {p
6
, p
10
, p
16
}. To avoid the undermarkedness of
each siphon, a general exclusive mutual constraint (GMEC)
is applied to its complementary part. After a GMEC is given,
a monitor p
c
along with its outgoing and ingoing arcs as
well as initial marking can be calculated with the technique
in [2]. Table I shows the resultant supervisor that is a simple
integration of all monitors. Obviously, such a supervisor is
4425
derived in a global way as searching the entire net for all
siphons is necessary. Moreover, the control mechanism is
also implemented in a global way because it works exactly as
a coordinator dispatching all resources to different processes
according to certain predetermined rules. As the system size
increases, the number of siphons increases exponentially.
Thus, such a design and control method may fail in large
scale systems. A distributed solution becomes necessary.
IV. DISTRIBUTED CONTROL OF FS
4
R
Given anFS
4
R, its evolution represents the ﬂow of tokens
from the beginning places to destination ones. The nonblock-
ingness property is guaranteed through undermarkedness of
no siphons, which can be realized with conventional static
supervision techniques. Structure-based and global speciﬁ-
cations are involved to avoid the siphons’ undermarkedness
in a centralized and global way. All resources are assumed
reliable; thereby, systems are not contingency-prone. Fail-
ures may appear in practical systems whose structures are
distributed and behaviors are dynamic. Challenging issues
are broken-down resources. It is questionable regarding the
adaptability of a conventional static, global, centralized,
and failure-sensitive mechanism. In practice, supervisors are
expected to be robust, adaptive, and tolerant to various con-
tingencies including resource failure and conﬁguration mod-
iﬁcation. As a consequence, deadlock resolution techniques
must be dynamic and fault-tolerant. Instead of checking the
global structures, the proposed approach aims to resolve the
problem in a decentralized and local way. Rather than failure
sensitive, the resultant systems become fault-tolerant.
A. Distributed Admissibility-enforcing Control
Given an FS
4
R, each of process N
i
is executed indepen-
dently without the constraints from resources. As a result,
the state M ? R(N, M
0
) is not necessarily a Cartesian
state product of different processes. Moreover, deadlock may
occur owing to the competition among processes for ﬁnite
resources, further reducing the number of states from the
set of the Cartesian product. Take the Petri net in Fig. 1
as an example. Without the resource constraint, the two
sub-process net systems and (N
2
, M
2
0
), involve 84 states,
respectively. Their Cartesian product is 84 ? 84 = 7056.
After considering the resource constraints, the number of
state is reduced to 2076. For example, although 3 · p
2
+ 2·
p
10
is a component of the Cartesian product, its reachability
is impossible because it requires 6 copies of r
1
and 6 copies
of r
2
while either has its capacity being bounded by 4.
As known, the computation of the set of reachable states
is an NP-complete hard problem as one ought to enumer-
ate all states and determine their reachability one by one.
This approach intends to avoid such an enumeration. To
achieve so, we introduce the concept of admissibility, which
approximates the reachability but signiﬁcantly reduces the
computational complexity.
Deﬁnition 6: Given an FS
4
R (N, M
0
), M is a admissi-
ble state if?r ? P
R
,

p?PA?Xr
X
r
(p)·M(p)≤ M
0
(r).
R(N, M
0
) denotes the universal set of M.
Apparently, regarding a state’s admissibility, the only
criterion is the usage of resources. In the sequel, M is
used to denote a component in the set of admissible states
R(N, M
0
). The admissibility property must hold for each
component belonging to the set of reachable states; however,
an admissible state does not necessarily belong to the set of
reachable states. In short, we have R(N, M
0
)?R(N, M
0
).
Thus, the below result is true.
Proposition 1: Given an FS
4
R (N, M
0
), M ? R(N,
M
0
). We have M?R(N, M
0
).
Proposition 1 implies that the admissible state set can
well cover the reachable state set. The former one is quite
easy to produce and verify because we only need to check
the availability of various resources. As a beneﬁt, we can
neglect the entire system’s global structure. In the sequel,
we introduce the notion of successor and the algorithm
to produce the admissible graph. Since the enabledness
condition is substituted by the admissibility condition, the
algorithm becomes concise and a superset of the reachable
state set is obtained.
Deﬁnition 7: P(M) is an activity distribution function, to
map each admissible state to a vector of activities in progress
at this state. Moreover, P
i
(M) is an activity distribution
function at P
Ai
to map each admissible state to a vector
of activities in progress in P
Ai
. Thus, we also denoteP(M)
as [P
1
(M)
T
P
2
(M)
T
... P
K
(M)
T
]
T
.
Deﬁnition 8: P(M) is an activity distribution function
to map each admissible state to a multi-set of activities
in progress at this state. Moreover, P
i
(M) is an activity
distribution function at P
Ai
to map each admissible state to
a multi-set of activities in progress at process P
Ai
. Thus, we
also denote P(M)as {P
1
(M), P
2
(M), ..., P
K
(M)}.
Deﬁnition 9: R(M) (resp., R
?1
(M)) is a resource uti-
lization (resp., availability) function to map each admissible
state to a multi-set of resources utilized (resp., available) at
this state.
Proposition 2: Given an FS
4
R,wehave R(M) +
R
?1
(M) = R
?1
(M
0
).
Deﬁnition 10: M (M) is a state function to map each
admissible state to a multi-set.
Proposition 3: M (M)?P(M)+R(M)=R
?1
(M
0
).
Deﬁnition 11: Given an FS
4
R (N, M
0
), ?{M, M

}?
R(N, M
0
), M

is said to be the successor of M,which
is denoted as M
ti
j
?M

where i ? N
K
and j ? N
|PA
i
|
such that P
i
(M)?R(N
i
, M
i
0
)andP
i
(M

)?R(N
i
, M
i
0
),
P
i
(M) [ t
ij

P
i
(M

), P
k=i
(M) [ t
ij

P
k=i
(M

)where
t
ij
means the j-th transition in the i-th process.
In the sequel, an algorithm is developed to deﬁne the
structure of the distributed controllers.
Algorithm 1: Generation of the Admissible Global Reach-
ability Set and its Successor Relationship
Input: An FS
4
R (N, M
0
) constituted by (N
i
, M
i
0
)and{r
j
}
such that i ? N
K
and j ? N
L
Output: All the Admissible Global States and their Successor
Relationship
begin
4426
1) R(N, M
0
) is the set of admissible global states with
M?R(N, M
0
) as a component;
2) M
0
= M
0
?R(N, M
0
) is the initial state;
3) M
ti
j
?M

iff M

is an admissible global successor
of M such that P
i
(M)
ti
j
?P
i
(M

), where i ? N
K
, j
? N
|PA
i
|
. Moreover,?r ? P
R
, X
T
r
· M ≤ M
0
(r)and
X
T
r
· M

≤ M
0
(r);
end
The above algorithm deﬁnes the structure of a controller.
Actually, it successfully merges the behavior of both local
controllers and global coordinator. The system evolution
well behaves according to the local evolution feasibility and
global admissibility. More importantly, the last item can
be utilized to deﬁne various behavior constraints upon the
system evolution which is actually a proper subset of R(N,
M
0
). The generation of R(N, M
0
) requires the veriﬁcation
at each state the nonblocking issues and enabledness of
all transitions. The above algorithm can well avoid the
such time-consuming veriﬁcation operations as all states are
represented on the basis of set theory and logic operations.
Given an FS
4
R, the obtained behavior is no longer in
the form of a plant model and some separated controllers. In
fact, it is realized by one or several possible trajectories, i.e.,
M
0
tz
1
?M
z1
tz
2
?M
z2
tz
3
? ... M
z
k?1
tz
k
?M
z
k
... with z
i
= x
i
y
i
where x
i
? N
K
, y
i
? N
max{|PAx
i
|}
. In the sequel,
this trajectory can be simpliﬁed as M
0
?
?M
z
k
...,where
? = t
z1
t
z2
... t
z
k

.
Compared with any other properties, liveness is of
paramount signiﬁcance. This is because only it can ensure
all processes to reach their destinations without any blocking
issues. In the sequel, it is realized through model predictive
control techniques. This means that before the execution of
each step, we must ensure that the corresponding process can
reach their destination without any blocking issue.
According to the above statement, we need to establish
a distributed algorithm to determine the feasibility of each
step’s execution. As known, it can be quite time-consuming
to search a deadlock free trajectory in the entire reachability
graph. In the case where the limited-step look-ahead tech-
nique is adopted, the upper bound of the step limitation is
actually undecidable in general cases and thus deadlock state
cannot be completely removed in theory. Moreover, there is
no uniﬁed principle to follow such that we can produce an
effective and efﬁcient look-ahead technique. Next, we present
an efﬁcient method to tackle the issue.
B. Distributed Design of Liveness-enforcing Controller
The above discussions suggest that an admissible state is
unnecessarily an either good or real one. First, it might be
a livelock or deadlock which involves a circular wait among
several processes occupying certain resources. Second, it
might be a pseudo state which is never reachable owing to the
negligence of some transitions’ ﬁreability. As a consequence,
a supervisor is expected to simultaneously remove livelock,
deadlock, and pseudo states. Take the Petri net in Fig. 1 as
an instance. A ﬁring sequence, sayt
1
t
2
t
9
t
9
t
9
t
9

, results
in a marking p
1
+ p
2
+ 3· p
9
+ p
16
+ 2· p
17
, under which
a siphon S = {p
3
, p
6
, p
11
, p
12
, p
15
, p
16
} is undermarked
and no process can proceed despite the existence of some
available resources.
Conventional methods necessitate the supervisory control
of all siphons and/or bad states in order to synthesize
supervisors. Due to their astrometrical quantity, our strategy
pursues for their avoidance. As an alternative, we propose
a method with the aid of a look-ahead technique. Priori to
each step’s execution along its process, the other processes
temporarily stagnate so as to yield for its accomplishment.
In other words, our focus is upon an arbitrarily or inten-
tionally selected process rather than others. In this particular
process, a predictive evaluation is conducted upon a token to
determine whether it can proceed from its current location to
the destination place or a place with the maximum resource
usage. If so, this token is moved to its next step; otherwise,
it keeps standstill regardless its legality to further proceed.
Thanks to their signiﬁcance, critical places stand as the
notion for these destination places and the places with the
maximum resource usage.
Deﬁnition 12: Given an FS
4
R, C??
i?NK
P
Ai
? P
B
?
P
E
are a set of critical places if a
p
= 0
T
, ?p ? P
A
? P
B
? P
E
or ?i ? N
K
, a
p
≥ a
p
, ?p

? P
Ai
? P
B
? P
E
.
At an abstract level, the above deﬁnition provides a
distributed method to produce a ﬁring sequence which en-
sures nonblockingness. Apparently, such ﬁring sequences
are not unique thanks to the selection randomness upon
the imminently progressing process. A different selection
sequence or criterion results in a distinct ﬁring sequence and
control scheme. Any job is of independence and capability
to navigate the entire system from the initial state to the des-
tination one. From the viewpoint of pure logic, the increase
of concurrency usually improves the system performance.
Eventually, the following are some remarks upon the desired
control strategy.
First, places except resources are distinguished by critical
and normal ones. The former are the places with minimum
(zero, in fact) or maximum resource usages whereas the latter
are the remaining places. From the viewpoint of resource
acquisition, enough resources are available behind the place
with minimum resource usage and no more resources are
required behind the place with maximum resource usage.
Critical places’ existence is guaranteed because no resource
is occupied at the beginning and destination places. By intu-
ition, they behave like temporary buffers for the processes.
Second, systems’ tractability is ensured by their initial
markings. When ?j ? N
K
\{i} processes stagnate at their
current states, the i-th one can reach the closest critical
place. In the worst case, all the processes except the i-th
one stagnate at their initial states, the i-th one can reach
its destination place according to Deﬁnition 2. After so, all
resources are released such that another token in the same
process or another process can proceed similarly. Eventually,
all tokens can reach their destination places after these two
steps execute repeatedly.
Third, a liveness-enforcing supervisor is promised to exist
4427
by FS
4
R’s special system structure and its acceptable initial
marking. On the basis of the above statements, one can easily
establish a liveness enforcing supervisory control scheme.
Before it leaves its current state, every process must guaran-
tee the reachability of the closest critical place. A prominent
principle is that only one step is allowed for any process
execution when it leaves its current state and proceeds
towards its destination. This philosophy is valid even when
sufﬁcient resources are available to support certain token in
a process to reach its destination place.
At any system’s initial marking, all processes are at
their critical places because only the beginning places are
marked and no resources are employed. By using the above-
mentioned predictive control technique, all processes proceed
alternatively and concurrently from their beginning places
to destination ones. To the end, a trajectory is produced
which can accomplish such an objective. Superﬁcially, our
strategy is similar to the lookahead deadlock resolution pol-
icy. Nevertheless, they are different to much extent. For the
former, the prerequisite for its applicability is the generation
of the entire reachability graph. Owing to the undecidability
of each path’s length, there is no way either precisely or
approximately to anticipate the number of look-ahead steps.
Our method requires no information from the reachability
graph. Comparatively, the look-ahead step is beforehand
determined by each process’ length, which promises the
efﬁciency of a deadlock-free trajectory’s identiﬁcation.
For each searching process, one and only one trajectory
can be produced. As a consequence, this method does not
ensure the controlled system’s maximal permissiveness. Note
that maximal permissiveness is of only theoretical signif-
icance for a large-scale system. It provides only all the
potential and feasible trajectories along which a system may
follow. No information is provided to reach the destination
along the shortest path or with the minimum duration. As a
consequence, system performance may not beneﬁt from the
so-called maximal permissiveness. In contrast, our method
dynamically provides an effective criterion ensuring the
system’s liveness during its real-time evolution. It may be
somewhat less permissive owing to the prohibition of some
trajectories leading to no deadlocks.
Deﬁnition 13: Given an FS
4
R, C is a set of critical
places. ?p ? P
B
? P
E
? P
A
, its neighbor is deﬁned as
aset N (p) ={p
i0
p
i1
... p
i
k
}? P
B
? P
E
? P
A
such that
p
i0
t
i1
p
i1
... t
i
k
p
i
k

 is a path where p
i0
= p, p
i
k
? C ,
and ?j ? N
l?1
, p
ij
? C .
Deﬁnition 13 determines that N (p) contains a series
of places which starts and ends with two distinct critical
places. Apparently, these neighbors partition all processes
into segments which are uninterruptedly connected with
critical places as their joints. Our control strategy is to trans-
mit each token along these segments sequentially. Between
any two contiguous segments, a critical place performs like
an interchange station under which a token can sojourn
temporarily to ascertain further progress’ feasibility and
determine the next move’s direction. These segments behave
as the bridges carrying each token from one critical place to
another.
Deﬁnition 14: Given an FS
4
R (N, M
0
), {M, M

}?
R(N, M
0
), M
ti
j
?M

, ?{p} =
•
t
ij
?{P
B
? P
E
? P
A
},
M(p) ≥ 1. ?{p

} = t
•
ij
?{P
B
? P
E
? P
A
}, M(p

) ≥ 1.
p’s neighbor is N (p) = {p
ij
p
ij+1
... p
i
j+k
}? P
B
? P
E
? P
A
associated to a path p
ij
t
ij
p
ij+1
... t
i
j+k+1
p
i
j+k


where p
ij
= p, p
ij+1
= p

, p
i
j+k
? C,and?l? N
k?1
, p
i
j+l
? C . M ={M
<0>
,M
<1>
, ...,M
<k>
} isM’s Operation
Downstream Neighborhood (ODN) such thatM
<0>
=M

,
M
<0>
ti
j+2
?M
<1>
ti
j+3
? , ...,
ti
j+k+1
?M
<k>
.
In the framework of FS
4
R, C can be distinguished into
two categories. The ﬁrst one is the beginning and destination
places under which no resources are occupied. The second
one is the places under which maximum resources are oc-
cupied. In the former case, sufﬁcient resources are available
to transmit a token in an arbitrarily selected process to its
destination place when all the other processes are in halt.
In the latter case, no more resources are required because
the current place already acquires the maximum number of
resources. Under either situation, a common feature is that a
token in one process can proceed to its closest critical place.
Hence, our control strategy can be described as follows.
Algorithm 2: Generation of a Liveness-enforcing Super-
visor in Form of a Firing Sequence
Input: An FS
4
R (N, M
0
)
Output: A Series of Live Global States and their Successor
Relationship
begin
1) L(N, M
0
) is a set of admissible global states;
2) M
0
?L(N, M
0
) is the initial state;
3) M
ti
j
?M

is a liveness-enforcing successor relation-
ship if:
a) {M, M

}?R(N, M
0
). M
ti
j
?M

is an
admissible global successor such that i? N
K
and
j ? N
|PA
i
|
;
b) For ?M
<k>
? M , R(M
<k>
) + R(M) ≤
R
?1
(M
0
), where M is M

s ODN and k ?
N
|M|
.
end
This supervisor synthesis algorithm has two features. First,
it works in a decidable predictive way. One and only one
step is allowed to execute along a process even if sufﬁcient
resources are available to consecutively transfer a token to
its corresponding destination place. Sufﬁcient resources are
available for this process’ progress if all other processes halt
during this execution step. Second, the algorithm proceeds
with no need to check the global information. Each step’s
execution is determined by the sufﬁciency of its related
resources. In other words, there is no need to know the status
of all the other processes except the one to execute. As a
consequence, the entire algorithm performs in a completely
distributed way since only local information is required. This
implies a signiﬁcant decrease in the communication amount
between the supervisor and processes. In the sequel, the
correctness of this algorithm is established.
4428
Lemma 1: Given an FS
4
R,M
0
= M
0
?R(N, M
0
)and
Ω= ?
|Ω|
i=1
{M} such that M
0
?
?M holds according to
Algorithm 2. Then, we have Ω?R(N, M
0
).
Lemma 2: Given an FS
4
R,M
0
= M
0
?R(N, M
0
)and
Ω= ?
|Ω|
i=1
{M} such that M
0
?
?M holds according to
Algorithm 2. Then, we have Ω ? R(N, M
0
).
Lemma 3: Given an FS
4
R,M
0
= M
0
?R(N, M
0
)and
Ω= ?
|Ω|
i=1
{M} such that M
0
?
?M holds according to
Algorithm 2. Then, t ? ?, t is dead.
Theorem 1: Given an FS
4
R, M
0
= M
0
?R(N, M
0
)
and Ω= ?
|Ω|
i=1
{M} such that M
0
?
?M holds according
to Algorithm 2. The synthesized supervisor is liveness-
enforcing.
To achieve higher concurrency, each token is associated
with an identity number. When there are G number of tokens
in total, each can be represented by a label o(x)
<yx>
where
x? N
G
means a token’s identity number and y
x
? max
i?NK
{|P
Ai
|} means how many steps the x-th token has moved
forward. At M
0
, ?x ? N
G
,wehave y
x
= 0. Once the
x-th token proceeds for one step, y
x
:= y
x
+ 1. More
concurrency implies that more tokens proceed with the same
pace. In another words, between any two tokens, i.e., x
i
and x
j
, their largest difference must be minimized. In the
optimality theory, this corresponds to an objective function
min{max|y
xi
? y
xj
|} where {x
i
, x
j
}? N
G
.
Consider the FS
4
R as an example. With the aid of Algo-
rithm 2, we can easily derive a liveness-enforcing supervisor
which is represented as a ﬁring sequence, i.e., t
1
t
9
t
2
t
10
t
3
t
11
t
5
t
13
t
7
t
15
t
1
t
9
t
2
t
10
t
4
t
12
t
6
t
14
t
7
t
15
t
1
t
9
t
2
t
10
t
3
t
12
t
5
t
13
t
7
t
15
t
8
t
16

. Compared with the supervisor in
Table I, our supervisor does not need any global information
during its synthesis and execution processes.
V. CONCLUSION
This work focuses on the synthesis of distributed liveness-
enforcing supervisors of automated manufacturing systems
allowing both ﬂexible process routes and multiple resource
acquisition operations. Deadlocks can be avoided in a dy-
namical way and distributed manner. The admissibility of
each execution step is determined by actively checking the
availability of sufﬁcient resources in a local way rather than
by passively accepting the instructions of execution or prohi-
bition from a supervisor in a global way. As a consequence,
the communication amount decreases substantially because
the execution of one step is completely independent from
the statuses of other processes. All siphons are implicitly
controlled and all deadlocks are avoided. This technique can
reduce the computation burden to compute these supervisor
structures. Our resulting supervisor is simple, distributed,
dynamical, adaptive, and fault-tolerant. The generalization
of the research results to more complex systems is expected.
REFERENCES
[1] A. Aybar, “Decentralized structural control approach for Petri nets,”
Control Cybern., vol. 36, no. 1, pp. 143–159, Jan. 2007.
[2] K. Barkaoui and I. Abdallah, “A deadlock prevention method for a
class of FMS,” in Proc. IEEE Int. Conf. Syst., Man, and Cybern., pp.
4119–4124, Vancouver, British Columbia, Canada, Oct. 1995.
[3] F. Basile, A. Giua, and C. Seatzu, “Some new results on supervisory
control of Petri nets with decentralized monitor places,” in Proc.
Intern. Fed. Autom. Contr., Seoul, Korea, Jul. 2008, pp. 531–536.
[4] F. Basile, A. Giua, and C. Seatzu, “Decentralized supervisory control
of Petri nets with monitor places,” in Proc. IEEE Conf. Autom. Sci.
Eng., Arizona, USA, Sept. 2007, pp. 7–13.
[5] P. Darondean, “Distributed implementations of Ramadge-Wonham
supervisory control with Petri nets,” in Proc. IEEE Conf. Dec. Contr.,
Seville, Spain, Dec. 2005, pp. 2017–2112.
[6] J. Ezpeleta, J. Colom, and J. Mart´ ınez, “A Petri net based deadlock
prevention policy for ﬂexible manufacturing systems,” IEEE Trans.
Robot. Autom., vol. 11, no. 2, pp. 173–184, Apr. 1995.
[7] R. Ferrari, T. Parisini, and M. Polycarpou, “Distributed fault detection
and isolation of large-scale discrete-time nonlinear systems: An adap-
tive approximation approach,” IEEE Trans. Auto. Contr., vol. 57, no.
2, pp. 275–290, Feb. 2012.
[8] M. Franceschelli, A. Giua, and C. Seatzu, “Distributed averaging in
sensor networks based on broadcast gossip algorithms,” IEEE Sens.
Journ., vo. 11, no. 3, pp. 808–817, Mar. 2011.
[9] H. S. Hu, M. C. Zhou, and Z. W. Li, “Liveness enforcing supervision
of video streaming systems using non-sequential Petri nets,” IEEE
Trans. Multi., vol. 11, no. 8, pp. 1457–1465, Nov. 2009.
[10] H. S. Hu, M. C. Zhou, and Z. W. Li, “Algebraic synthesis of timed
supervisor for automated manufacturing systems using Petri nets,”
IEEE Trans. Autom. Sci. Eng., vol. 7, no. 3, pp. 549-557, Jul. 2010.
[11] H. Hu, M. C. Zhou, Z. W. Li, and Y . Tang, “Deadlock-free control of
automated manufacturing systems with ﬂexible routes and assembly
operations using Petri nets,” IEEE Trans. Ind. Inform.,Vol.9, No. 1,
pp. 109–121, Feb. 2013.
[12] H. Hu and Y . Liu, “Supervisor simpliﬁcation for AMS based on Petri
nets and inequality analysis,” IEEE Trans. Autom. Sci. Eng., vol. 11,
no. 1, pp. 66-77, Jan. 2014.
[13] M. Iordache and P. Antsaklis, “Synthesis of supervisor enforcing
general linear constraints in Petri nets,” IEEE Trans. Autom. Control,
vol. 48, no. 11, pp. 2036–2039, Nov. 2003.
[14] G. Jiroveanu, R. Boel, and B. Bordbar, “On-line monitoring of large
Petri net models under partial observation,” Discrete Event Dyn. Sys.:
Theor. and Appl., vol. 18, no. 3, pp. 323–354, Sept. 2008.
[15] J. Julvez and R. Boel, “A continuous Petri net approach for model
predictive control of trafﬁc systems,”IEEETrans. Syst., Man, Cybern.
A. Syst., Humans, vol. 40, no. 4, pp. 686–697, Jul. 2010.
[16] J. Komenda, T. Masopust, and J. H. V . Schuppen, “Supervisory control
synthesis of discrete-event systems using a coordination scheme,”
Automatica, vol. 48, no. 2, pp. 247–254, Feb. 2012.
[17] Z. W. Li and M. C. Zhou, Deadlock Resolution in Automated
Manufacturing Systems: A Petri net Approach, Springer, 2009.
[18] D. Perez and H. Barbera, “Modelling distributed transportation sys-
tems composed of ﬂexible automated guided vehicles in ﬂexible
manufacturing systems,” IEEE Trans. Ind. Inform., vol. 6, no. 2, pp.
166–180, May 2010.
[19] R. Su, J. H. V . Schuppen, and J. Rooda, “Maximally permissive co-
ordinated distributed supervisory control of nondeterministic discrete-
event systems,” Automatica, vol. 48, no. 7, pp. 1237–1247, Jul. 2012.
[20] R. Su, J. H. V . Schuppen, and J. Rooda, “Aggregative synthesis of
distributed supervisors based on automaton abstraction,” IEEE Trans.
Autom. Contr., vol. 55, no. 7, pp. 1627–1640, Jul. 2010.
[21] R. Su, J. H. V . Schuppen, and J. E. Rooda, “The synthesis of time
optimal supervisors by using heaps-of-pieces,” IEEE Trans. Autom.
Contr., vol. 57, no. 1, pp. 105–118, Jan. 2012.
[22] R. Su, J. H. V . Schuppen, J. E. Rooda, and A. T. Hofkamp, “Noncon-
ﬂict check by using sequential automaton abstractions based on weak
observation equivalence,” Automatica, vol. 46, no. 6, pp. 968–978,
Jun. 2010.
[23] K. Schmidt and C. Breindl, “Maximally permissive hierarchical con-
trol of decentralized discrete event systems,” IEEE Trans. Autom.
Contr., vol. 56, no. 4, pp. 723–737, Apr. 2011.
[24] C. R. Vazquez, J. H. V . Schuppen, and M. Silva, “A modular-
coordinated control for continuous Petri nets,” in Proc. IFAC World
Congress, Milano, Italy, Aug. 2011, pp. 6029–6035.
[25] L. Wang, C. Mahulea, J. Julvez, and M. Silva, “Minimum-time
decentralized control of choice-free continuous,” Nonlinear Analysis:
Hybrid Sys., vol. 7, no. 1, pp. 39–53, Jan. 2013.
[26] A. Vahidi, M. Fabian, and B. Lennartson, “Efﬁcient supervisory
synthesis of large systems,” Control Eng. Pract., vol. 14, no. 10, pp.
1157–1167, Oct. 2006.
4429
