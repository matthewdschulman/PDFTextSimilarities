Maximum Information Release While Ensuring
Opacity in Discrete Event Systems
Bo Zhang
1
, Shaolong Shu
1
, and Feng Lin
1,2
Abstract—Opacity is important in investigating secrecy, pri-
vacy, and other important properties in general systems that
can be modeled as discrete event systems. To ensure opacity, a
controller may be used to control information released to the
public. For transparency and other reasons, it is often desired
the information released to the public be maximum, as long
as opacity is not violated. In this paper, we investigate how to
release the maximum information while ensuring opacity. We
ﬁnd a necessary and sufﬁcient condition for a control policy
to ensure opacity. We also develop methods and algorithms
to design a controller that releases maximum information. We
consider both strong opacity and weak opacity.
1
I. INTRODUCTION
Opacityisanimportantpropertytobeinvestigatedinmany
practical systems such as computer systems, communica-
tion networks, and databases systems in which information
ﬂow must be controlled to ensure secrecy, security, privacy,
anonymity, non-interference, etc. Because of its importance,
opacity has been studied in the framework of discrete event
systems.Inparticular,[3]usesthemodeloflabeledtransition
systems to study opacity. A generalized deﬁnition of opacity
is proposed. It establishes links between opacity and the
information ﬂow concepts of anonymity and non-inference.
In [11], two notions of opacity are investigated. A system
is (S, P)-opaque if the evolution of the system through a
set of secret states S remains opaque to an observer who
observes activity in the system through the projection P. A
system is (S, P ,K)-opacity if (S, P)-opacity remains true
for K observations following the departure of the system’s
state from the set S.
In [12] [13], the problems of checking opacity and syn-
thesizing opaque systems by selecting the set of observable
eventsareaddressed.Itshowsthatcheckingwhetherasystem
is opaque and computing an optimal static observer ensuring
opacity are both PSPACE-complete problems.
To ensure opacity, [14] investigates the problem of con-
structing a minimally restrictive opacity-enforcing supervi-
sory, which restricts system within some legal behaviors
while enforcing initial-state opacity. In [7], [8], the problem
of computing a controller that enforces the opacity of a
predicate against an attacker is addressed. It shows that
an optimal control always exists. It also provides sufﬁcient
1
School of Electronics and Information Engineering, Tongji Univer-
sity, Shanghai, China.
2
Department of Electrical and Computer En-
gineering, Wayne State University, Detroit, MI 48202, USA, E-mail:
ﬂin@ece.eng.wayne.edu. The authors of this paper are supported in part by
the National Natural Science Foundation of China under Grants 60904019,
61143006 and 71071116.
conditions under which the solution is regular and can be
effectively computed.
We investigate opacity of discrete event systems in [9].
Unlike the previous works, we deﬁne opacity of a lan-
guage with respect to another language. This two-language
approach give us more ﬂexibility in applying opacity in
practical problem. Using our deﬁnition in [9], opacity can
not only be used to study security and privacy problems, but
also other information ﬂow problems such as observability
[10], diagnosability [15], and detectability [16]. While most
previous works deﬁne opacity in its strong sense, we deﬁne
both strong opacity and weak opacity [9]. We say that a lan-
guage L is strongly opaque with respect to another language
K if all strings in L are confused with some strings in K
fromanexternalagent’spointofview.Wesaythatalanguage
L is weakly opaque with respect to another language K if
some strings in L are confused with some strings in K.
The negation of weak opacity is called no opacity (that
is, totally transparent). Strong opacity, weak opacity and
no opacity can be used in different applications to solve
different problems. For example, the dining cryptographers
problem [6] involves both strong opacity and weak opacity.
Checking weak opacity (and hence no opacity) can be done
inpolynomialcomplexity[18].Wefurtherinvestigateopaque
superlanguages and sublanguages in [1] and supervisory
control to ensure opacity in [2].
In this paper, we investigate the problem of maximum
information release while ensuring opacity (weak or strong)
of discrete event systems. The rational for the investigation
is as follows. When an authority wants to decide what infor-
mation can be released to the public, two objectives are often
considered: (1) For security reasons, certain things must be
kept secret. This means either strong opacity or weak opacity
must be ensured. (2) For transparency reasons, the more
information is released to the public, the better. For example,
in USA, the Freedom of Information Act (FOIA) requires
that certain information and records of government agencies
to be released to the public upon request, unless such release
will harm national security or covered under other nine
speciﬁc exemptions. Since national security can be modeled
as an opacity problem, what information can be released can
be determined by solving a maximum information release
problem.
The Maximum Information Release Problem can be for-
mulatedasfollows.Anexternalagentistryingtogetasmuch
information as possible in order to distinguish strings in L
and K. What information will be released or communicated
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 3285
to the external agent is controlled by an internal controller
(or internal agent). The objective of the internal controller is
to ensure that opacity (either strong opacity or weak opacity)
is preserved. Under this condition, the internal controller is
also required to release or communicate as much information
as possible for the sake of transparency, fairness or other
purposes. In the framework of discrete event systems, the
maximum information release problem is for the internal
controllertocommunicateasmanyoccurrencesofobservable
transitions to the external agent while ensure either strong
opacity or weak opacity.
TheMaximumInformationReleaseProblemcanbesolved
either on-line or off-line. In this paper, we focus on off-
line approach. We derive a necessary and sufﬁcient condition
for an information release policy to ensure strong opacity.
We then propose algorithm to synthesize an information
release policy for strong opacity off-line. The computational
complexity of the algorithm is also analyzed. We then do the
same for weak opacity.
Our approach is new and innovative. It is different from
the approaches existed in the literature. The results that are
most closely related to ours are those published in [4], [5]. In
[4], [5], opacity is deﬁned for a secret predicate ?. A system
is opaque if every run in ? is observationally equivalent to a
run not in?. This deﬁnition is a special case of our deﬁnition
ofstrongopacity.Toensureopacity,astaticordynamicmask
is used to hide the occurrence of (observable) events. Various
problems and their solutions are then discussed in [4], [5].
The main differences between [4], [5] and this paper are
as follows. (1) The deﬁnitions of opacity are different. The
opacity deﬁned in [4], [5] (and most other papers on opacity)
is a special case of our strong opacity. Weak opacity is not
discussed in [4], [5]. (2) The mechanisms of control are
different. The dynamic mask in [4], [5] requires that if an
occurrence of an event is hidden, then it cannot change the
state of the dynamic mask. We do not need this assumption.
This makes our controller more ﬂexible and realistic. (3)
We develop algorithms to solve the Maximum Information
Release Problem for both strong opacity and weak opacity.
Another approach is presented in [17]. Instead of “deleting”
occurrences of events as in [4], [5] and this paper, [17] uses
insertion function to ensure opacity. This is a very interesting
approach and can be viewed as “dual” to deletion approach.
Due to space limitation, all the proofs are omitted. They
can be obtained from the authors.
II. OPACITY OF DISCRETE EVENT SYSTEMS
In this paper, we model a discrete event system by a
deterministic automaton [9]
G = (Q,,?,q
0
),
whereQisthesetofstate, thesetofevents,? thetransition
function, and q
0
?Q the initial state. The (partial) transition
function ? : Q?  ? Q describes the system dynamics:
given states q,q
?
? Q and event ? ? , ?(q,?) = q
?
if
the execution of ? from state q takes the system to state q
?
.
Notethat?(q,?)isundeﬁnedwhenevertheevent? cannotbe
executed from the stateq. The transition function is extended
to? :Q?
?
?Q in the usual way. We also use? to denote
the set of transitions: ? ={(q,?,?(q,?)) :q?Q??? }.
The behavior of discrete event system G is described by the
language generated by G deﬁned as
L(G) ={s? 
?
:?(q
0
,s)!},
where?(q
0
,s)!means?(q
0
,s)isdeﬁned.EachstringinL(G)
represents a possible execution or trajectory of the system.
L(G) describes all possible strings that can be generated by
the system. A subset of L(G) is a language that describes
a particular behavior or property of the system. A language
L?L(G) is (preﬁx) closed if any preﬁx of any string of the
language also belongs to the langauge.
Opacity is deﬁned with respect to two languages K ?
L(G) and L?L(G). Without loss of generality, we assume
that K and L are marked by Q
K
? Q and Q
L
? Q
respectively, that is,
K =L
m;K
(G) ={s?L(G) :?(q
0
,s)?Q
K
}
L =L
m;L
(G) ={s?L(G) :?(q
0
,s)?Q
L
}.
For convenience, we extend G by adding Q
K
and Q
L
as
follows.
G = (Q,,?,q
0
,Q
K
,Q
L
).
To study opacity of discrete event systems, we consider a
general observation mapping
? : 
?
? 
?
.
? is interpreted as follows: If a string of events s occurs
in the system, an external agent or public will see ?(s).
The natural projection P : 
?
? 
?
o
used in [10], where

o
?  is a subset of observable events, is a special case
of observation mapping. In general, however, ? can be any
observation mapping, not restricted to the natural projection.
An observation mapping ? can be extended from strings to
languages as follows. For a language L ? 
?
, its mapping
is deﬁned as,
?(L) ={t? 
?
: (?s?L) t =?(s)}.
For a language J ? 
?
, its inverse mapping is deﬁned as
?
?1
(J) ={t? 
?
:?(t)?J}.
Twoversionsofopacities,strongopacityandweakopacity,
are deﬁned in [2] as follows. Given two languages L,K ?
L(G), L is strongly opaque with respect to K and ?, if
?(L)??(K).
L is weakly opaque with respect to K and ?, if
?(L)??(K)?=?.
Since K and L are marked by Q
K
? Q and Q
L
? Q
respectively, we can check strong opacity and weak opacity
by calculating state estimates. After observing a string t ?
3286

?
, the state estimate, denoted by SE

(t), is the set of all
possible states that the system may be in. Formally,
SE

(t) ={q?Q : (?s?L(G))?(s) =t??(q
0
,s) =q}.
Proposition 1:L is strongly opaque with respect toK and
? if and only if
(?t??(L(G)))SE

(t)?Q
L
?=??SE

(t)?Q
K
?=?.
Proposition 2: L is weakly opaque with respect to K and
? if and only if
(?t??(L(G)))SE

(t)?Q
L
?=??SE

(t)?Q
K
?=?.
From the above results, we conclude that the key to
checking and ensuring strong or weak opacity is to calculate
state estimates. If the observation mapping is the natural
projection, then the state estimates can be obtained by
constructing an observerasfollows.Suppose that the discrete
eventsystemGiscurrentlyinasetofpossiblestatesQ
?
?Q,
then the set of all possible states which the system may visit
after observing t? 
?
o
is denoted by
R(Q
?
,t) ={q?Q :(?q
?
?Q
?
)(?s? 
?
)P(s) =t
??(q
?
,s) =q}.
In particular, the unobservable reach of Q
?
is deﬁned as
UR(Q
?
) =R(Q
?
,?).
The observer is a deterministic automaton
G
obs
= (X,
o
,?,x
0
) =Ac(2
Q
,
o
,?,UR({q
0
})),
where Ac(.) denotes the accessible part and the initial state
x
0
=UR({q
0
}) is the unobservable reach of q
0
. Note that a
statex?X is a subset ofQ (x?Q). The transition function
? :X?
o
?X is deﬁned, for x?Q and ?? 
o
, as:
?(x,?) =UR({q?Q : (?q
?
?x)?(q
?
,?) =q}).
Iftheabovesetisempty,then?(x,?)isundeﬁned.Weextend
? to ? : X ? 
?
o
? X in the usual way. State estimates
are characterized by the observer as stated in the following
proposition.
Proposition 3: For the natural projection ? =P, the state
estimates are given by
SE

(t) =?(x
0
,t).
With these preparations, we investigate the maximum
information release problem for opacity in the rest of the
paper.
III. MAXIMUM INFORMATION RELEASE FOR STRONG
OPACITY
Let us consider the following situation: The public (or
an external agent) requests information of the system. What
information can be release to the public is controlled by
a controller. The situation is illustrated in Figure 1. The
objective of the controller is to release as much information
as possible to the public under the constraint that L is
System G Controller ? Public
P
?
Fig. 1. Information release to the public
strongly opaque with respect to K. (We will consider weak
opacity in Section V.) The controller can observe the set of
observableevents 
o
.Itscontrolisbasedonthisobservation.
Formally, the control policy is described by a mapping
? :P(L(G))? 2
O
.
When the system G generates a string s ? L(G), the
controller will see P(s) ? P(L(G)). Its control decision
?(P(s)) ? 
o
is the set of events whose occurrences will
be released to the public (that is, the public knows when the
event occurs). Hence, its external observation is described by
a mapping
?
!
:L(G)? 
?
o
,
which is deﬁned as follows.
?
!
(?) =?, ?
!
(s?) =
{
?
!
(s)? if ???(P(s))
?
!
(s) if ? / ??(P(s))
Since the goal is to achieve maximum information release,
let us deﬁne an order on ? as follows. Given two controls
?
1
, ?
2
, we say that ?
1
≤?
2
if
(?t?P(L(G))) ?
1
(t)??
2
(t).
In other words, ?
2
releases more information than ?
1
. We
say that ?
1
<?
2
if
?
1
≤?
2
?(?t?P(L(G))) ?
1
(t)??
2
(t).
We now formally state the problem to be solved as follows.
Maximum Information Release Problem for Strong Opacity
(MIRPSO)
Find a control ? of information release that satisﬁes the
following two conditions.
1) The observation mapping ?
!
corresponding to ? en-
sures strong opacity, that is,
?
!
(L)??
!
(K).
2) For any other control ?
?
such that ? < ?
?
, the cor-
responding observation mapping ?
!
?
does not ensure
strong opacity, that is,
?
!
?
(L)???
!
?
(K).
To make the problem nontrivial, let us assume that if all
information is released, then strong opacity is not satisﬁed.
In other words,
P(L)??P(K).
Note that if all information is released, that is, for all t ?
P(L(G)), ?(t) = 
o
, then ?
!
=P.
To investigate the solution to MIRPSO, we note that,
without further constraints, MIRPSO is difﬁcult to solve,
3287
because there are simply too many choices for ?. For prac-
tical reasons, we assume that ? has a ﬁnite implementation
(H,?). Here H is a ﬁnite automaton
H = (Y,
o
,?,y
0
),
where Y is the set of states, 
o
the observable events, ?
the transition function, and y
0
?Y the initial state. H must
satisfy the condition that P(L(G))?L(H). ? is a feedback
mapping,
? :Y ? 2
o
.
The control ? :P(L(G))? 2
o
is obtained from H and ?
as follows.
?(t) =?(?(y
0
,t))
Note that a sufﬁcient condition for such a (H,?) to exist
is that ? is a right-congruence, that is,
(?t,t
?
? 
?
o
)?(t) =?(t
?
)? (?v? 
?
o
)?(tv) =?(t
?
v).
If ? can be implemented by (H,?), we denote it as
? = (H,?). For ? = (H,?), we can calculate state estimate
SE

!
(t), which will be abbreviated as SE
!
(t) in the rest of
the paper, as follows. Let
~
G = (
~
Q,,
~
?, ~ q
0
) =G||H,
where || denotes the parallel composition. Note that since
P(L(G))?L(H),
L(
~
G) =L(G)?P
?1
L(H) =L(G)
A state of
~
G is a pair ~ q = (q,y). The set of events that the
public or external agent can observe at state ~ q is given by
?(y). Replace the transitions in
~
G that cannot be observed
by public by ? as follows.
~
G
"
= (
~
Q,,
~
?
"
,~ q
0
),
where
~
?
"
={(~ q,?,
~
?(~ q,?)) : (~ q,?,
~
?(~ q,?))?
~
?? ~ q = (q,y)
????(y)}
?{(~ q,?,
~
?(~ q,?)) : (~ q,?,
~
?(~ q,?))?
~
?? ~ q = (q,y)
?? / ??(y)}
~
G
"
isanon-deterministicautomatonwith?-transitions.We
convertittoadeterministicautomaton(observer)intheusual
way:
~
G
obs
= (
~
X,
o
,
~
?,~ x
0
) =Ac(2
~
Q
,
o
,
~
?,UR({~ q
0
})).
The state estimates of the public under information release
described by control policy ? = (H,?) can be obtained as
follows.
Theorem 1: Consider an information release policy ? =
(H,?). After the public observers a string t ? ?
!
(L(G)),
the state estimate of the public is given by
SE
!
(t) ={q?Q : (?y?Y)(q,y)?
~
?(~ x
0
,t)}.
Example 1:
Let us consider the system modeled by automaton G
shown in Figure 2. The initial state is 1. The event set is
 ={?,?,?} and ? is unobservable (that is, 
o
={?,?}).
1 2
3 4
?
?
?
?
? ?
Fig. 2. The system G
We have the following information release policy. Initially,
the controller will release the information on the occurrence
of?.Afterthecontrollerobserveseither?or?,itwillrelease
the information as follows. If the last event it observes is ?,
thenitwillreleasetheinformationontheoccurrencesofboth
?and?;ifthelasteventobservesis?,thenitwillreleasethe
information on the occurrence of only ?. This information
release policy can be implemented by ? = (H,?) shown in
Figure 3.
?
?
?
?
?
?
{?}
{??}
{?}
Fig. 3. The information release policy ? = (H,?)
~
G can be obtained by parallel composition of G and H as
shown in Figure 4. The states of
~
G are pairs ~ q = (q,y).
The set of events that the public can observe at state ~ q
is given by ?(y). For instance, in state (3,{?}), the in-
formation on the occurrence of ? is released, but not the
informationontheoccurrenceof?.Therefore,thetransitions
((3,{?}),?,(1,{?})) will be replaced by an ?-transition
in
~
G
"
. Similarly, the following two transitions will also be
replaced by ?-transition in
~
G
"
: ((1,{?}),?,(2,{??})) and
((2,{??}),?,(4,{??})) (the event ? is not observable).
1,{?} 2,{??} 
1,{?} 
4,{??}  3,{?} 
1,{??}  
?
?
?
?
?
? ?
?
?
?
A B
C D
E
F
Fig. 4. Parallel composition
~
G =GjjH
3288
Renaming the states as A,B,C,D,E,F and converting
~
G
"
into a deterministic automaton, we obtained
~
G
obs
shown
in Figure 5, which gives us the state estimates of the public
after observing a string. For instance, after observing??, the
state estimate is {2,4}; and after observing ???, the state
estimate is {1}.
A,B,D C,E B,D
F
?
?
?
?
? ?
{1,2,4} {1,3} {2,4}
{1}
?
?
Fig. 5. Observer
~
G
obs
= (
~
X,o,
~
?,~ x
0
)
Using observer
~
G
obs
, we can check whether a control
policyforinformationreleaseensuresstrongopacityasstated
in the following theorem.
Theorem 2: Consider an information release policy ? =
(H,?). The corresponding observation mapping ?
!
ensures
strong opacity, that is, ?
!
(L)??
!
(K), if and only if in the
observer
~
G
obs
= (
~
X,
o
,
~
?,~ x
0
),
(?~ x?
~
X){q?Q : (?y?Y)(q,y)? ~ x}?Q
L
?=?
?{q?Q : (?y?Y)(q,y)? ~ x}?Q
K
?=?.
IV. OFF-LINE ALGORITHM FOR MAXIMUM
INFORMATION RELEASE FOR STRONG OPACITY
In the previous section, we investigate how to check
whether a given control ? ensures strong opacity or not. In
this section, we investigate how to design a control policy
? for maximum information release while ensures strong
opacity using an off-line approach.
To do this, we need to make a further assumption on con-
trol policy ?. We assume that ? is state-estimate-based, that
is, ? depends only on the current state estimate. Formally,
state-estimate-based control policy means that H = G
obs
,
that is, ? is implemented by (G
obs
,?) for some ?.
For two feedback mapping ?
1
and ?
2
, deﬁne ?
1
≤ ?
2
and ?
1
< ?
2
in the way similar to that for ?
1
≤ ?
2
and
?
1
<?
2
. It is not difﬁcult to show that for ?
i
= (G
obs
,?
i
),
i = 1,2,
?
1
≤?
2
??
1
≤?
2
?
1
<?
2
??
1
<?
2
.
Fora control policyimplemented by (G
obs
,?), we can check
whether it ensures strong opacity using Theorem 2. However,
since the control policy is state-estimate-based, there is a
simpler way to do the checking, which is as follows. First,
we replace the transitions in G
obs
that cannot be observed
by the public by ? :
G
obs;"
= (X,
o
,?
"
,x
0
),
where
?
"
={(x,?,?(x,?)) : (x,?,?(x,?))??????(x)}
?{(x,?,?(x,?)) : (x,?,?(x,?))???? / ??(x)}.
G
obs;"
is a non-deterministic automaton with?-transitions.
Convert it to a deterministic automaton in the usual way:
(G
obs;"
)
obs
= (Z,
o
,?,z
0
) =Ac(2
X
,
o
,?,UR(x
0
)).
Then we have the following theorem.
Theorem3:Foracontrolpolicyimplementedby(G
obs
,?),
automaton (G
obs;"
)
obs
is isomorphic to automaton
~
G
obs
,
denoted by
(G
obs;"
)
obs
=
~
G
obs
.
We can now derive the following simpler condition for
an state-estimate-based information release policy to ensure
strong opacity.
Theorem 4: Consider an state-estimate-based information
release policy? = (G
obs
,?). The corresponding observation
mapping ?
!
ensures strong opacity, that is, ?
!
(L)??
!
(K),
if and only if in the observer (G
obs;"
)
obs
= (Z,
o
,?,z
0
),
(?z?Z)(
?
x?z
x)?Q
L
?=?? (
?
x?z
x)?Q
K
?=?.
Based on the above results, the following algorithm can
be used to calculate a control that solves the Maximum
Information Release Problem for Strong Opacity.
Algorithm 1 (Off-line Algorithm for Strong Opacity)
Input: G, 
o
;
Output: H, ?;
1: G
obs
= (X,
o
,?,x
0
) =Ac(2
Q
,
o
,?,UR({q
0
}))
with ?(x,?) =UR({q?Q : (?q
?
?x)q?f(q
?
,?)});
2: H =G
obs
;
3: for all x?X, ?(x) =?;
4: for all x?X, for all ?? 
o
, do begin
4.1: ?(x) =?(x)?{?};
4.2: G
obs;"
= (X,
o
,?
"
,x
0
) with
?
"
={(x,?,?(x,?)) : (x,?,?(x,?))??????(x)}
?{(x,?,?(x,?)) : (x,?,?(x,?))???? / ??(x)}
4.3: (G
obs;"
)
obs
= (Z,
o
,?,z
0
) =
Ac(2
X
,
o
,?,UR(x
0
)) with
?(z,?) =UR({x?X : (?x
?
?z)q??
"
(x
?
,?)})
4.4: if (?z?Z)(
?
x?z
x)?Q
L
?=?? (
?
x?z
x)?Q
K
?=?
is not true, then ?(x) =?(x)?{?}
4.5: End
5: End.
Since the computation of observer is of exponential com-
plexity and it is done twice, the computational complexity of
Algorithm 1 is double exponential.
V. MAXIMUM INFORMATION RELEASE FOR WEAK
OPACITY
Starting from this section, we consider weak opacity.
Therefore,theobjectiveofthecontrolleristoreleaseasmuch
information as possible to the public under the constraint that
L is weakly opaque with respect to K. Formally, we want
to solve the following problem.
3289
Maximum Information Release Problem for Weak Opacity
(MIRPWO)
Find a control ? of information release that satisﬁes the
following two conditions.
1) The observation mapping ?
!
corresponding to ? en-
sures weak opacity, that is,
?
!
(L)??
!
(K)?=?.
2) For any other control ?
?
such that ? < ?
?
, the cor-
responding observation mapping ?
!
?
does not ensure
weak opacity, that is,
?
!
?
(L)??
!
?
(K) =?.
To make the problem nontrivial, let us assume that if all
information is released, then weak opacity is not satisﬁed,
that is,
P(L)?P(K) =?.
As before, we assume that the control policy? has a ﬁnite
implementation (H,?), that is, ? = (H,?). By Proposition
2 and Theorem 1, we have the following necessary and
sufﬁcient condition for a control policy ? to ensure weak
opacity.
Theorem 5: Consider an information release policy ? =
(H,?). The corresponding observation mapping ?
!
ensures
weak opacity, that is, ?
!
(L)??
!
(K)?=?, if and only if in
the observer
~
G
obs
= (
~
X,
o
,
~
?,~ x
0
),
(?~ x?
~
X){q?Q : (?y?Y)(q,y)? ~ x}?Q
L
?=?
?{q?Q : (?y?Y)(q,y)? ~ x}?Q
K
?=?.
As in the case of strong opacity, if a control policy is
implemented by (G
obs
,?), then automaton (G
obs;"
)
obs
and
~
G
obs
areisomorphic:(G
obs;"
)
obs
=
~
G
obs
.Therefore,wehave
the following theorem.
Theorem 6: Consider an state-estimate-based information
release policy? = (G
obs
,?). The corresponding observation
mapping ?
!
ensures weak opacity, that is, ?
!
(L)??
!
(K)?=
?, if and only if in the observer (G
obs;"
)
obs
= (Z,
o
,?,z
0
),
(?z?Z)(
?
x?z
x)?Q
L
?=??(
?
x?z
x)?Q
K
?=?.
Using Theorem 6, the following algorithm can be derived
that calculates a control ? that solves the Maximum Infor-
mation Release Problem for Weak Opacity.
Algorithm 2 (Off-line Algorithm for Weak Opacity)
Input: G, 
o
;
Output: H, ?;
1: G
obs
= (X,
o
,?,x
0
) =Ac(2
Q
,
o
,?,UR({q
0
}))
with ?(x,?) =UR({q?Q : (?q
?
?x)q?f(q
?
,?)});
2: H =G
obs
;
3: for all x?X, ?(x) =?;
4: for all x?X, for all ?? 
o
, do begin
4.1: ?(x) =?(x)?{?};
4.2: G
obs;"
= (X,
o
,?
"
,x
0
)with
?
"
={(x,?,?(x,?)) : (x,?,?(x,?))??????(x)}
?{(x,?,?(x,?)) : (x,?,?(x,?))???? / ??(x)}
4.3: (G
obs;"
)
obs
= (Z,
o
,?,z
0
) =
Ac(2
X
,
o
,?,UR(x
0
))with
?(z,?) =UR({x?X : (?x
?
?z)q??
"
(x
?
,?)})
4.4: if (?z?Z)(
?
x?z
x)?Q
L
?=??(
?
x?z
x)?Q
K
?=?
is not true, then ?(x) =?(x)?{?}
4.5: End
5: End.
Same as Algorithm 1, the computational complexity of
Algorithm 2 is also double exponential.
REFERENCES
[1] M. Ben-Kalefa and F. Lin, “Opaque superlanguages and sublanguages
in discrete event systems,” Proceedings of the 48th IEEE Conference
on Decision and Control, pp. 199-204, 2009.
[2] M. Ben-Kalefa and F. Lin, “Supervisory control for opacity of discrete
event systems,” Proceedings of 49th Annual Allerton Conference on
Communication, Control, and Computing, pp. 1113-1119, 2011.
[3] J. W. Bryans, M. Koutny, L. Mazare and P. Y. A. Ryan, “Opacity
generalised to transition systems,” FAST 2005, LNCS 2860, pp. 81-95,
2006.
[4] F. Cassez, J. Dubreil and H. Marchand, “Dynamic Observers for the
Synthesis of Opaque Systems,” ATVA 2009, LNCS 5799, pp. 352-367,
2009.
[5] F. Cassez, J. Dubreil and H. Marchand, “Synthesis of opaque system
with static and dynamic masks,” Formal Methods in System Design, 40,
pp. 88-115, 2012.
[6] D. Chaum. The dining cryptographers problem: Unconditional sender
and recipient untraceability. Journal of Cryptology, 1:6575, 1988.
[7] J. Dubreil, Ph. Darondeau and H. Marchand, “Opacity enforcing control
synthesis,” Proceedings of the 9th International Workshop on Discrete
Event Systems, pp. 28-35, 2008.
[8] J. Dubreil, Ph. Darondeau and H. Marchand, “Supervisory control for
opacity,” IEEE Transactions on Automatic Control, 55(5), pp. 1089-
1100, 2010.
[9] F. Lin, “Opacity of discrete event systems and its applications,” Auto-
matica, 47, pp. 496-503, 2011.
[10] F. Lin and W. M. Wonham, “On observability of discrete-event
systems,” Information Sciences, 44, pp. 173-198, 1988.
[11] A. Saboori and C. Hadjicostis, “Notions of security and opacity in
discrete event systems,” Proceedings of the 46th IEEE Conference on
Decision and Control, pp. 5056-5061, 2007.
[12] A. Saboori and C. Hadjicostis, “Veriﬁcation of initial-state opacity
in security applications of DES,” Proceedings of the 9th International
Workshop on Discrete Event Systems, pp. 328-333, 2008.
[13] A.SabooriandC.Hadjicostis,“Veriﬁcationofinﬁnite-stepopacityand
complexity considerations,” IEEE Transactions on Automatic Control,
57(5) pp. 1265-1269, 2012.
[14] A. Saboori and C. Hadjicostis, “Opacity-enforcing supervisory strate-
gies via state estimator constructions,” IEEE Transactions on Automatic
Control, 57(5) pp. 1155-1165, 2012.
[15] M. Sampath, R. Sengupta, S. Lafortune, K. Sinnamohideen, and D.
Teneketzis. Diagnosability of discrete event systems. IEEE Transactions
on Automatic Control, 40(9), pp. 1555-1575, 1995.
[16] S. Shu and F. Lin, “Detectability of discrete event systems with
dynamic event observation,” Systems & Control Letters, 59(1), pp. 9-17,
2010.
[17] Y. Wu and S. Lafortune, “Enforcement of opacity properties using
insertion functions,” 51st IEEE Conference on Decision and Control,
pp. 6722-6728, 2012.
[18] B. Zhang, S. Shu and F. Lin, “Polynomial algorithm to check opacity
in discrete event system,” Proceedings of 24th Chinese Control and
Decision Conference, pp. 763-769, 2012.
3290
