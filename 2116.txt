Statistical Analysis of Stochastic Multi-Robot Boundary Coverage
Ganesh P. Kumar
1
and Spring Berman
2
Abstract— We present a novel analytical approach to comput-
ing the population and geometric parameters of a multi-robot
system that will provably produce speciﬁed boundary coverage
statistics. We consider scenarios in which robots with no global
position information, communication, or prior environmental
data have arrived at uniformly random locations along a simple
closed or open boundary. This type of scenario can arise in a
variety of multi-robot tasks, including surveillance, collective
transport, disaster response, and therapeutic and imaging
applications in nanomedicine. We derive the probability that
a given point robot conﬁguration is saturated, meaning that all
pairs of adjacent robots are no farther apart than a speciﬁed
distance. This derivation relies on a geometric interpretation of
the saturation probability and an application of the Inclusion-
Exclusion Principle, and it is easily extended to ﬁnite-sized
robots. In the process, we obtain formulas for (a) an integral
that is in general computationally expensive to compute directly,
and (b) the volume of the intersection of a regular simplex with
a hypercube. In addition, we use results from order statistics
to compute the probability distributions of the robot positions
along the boundary and the distances between adjacent robots.
We validate our derivations of these probability distributions
and the saturation probability using Monte Carlo simulations
of scenarios with both point robots and ﬁnite-sized robots.
I. INTRODUCTION
Multi-robot systems comprised of large numbers of inex-
pensive, relatively expendable platforms have the potential to
perform tasks on large spatial and temporal scales quickly,
robustly, and with little to no human supervision. The pro-
duction and deployment of such collectives is approaching
feasibility due to recent advances in computing, sensing,
actuation, power, control, and 3D printing. In the last few
years, the miniaturization of these technologies has led to
many novel platforms for multi-robot applications, including
micro aerial vehicles and nano air vehicles [1], [2] for tasks
such as exploration, mapping, environmental monitoring,
surveillance, and reconnaissance. At even smaller scales,
micro-nano systems are currently being developed for micro
object manipulation and biomedical applications, including
molecular imaging, drug and gene delivery, therapeutics, and
diagnostics [3], [4]. It is now possible to design nanoparti-
cles, DNA machines, synthetic bacteria, and magnetic ma-
terials that can move, sense, and interact in a controlled
fashion, similar to robotic platforms [5]. These nanorobots
will need to be deployed in massive numbers; for instance,
1
Ganesh P. Kumar is with the School of Computing, Informatics, and
Decision Systems Engineering, Arizona State University, Tempe, AZ 85287,
USA gpkumar@asu.edu
2
Spring Berman is with the School for Engineering of Matter, Trans-
port and Energy, Arizona State University, Tempe, AZ 85287, USA
spring.berman@asu.edu
trillions of nanoparticles would be required to deliver drugs
to a tumor or yield a visible signal for sensing [6].
Many multi-robot applications will involve a boundary
coverage task, in which robots must arrange themselves
along the boundary of a region or object according to a
speciﬁed density. Possible applications include cooperative
manipulation and transport of payloads, surveillance tasks
such as perimeter patrolling, and disaster response tasks such
as cordoning off a hazardous area or extinguishing a ﬁre.
In nanomedicine, therapeutic and imaging applications will
require the use of ligand-coated nanoparticles that can bind
selectively to cell surfaces with high receptor densities [7].
This paper addresses boundary coverage tasks in which
the robots have extremely limited capabilities, as in micro-
nanorobotic applications, or in which it is impractical or
impossible to use GPS, communication, or prior environ-
mental data, for instance in disaster response operations
and intelligence-surveillance-reconnaissance missions. In ad-
dition, the boundary coverage task must be accomplished
through stochastic robot behaviors, which arise from noise
due to sensor and actuator errors; randomness in robot en-
counters with the boundary; and, for nanorobots, the effects
of Brownian motion and chemical interactions [3]. There is
a sizable body of work on designing stochastic robot control
policies that produce different types of desired collective
behaviors in multi-robot systems, including assembly and
self-assembly [8], [9], [10], [11] and task allocation based on
spontaneous robot decisions [12], [13], [14], [15]. Encounter-
dependent task allocation strategies are most closely related
to our stochastic coverage problem, but existing work either
deals with scenarios where encountered objects are small
(on the scale of the robot) [16], [17] or where large objects
are covered dynamically by the robots [18]. In contrast
to previous work, we address a static stochastic coverage
scenario in which the encountered object or region is large
compared to the robots.
This paper presents an analytical framework for computing
the robot physical and sensing parameters and the robot
population that will provably achieve boundary coverage
statistics that may be of interest in multi-robot applications.
As stated previously, we assume that the robots have no
global position information, no inter-robot communication,
and no prior information about the boundary location or
geometry. First, we derive the probability that a robot con-
ﬁguration around a boundary is saturated, meaning that
each adjacent pair of robots lies within a certain distance.
The quantity that this distance signiﬁes depends on the
application. For instance, when saturation corresponds to full
sensor coverage of the boundary, the distance represents the
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 74
Fig. 1. Snapshot of a simulation in which a swarm of randomly-moving
robots (green circles) with only local information must allocate themselves
in groups of target sizes (red circles) around the perimeters of two types
of circular regions (yellow and blue). We have developed an approach to
designing stochastic robot control policies that produce the target allocations
with probabilistic guarantees on performance [19].
diameter of a robot’s sensing range. Using order statistics,
we also derive the probability distributions of robot positions
along the boundary and distances between adjacent robots.
In this paper, we consider scenarios in which robots are
positioned at uniformly random positions along the boundary.
The analytical results that we develop for this case would
apply to scenarios in which robots are conﬁned to the
boundary at unknown locations or arrive simultaneously at
the boundary at random positions. We study this case as a
foundation for future work on analyzing the more general
case in which robots claim positions along the boundary one
at a time, as in the scenario in Figure 1.
II. PROBLEM STATEMENT
LetI =[0;1] be the unit interval. We are given a simple
open or closed curve g :I!R
2
that has unit length. In
addition, if closed, g is parameterized such that g(0)=g(1).
A sequence of n identical circular robots, each of radius
d 0, is placed at random positions along g, with no
overlapping robot pairs. By the position of a robot, we mean
that of its center. The robot positions g(t
0
1
) through g(t
0
n
),
not necessarily arranged in order, are provided to us; we are
further given that, if g is closed, we have g(0)=g(t
0
1
) . For
our convenience, we call robots of zero radius point robots,
and those with d > 0 ﬁnite-sized robots.
Deﬁne the distance between two robots to be the closest
distance between their circles. This implies that the distance
between two robots located at positions g(t
0
1
) and g(t
0
2
) is
the absolute value ofjjg(t
0
2
) g(t
0
1
)jj  2d. Given a positive
distance d2I , we deﬁne the notion of saturation separately
for open and closed curves. The closed curve g is deﬁned to
be saturated iff every pair of adjacent robots on it is separated
by a distance of at most d. The open curve g is deﬁned to be
saturated iff, in addition to having adjacent robots separated
by at most d, the centers of the ﬁrst and and last robots on g
leave a distance of at most d from the endpoint of g closest
to them.
For ﬁnite-sized robots of radius d, we generally choose a
value of d that ensures that no robot will ﬁt in between two
adjacent robots whose distance is at most d. Evidently, the
choice d = 2d ensures this, and will be used hereafter. No
such d naturally suggests itself for point robots, for whom d
can be selected arbitrarily. With this in mind, we formulate
our problem.
Problem Statement Given a conﬁguration in which each
of n robots uniformly randomly attach to g, compute:
1) the probability p
sat
that they saturate the curve,
2) the probability density functions (pdf’s) of each robot
on the curve, and
3) the pdf of the inter-robot distance between adjacent
robots.
Note that this statement deals with four cases, for the
robots can be either point or ﬁnite-sized, and the curve can
be either closed or open. Our next step will be to save labor
by cutting down these four cases to two.
III. REDUCTION FROM OPEN TO CLOSED CURVE
In this section, we reduce any problem for a robot conﬁg-
uration on an open curve to an equivalent one on a closed
curve, thereby simplifying our computations. Suppose ﬁrst
that g is closed. Cut g open at g(0) = g(1), and unwrap
it on the positive real axis, placing g(0) at zero. Since g
has unit length, it unwraps completely onto the unit interval
I . Note that unwrapping g leaves distances between robots
unchanged. The robot positions g(t
0
i
) now fall on positions
t
0
i
on I . Observe that t
0
1
is identiﬁed with both endpoints
of I , as g was a closed curve. We will use this important
property repeatedly in the coming discussion.
Now start at t
0
1
and move rightwards along I , labeling
robot positions in order until the right endpoint of I is
reached, taking us back to t
0
1
. This results in the sequence
(t
1
= t
0
1
;t
2
;:::;t
n
), which is a permutation of the unordered
points t
0
i
. Since t
1
= t
0
1
is identiﬁed with both ends ofI , it is
considered to fall to the left of t
2
, as well as to the right of t
n
,
at the same time. Thus, the distance between t
1
and t
2
uses
t
1
= 0, and equals t
2
; on the other hand, the distance between
t
n
and t
1
makes use of t
1
= 1, and evaluates to 1 t
n
. To make
results simple, we deﬁne t
n+1
= t
1
, pretending that the index
wraps around. Also, use the value t
n+1
= 1 when computing
the distance t
n+1
  t
n
. Saturation requires each inter-robot
distance of the form t
i+1
 t
i
to be bounded above by d.
Next, suppose that g is an open curve, to which n robots
attach precisely as before. Unwrap the curve as before
onto I . Because g is open, we have t
0
1
6= 0 in general.
Consequently, labeling robot positions in order leads to t
1
6= 0
in general. Like in the case of closed curves, saturation
implies that t
i+1
 t
i
 d, for 1 i n 1. However, since g
is open, saturation forces two additional constraints: t
1
 d
and 1 t
n
 d.
Introduce an artiﬁcial point robot t
0
, and identify it with
both ends ofI . This robot behaves exactly like t
1
in the case
of closed g. Deﬁne t
n+1
= t
0
, analogous to closed curves,
except that the index wraps back to 0 instead of 1. As
before, always take t
n+1
= 1 for computing t
n+1
  t
n
. Now
75
saturation needs t
1
 t
0
 d, and t
n+1
 t
n
= 1 t
n
 d, which
are equivalent to the two extra constraints. This scenario is
identical to having n+1 robots on a closed curve. Also, note
that the position of t
i
on the open curve matches that of t
i+1
on the closed curve.
An additional observation helps us with the reduction for
ﬁnite-sized robots. Suppose that the closed curve g having n
ﬁnite-sized robots is unwrapped on I as before. The ﬁrst
robot centered at t
0
1
= t
1
= 0 splits in half when g unwrapped.
It spans the endpoints of I to occupy the disconnected
interval F
1
= [0;d][[1 d;1], splitting into half-circles.
Every other robot is centered at some t
i
2I , and physically
occupies the interval F
i
=[t
i
 d;t
i
+d] now. Deﬁne t
n+1
= t
1
as before, pretending that the index wraps around. Note that
the n robots take up a length of 2dn altogether on I . For
saturation, we require that no robot can ﬁt in the space
between two consecutive ones. This leads n constraints of
the form t
i+1
 t
i
< 2d.
When g is open, however, t
1
6= 0 in general, leading to
two extra constraints , t
1
< 2d and 1  t
n
< 2d. As before,
we introduce the artiﬁcial robot t
0
; however, it must be placed
in a way that resembles that of t
1
for closed curves, yet does
not take away any space fromI for other robots to occupy.
To meet both these requirements, we place t
0
outside I ,
splitting it into half-circles so that F
0
=[ d;0][[1;1+d].
Also, we have t
n+1
= 1, coinciding with the right endpoint
ofI . For saturation, t
1
can be at most d away from t
0
, and
likewise t
n
can be at most d away from t
n+1
, taking care of
the two extra constraints automatically. This is equivalent to
having n+ 1 robots on a closed curve of length 1+ 2d.
In short, for point robots, a problem with parameters(n;d)
on the open curve is equivalent to one with parameters (n+
1;d) on the closed curve. For ﬁnite-sized robots, a problem
with parameters (n;d) on the open curve of unit length is
equivalent to one with parameters(n+1;d) on a closed curve
of length 1+2d. Due to these reductions, the future sections
will compute results mainly for closed curves, commenting
on the open curve case only when needed.
IV. A BRUTE FORCE APPROACH TO COMPUTING p
sat
We now turn back to n point robots on a closed curve.
We ﬁrst characterize p
sat
as the ratio of the measure
of E , the space of saturated robot conﬁgurations, to the
measure of W, the sample space of all possible robot
conﬁgurations. Since t
1
= 0, the sample space W consists
of all points (t
2
;t
3
;:::;t
n
) with coordinates obeying 0
t
i
 t
i+1
 1. This space W forms a simplex in R
n 1
with vertices v
1
= (0;0;:::;0;0);v
2
= (0;0;:::;0;1);v
3
=
(0;0;:::;0;1;1);:::;v
n
=(1;1;:::;1;1). We call W the event
simplex. The measure ofW is its(n 1)-dimensional volume,
jWj=
Z
1
0
Z
1
t
2
:::
Z
1
t
n 1
dt
n
:::dt
3
dt
2
=
1
(n  1)!
(1)
We now characterize the space E of saturated robot con-
ﬁgurations. To do this, we need to identify the set of robot
position ranges, or saturating intervals I
i
, i= 2;:::;n, that
guarantee a saturated robot conﬁguration. We derive the I
i
from the intersection of the left saturating interval L
i
and
right saturating interval R
i
for each robot position t
i
. These
two intervals denote the range of positions that result in the
saturating conditions (t
i
 t
i 1
)2[0;d] and (t
i+1
 t
i
)2[0;d],
respectively.
To ensure the condition (t
i
  t
i 1
)2[0;d], we deﬁne the
left saturating interval for each robot position t
i
as
L
i
=[t
i 1
;min(t
i 1
+ d;1)]; i= 2;3;:::;n (2)
To ensure the condition (t
1
 t
n
)=(1 t
n
)2[0;d], we deﬁne
the right saturating interval for position t
n
as
R
n
=[max(0;1  d);1] (3)
We obtain the right saturating intervals R
i
for the remaining
positions t
i
using the following approach. We will refer to
a sequence of robot positions as d-separated if the distance
between any two consecutive robot positions is precisely d.
Consider a particular t
2
2 L
2
, and deﬁne a sequence of d-
separated positions t
3
;t
4
;:::;t
n
. If the resulting t
n
2 R
n
, the
choice of t
2
is sufﬁcient to ensure saturation. The leftmost
possible positions t
i
that will still result in saturation are
t
n
= 1  d;t
n 1
= 1  2d;:::;t
2
= 1 (n  1)d. Hence, to
ensure saturation, we deﬁne R
2
=[min(1  d(n  1);0);1].
Extending this reasoning to the remaining robot positions,
the following R
i
ensure the condition (t
i+1
 t
i
)2[0;d]:
R
i
=[min(1 (n  i+ 1)d;0);1]; i= 2;3;:::;n  1 (4)
Finally, from the intervals in Equation (2), Equation (3), and
Equation (4), we obtain the following intervals for the robot
positions that lead to saturated conﬁgurations:
I
i
= L
i
\ R
i
=[max(t
i 1
;1 (n  i+ 1)d);min(t
i 1
+ d;1)];
i= 2;3;:::;n (5)
A point inE has t
i
2 I
i
for i2f2;3;:::;ng. We can compute
the measure ofE as
jEj=
Z
t
2
2I
2
Z
t
3
2I
3
:::
Z
t
n
2I
n
dt
n
:::dt
2
(6)
Note that if any of the intervals I
i
is empty,E becomes the
empty set and the probability of saturation is zero.
This integral can be evaluated on a case-by-case basis,
but a naive expansion of the min and max functions in the
limits of each I
i
could result in an exponential number of
subintegrals, which is computationally expensive. Thus, the
probability of saturation p
sat
=jEj=jWj needs to be deter-
mined by other means, for which we explore the geometric
approach described in the next section.
V. GEOMETRIC INTERPRETATION OF p
sat
We use an approach to computing p
sat
that can be de-
scribed geometrically and is based on the characterization
of the inter-robot distances, which we call the slacks. We
will initially consider conﬁgurations of point robots. Given
a sequence of robot positions t
i
, i= 1;2;:::;n, deﬁne the i
th
slack to be the distance between t
i
and t
i+1
:
s
i
= t
i+1
 t
i
; i= 1;2;:::;n (7)
(8)
76
Recall from section III that since t
n+1
= 1, we have s
n
=
1 t
n
. Deﬁne the slack set S
n
R
n
to be the set of all possible
slack points s =(s
1
;s
2
;:::;s
n
), each of whose components
is a valid slack. To characterize this set, we note that valid
slacks are always nonnegative and that the sum of the slacks,
called the total slack s, is always equal to the curve length
l. Thus, the slack set is deﬁned as
S
n
=fs2R
n
j s
i
 0; i= 1;2;:::;n;
n
å
i=1
s
i
= sg (9)
The slack set S
n
forms an (n  1)-dimensional simplex that
we call the slack simplex. The n vertices of S
n
are located
at (s;0;0;:::;0);(0;s;0;:::;0);:::;(0;0;0;:::;s). Hence, S
n
is a regular simplex with side length s
p
2. The volume of an
n-dimensional regular simplex of side a is
V
n
(a)=

a
p
2

n
p
n+ 1
n!
(10)
This gives the following volume for S
n
:
jS
n
j= V
n 1
(s
p
2)=
s
n 1
p
n
(n  1)!
(11)
Now we describe the set of points s2R
n
that corresponds to
conﬁgurations that are saturated, but that do not necessarily
conserve the total slack (and thus form a valid robot conﬁgu-
ration). For such conﬁgurations, s
i
2[0;d] for all i. Thus, the
set of all points leading to saturation forms an n-dimensional
hypercube H
n
:
H
n
=fs2R
n
j 0 s
i
 d; i= 1;2;:::;ng (12)
The set of valid robot conﬁgurations that are saturated is
therefore the (n  1)-dimensional set E
n
 S
n
\ H
n
. The
probability of saturation p
sat
is the volume of this set divided
by the volume of the slack simplex, the set of all valid
robot conﬁgurations. Determining the volume of E
n
is not
straightforward, but it can be computed using the following
approach. Suppose that A
k
f1;2;:::;ng is a k-element
subset of the slack indices. Deﬁne for any A
k
the set E
0
n
(A
k
)
consisting of all slack points whose components s
i
, i2 A
k
,
are at least d:
E
0
n
(A
k
)=fs2 S
n
j s
i
 d8i2 A
k
g (13)
Note that there is no constraint on the remaining slack
coordinates, which may exceed or fall below d as long as
s2 S
n
. For each slack s
i
, i2 A
k
, deﬁne a reduced slack
s
0
i
= s
i
  d. We can equivalently deﬁne E
0
n
(A
k
) in terms of
the reduced slacks as:
E
0
n
(A
k
)=fs2 S
n
j
å
i2A
k
s
0
i
+
å
i= 2A
k
s
i
= s  kdg (14)
This deﬁnition makes it evident that E
0
n
(A
k
) is a regular
simplex that conserves the total reduced slack s  kd. By
Equation (10), its (n  1)-dimensional volume is given by
jE
0
n
(A
k
)j= V
n 1
((s  kd)
p
2)=
 
s  kd

n 1
p
n
(n  1)!
(15)
Equation (15) makes sense only if(s kd) 0; equivalently,
we need 1 k K where K =bs=dc. If k > K, then
jE
0
n
(A
k
)j= 0, as there is no subset of S
n
in which s
i
> d,
i2 A
k
. We will next use Equation (15) to compute the volume
of E
0
n
= S
n
nE
n
. This set is deﬁned as
E
0
n
=fs2 S
n
j9s
i
 d; i2f1;2;:::;ngg=
[
A
k
E
0
n
(A
k
) (16)
Note that the union runs over all possible choices of A
k
.
To compute the volume of the union, we use the Inclusion-
Exclusion Principle [20] which states that
j
[
A
k
E
0
n
(A
k
)j=
n
å
k=1
( 1)
k 1
n
å
k=1
jE
0
n
(A
k
)j (17)
To evaluate the second sum on the righthand side of
Equation (17), note that there are precisely
 
n
k

subsets
of f1;2;:::;ng of cardinality k, and the volume of each
corresponding E
0
n
(A
k
) is given by Equation (15). Also, we
need to take this sum only on the range 1 k K, for
otherwisejE
0
n
(A
k
)j= 0. From these observations, we obtain
jE
0
n
j=j
[
A
k
E
0
n
(A
k
)j=
K
å
k=1
( 1)
k 1

n
k

 
s  kd

n 1
p
n
(n  1)!
(18)
Since E
n
= S
n
nE
0
n
,jE
n
j=jS
n
j jE
0
n
j. Using Equation (11)
and Equation (18), we obtain the probability of saturation:
p
sat
=
jE
n
j
jS
n
j
= 1 
K
å
k=1
( 1)
k 1

n
k

1 
kd
s

n 1
(19)
Finally, from section III, this result trivially extends to
open curves by mapping n7! n+ 1.
A. Evaluating the Intractable Integral in Equation (6)
An immediate consequence of Equation (19) is that we
can now evaluate the integral in Equation (6) as jEj =
p
sat
jWj= p
sat
=(n  1)! Let S denote the sum on the right
side of Equation (19). Given n, d, and s= 1, this sum S
Equation (19) takes K steps in all to evaluate in a loop.
For efﬁciency, the k-th step computes
 
n
k

recursively from
 
n
k 1

in O(1) time and the power term (1  kd=s)
n 1
by
binary exponentiation in O(logn) time. Note that both
 
n
k

and the power term have a size that is bounded above by a
polynomial function of the number of input bits. As such,
p
sat
can be computed in polynomial time, with O(K logn)
multiplications in all.
B. Extension to Finite-Sized Robots
We avoided addressing ﬁnite-sized robots in section IV,
since this case is even more complicated than that of point
robots. However, the geometric approach has an easy exten-
sion to ﬁnite-sized robots. Following section II, deﬁne the
slack s
i
by
s
i
= t
i+1
 t
i
  2d; i= 1;2;:::;n (20)
where as usual t
n+1
= 1. Given t
i
and s
i
, the next robot is
located at t
i+1
= t
i
+s
i
+2d and occupies the interval F
i+1
=
[t
i
+ s
i
+d;t
i
+ s
i
+ 3d].
77
No matter how the robots are positioned, the total length
of the curve not occupied by robots is 1  2dn. In addition,
in saturated robot conﬁgurations, all slacks s
i
are too small
to ﬁt another robot between the robots at t
i
and t
i+1
; that is,
s
i
2[0;2d]. Hence, we have the following values for the total
slack s and the saturating distance d:
s = 1  2dn (21)
d = 2d (22)
Using the same reasoning as in the point robot case, the set
of possible slack points for ﬁnite-sized robot conﬁgurations
consists of the slack simplex Equation (9) with s deﬁned
in Equation (21), and the set of all points corresponding to
saturated conﬁgurations forms the hypercube Equation (12)
with d deﬁned in Equation (22). Repeating the analysis
developed for point robots, we ﬁnd that the formula for p
sat
is given by Equation (19) with the newly deﬁned values of
s and d.
Finally, we comment brieﬂy about the analogous results
for open curves. The reduction in section III from open to
closed curves, causes g to lengthen by 2d, and the new slack
becomes
s= 1  2d(n  1) (23)
Also, the number of robots gets incremented during the
reduction, giving us
p
sat
= 1 
K
å
k=1
( 1)
k 1

n+ 1
k

1 
kd
s

n
(24)
where K :=b
s
d
c uses the slack of Equation (23).
VI. STATISTICS OF ROBOT POSITIONS AND SLACKS
The problem of computing the statistics of the robot
positions t
i
and the slacks s
i
can be approached using results
from order statistics [21]. The unordered points t
0
i
, which
were picked uniformly randomly on the unit intervalI , are
called the parent variables; the i
th
ordered point t
i
is called
the i
th
order statistic of the parent. An approach based on
order statistics not only conﬁrms Equation (19) [21, pp.133-
135] but also yields the pdf’s of t
i
and s
i
. To simplify
notation, we deﬁne the indicator function 1
X
: X!f0;1g of
an arbitrary set X to be 1
X
(x) := 1 iff x2 X, and 1
X
(x) := 0
otherwise. We also use f to denote a pdf, which may be
either joint or marginal.
A. Statistics of Point Robots
We begin with the case of n point robots. From the
problem statement, we have that the joint pdf of the parents
f(t
0
1
;t
0
2
;:::;t
0
n
) is uniform over its domain, which is the event
simplex W. Since from Equation (1),jWj= 1=(n  1)!, we
need
f(t
0
1
;t
0
2
;:::;t
0
n
)=(n  1)!1
W
(25)
to ensure that f(t
0
1
;t
0
2
;:::;t
0
n
) has unit measure over W and
thus is a pdf.
Since the order statistics t
i
are just a permutation of their
parents, their joint pdf f(t
1
;t
2
;:::;t
n
) is identical to that of
their parents. Note that t
1
is ﬁxed and thus has a degenerate
marginal pdf, and we omit it from further consideration. We
can obtain the pdf of other order statistic t
i
: i= 2;3;:::;n, by
repeatedly marginalizing over the remaining n  2 statistics.
We do so in two steps. In the ﬁrst step, notice that the order
statitics t
j
: j= i+ 1;i+ 2;:::;n to the right of t
i
each need
to be integrated over the interval R
j
=[t
j 1
;1]. This leads
us to a marginal density of the form f(t
2
;:::;t
i
), consisting
only of t
i
and the statistics to its left. Next, we marginalize
away the statistics t
k
: k= 2;:::;i 1 to the left of the desired
one by integrating each of them over the intervals L
k
=[0;t
i
].
This gives the result
f(t
i
)=
Z
L
k
Z
R
j
f dt
n
:::dt
i+1
dt
i 1
:::dt
2
=

n
i

(1 t
i
)
n i
t
i 1
i
(26)
where we wrote
Z
L
k
for
Z
t
1
2L
1
Z
t
2
2L
2
:::
Z
t
i 1
2L
i 1
;
Z
R
j
for
Z
t
i+1
2R
i+1
Z
t
i+2
2R
i+2
:::
Z
t
n
2R
n
;
and f for the joint density of the order statistics.
Deﬁne the Beta density [22, pp.42-43] Beta(tja;b) by
Beta(tja;b) :=
1
B(a;b)
t
a 1
(1 t)
b 1
1
I
(27)
This density has mean and variance given by
E[Beta(tja;b)]=
a
a+ b
Var[Beta(tja;b)]=
ab
(a+ b+ 1)(a+ b)
2
Then it is easy to see that each order statistic is a Beta variate
of the form
f(t
i
)= Beta(t
i
ji;n  i+ 1) (28)
with mean and variance given by
E[t
i
]=
i  1
n
(29)
Var[t
i
]=
(i  1)(n  i+ 1)
n
2
(n+ 1)
(30)
Intuitively, Equation (28) indicates that t
i
is the (i  1)
st
variable from among the n  1 picked on I . The n  1
order statistics t
2
through t
n
divide I into n subintervals.
On average, these subintervals have equal length, placing
the expected location of t
i
at
i 1
n
.
We next compute the pdf’s of the slacks. Note that any
particular slack, say the last slack s
n
, can be determined as a
function of the remaining ones, as s
n
= 1 å
n 1
i=1
s
i
. To deﬁne
the joint pdf of the slacks, keep this slack apart, and deﬁne
the domain
D :=f(s
1
;s
2
;:::;s
n 1
)g : 0 s
i
 1;0
n 1
å
i=1
s
i
 1 (31)
78
This domain is the interior of an(n 1) dimensional simplex
embedded in R
n 1
and is easily seen to have the (n  1)-
dimensional volumejDj=
1
(n 1)!
by a nested integral iden-
tical to Equation (1), leading to the joint pdf
f(s
1
;s
2
;:::;s
n 1
)=(n  1)!1
D
(32)
Unlike the order statistics which need t
i
 t
i+1
, the slacks
have no such restriction. Since any reordering of slacks
makes no difference to Equation (32), every slack has the
same marginal pdf by symmetry. This includes the slack s
n
that was omitted from the joint pdf, for we could have set up
Equation (25) by setting apart another slack, say s
n 1
instead.
Thus we need to determine only one marginal pdf, say f(s
1
).
To do so, we follow a marginalization process similar to that
for the order statistics. Note that every slack s
j
: j= 2;:::;n 
1 to the right of s
1
lies on the interval R
j
=[0;1 å
j 1
i=1
s
j
].
Integrating the joint slack pdf in Equation (32) over these
intervals leads us to
f(s
i
)= Beta(s
i
j1;n  1);i= 1;2;:::;n (33)
We add a note of caution here that will become relevant
to the case of ﬁnite-sized robots. Observe that since t
i
=
å
i 1
j=1
s
j
, it may be tempting to compute the marginal density
f(t
i
) by performing i  1 nested convolutions of the slack
pdf’s. However, it can be seen while computing the marginal
pdf’s that slacks are mutually dependent, so that for example
f(s
1
;s
2
)6= f(s
1
) f(s
2
). Deriving f(s
i
) by repeated integration
sidesteps this issue of dependency.
Finally, all results from Equation (25) through Equa-
tion (33) extend trivially to open curves as follows. Since
the reduction process from open to closed curves increments
the number of robots, the joint pdf for n robots on an open
curve is
f(t
1
;t
2
;:::;t
n
)= n!1
W
(34)
where W is now an n-dimensional simplex embedded inR
n
.
The statistic t
i
for a closed curve resembles that of t
i+1
for
closed curves, giving us
f(t
i
)= Beta(t
i
ji;n  i+ 1); i= 1;2;:::;n (35)
f(s
i
)= Beta(t
i
j1;n); i= 1;2;3;:::;n+ 1 (36)
B. Extension to Finite-Sized Robots
In the case of ﬁnite-sized robots, the slacks s
i
are the order
statistics of points uniformly randomly chosen on the interval
[0;s= 1  2dn]. Had s been unity, the pdf of each s
i
would
have been given by the Beta pdf in Equation (33). If we
divide each s
i
by s, the scaled random variables s
i
=s will be
distributed overI according to this Beta pdf. From this, we
derive the following expressions for the pdf of s
i
:
f(s
i
)= s Beta(tj1;n  1) (37)
However, determining the pdf of t
i
does not readily admit
an analytic form. Having set t
1
= 0, from Equation (20) we
know that
t
2
  2d = s
1
(38)
Consequently, t
2
  2d will have the same pdf as s
1
, or
f(t
2
)= s Beta(tj1;n  1)+ 2d (39)
The case of t
3
is different. From Equation (20),
t
3
  4d = s
1
+ s
2
(40)
Determining f(t
3
) by convoution fails due to the fact that
slacks are dependent, as the note of caution makes clear in
section VI-A. Unlike with point robots, we do not have a
general expression for the joint pdf of ﬁnite-sized ones. Thus,
the marginalization procedure of section VI-A fails, and we
have no analytic expressions for the pdf of t
3
through t
n
.
VII. SIMULATIONS
We implemented Monte Carlo simulations in which vari-
ous numbers n of either point robots or ﬁnite-sized robots are
stochastically allocated to the boundary of a unit circle. In
the point robot simulations, n points were chosen uniformly
randomly fromI and sorted in order. The slacks were com-
puted, and those robot conﬁgurations that met the saturation
criterion were counted as favorable events. The ﬁnite-sized
robots implemented the following algorithm:
Algorithm SLACK-ATTACH(n;d)
1) Set t
1
 0.
2) Pick an array arr[1::n  1] of uniformly randomly
distributed points on the interval [0;s].
3) Sort arr in increasing order.
4) Compute the individual slacks as s
1
 arr[1], s
i
 
arr[i+ 1]  arr[i] for 2 i n  1, and s
n
 s 
å
1in 1
s
i
.
5) Compute t
i+1
= t
i
+ s
i
+ 2d for 1 i n  1.
Robot conﬁgurations that satisﬁed s
i
= d 2d were counted
as favorable events.
Figure 2 compares three-dimensional plots of theoretical
and Monte Carlo-averaged (over 20000 trials) p
sat
varying
with n and d for point and ﬁnite-sized robots. For both robot
types, the close match between the theoretical and Monte
Carlo-averaged plots validate our formula for p
sat
. Table I
and Table II show a quantitative comparison of p
sat
computed
from Equation (19) and p
sat
averaged over 20000 Monte
Carlo trials for different combinations of n and d. Table III
and Table IV display the corresponding results for ﬁnite-
sized robots. For both robot types, the theoretical predictions
of p
sat
closely match the Monte Carlo simulation averages.
We also plotted the frequency of 5000 samples of a
particular robot position and a particular slack from Monte
Carlo trials with n= 5 point robots. As Figure 3 shows, both
frequency plots can be ﬁt to the Beta densities predicted by
Equation (28) and Equation (37).
79
0
5
10
15
20
0
0.2
0.4
0.6
0.8
0
0.5
1
n d
Theoretical psat
(a)	  
0
5
10
15
20
0
0.2
0.4
0.6
0.8
0
0.5
1
n d
Monte Carlo psat
3
4
5
6
7
8
9
10
0
0.1
0.2
0.3
0.4
0
0.2
0.4
0.6
0.8
1
n
d
Theoretical psat
(c)	  
(b)	  
3
4
5
6
7
8
9
10
0
0.1
0.2
0.3
0.4
0
0.2
0.4
0.6
0.8
1
n d
Monte Carlo psat
(d)	  
Fig. 2. Plots of theoretical (left column) and Monte Carlo-generated (right
column) p
sat
(n;d) values for point (upper row) and ﬁnite-sized (lower row)
robots.
TABLE I
THEORETICAL p
sat
VS. p
sat
MONTE CARLO-AVERAGED WITH n= 16
POINT ROBOTS
d Theoretical p
sat
Monte Carlo p
sat
0.05 0.0000 0.0000
0.10 0.0001 0.0001
0.20 0.4929 0.4925
0.25 0.7898 0.7913
0.33 0.9635 0.9651
0.5 0.9995 0.9997
TABLE II
THEORETICAL p
sat
VS. MONTE-CARLO AVERAGED p
sat
TRIALS WITH
POINT ROBOTS, WITH d= 0:5
n Theoretical p
sat
Monte Carlo p
sat
3 0.2500 0.2467
4 0.5000 0.5029
5 0.6875 0.6885
6 0.8125 0.8124
7 0.8906 0.8899
8 0.9375 0.9383
TABLE III
THEORETICAL p
sat
VS. MONTE CARLO-AVERAGED p
sat
WITH n= 4
FINITE-SIZED ROBOTS
d Theoretical p
sat
Monte Carlo p
sat
0.05 0.0000 0.0000
0.06 0.0029 0.0025
0.08 0.5000 0.5060
0.09 0.8519 0.8532
0.1 1.0000 1.0000
TABLE IV
THEORETICAL p
sat
VS. MONTE CARLO-AVERAGED p
sat
TRIALS WITH
FINITE-SIZED ROBOTS, WITH d = d=2= 0:05
n Theoretical p
sat
Monte Carlo p
sat
5 0.000 0.000
6 0.0254 0.0259
7 0.4142 0.4221
8 0.9375 0.9401
VIII. CONCLUSIONS AND FUTURE WORK
We have demonstrated approaches to the statistical analy-
sis of quantities that are associated with stochastic coverage
of a simple boundary by a set of uniformly randomly
0 0.2 0.4 0.6 0.8 1
0
100
200
300
400
500
600
700
800
900
t
Frequency
 
 
Histogram of Monte Carlo samples
Beta(t | 1,4) density
(a) Frequency plot of t
2
0 0.2 0.4 0.6 0.8 1
0
100
200
300
400
500
600
700
800
900
t
Frequency
 
 
Histogram of Monte Carlo samples
Beta(t | 1,4) density
(b) Frequency plot of s
2
Fig. 3. Frequency plots of 5000 samples of t
2
and s
2
= t
3
  t
2
from
Monte Carlo trials for point robots Both plots are ﬁt to a Beta(tj1;4) density
function.
distributed robots. We developed a geometric interpretation
of the probability that a given robot conﬁguration is saturated
and derived this probability using the Inclusion-Exclusion
Principle. We also used results from order statistics to deter-
mine the probability distributions of the robot positions along
the boundary and the distances between adjacent robots.
We validated our derived formulas for these probability
distributions and the saturation probability using Monte
Carlo simulations of a large number of scenarios. The work
presented here can be extended in several directions:
a) Stochastic coverage by asynchronously attaching
robots: Many experimental scenarios will involve asyn-
chronous attachment of robots to a boundary. In these cases,
each attaching robot searches for an available attachment
location on the boundary and picks one at random. One
possible algorithm for simulating this process with ﬁnite-
sized robots is as follows:
Algorithm ASYNC-ATTACH(n;d)
1) Set t
0
i
 0
2) For each i : 2 i n do
a) Find the list of intervals in which the center t
0
i
of
the next robot can be placed.
b) Choose one such interval at random and one point
p at random from this interval.
80
c) Set t
0
i
 p.
3) Sort t
0
i
in increasing order to get t
i
.
The parent variables t
0
i
assigned by ASYNC-ATTACH are
not i.i.d, since each t
0
i
is a function of t
0
1
;t
0
2
;:::;t
0
i 1
. This
makes the determination of their order statistics a much more
challenging task [21, Ch.5] for which a complete analytical
solution may be impossible. Hence, an important future
step would be to extract useful qualitative information about
the distributions generated by ASYNC-ATTACH and other
asynchronous attachment algorithms. Also pertinent would
be to devise asynchronous attachment algorithms that lend
themselves to tractable analysis.
b) Probability distributions induced by saturation: As
an extension of the material in Section VI, we plan to derive
the pdf’s of t
i
and s
i
given that the robot conﬁguration is
saturated.
c) Comparison with deterministic algorithms: Multi-
robot planar boundary coverage is anNP-Hard problem [23].
Deterministic algorithms for this problem generally employ
heuristics to reduce running time. Our approach is essentially
a randomized algorithm to address the same intractability.
Deterministic algorithms provide more guarantees on run-
time and correctness than randomized algorithms, while the
latter may be simpler to implement [24]. Our future work
will investigate scenarios that favor one approach over the
other; for example, we would wish to determine the better
coverage approach when collisions with obstacles or between
robots need to be avoided.
d) Applications to multi-robot transport problems:
We are currently investigating the problem of developing
strategies for multi-robot collective transport that are robust
to payload type, environment layout, and transport team size,
much like group retrieval strategies employed by certain
species of ants [25]. We will consider scenarios in which
robots stochastically allocate themselves around a payload
and then proceed to transport the payload as a team. We will
apply our statistical analysis results to characterize dynamical
properties of the robot-load system during transport given an
initial stochastic allocation. For instance, we can investigate
the probability that robots arranged in a random conﬁguration
around a certain payload will be able to successfully lift it
off the ground.
ACKNOWLEDGMENTS
We are grateful to Dr. Theodore P. Pavlic and Sean Wilson
for useful discussions on the material presented in this paper.
REFERENCES
[1] V . Kumar and N. Michael, “Opportunities and challenges with au-
tonomous micro aerial vehicles,” Int’l. Journal of Robotics Research,
vol. 31, no. 11, pp. 1279–1291, 2012.
[2] K. Y . Ma, P. Chirarattananon, S. B. Fuller, and R. J. Wood, “Controlled
ﬂight of a biologically inspired, insect-scale robot,” Science, vol. 340,
no. 6132, pp. 603–607, 2013.
[3] E. Diller and M. Sitti, “Micro-scale mobile robotics,” Foundations and
Trends in Robotics, vol. 2, pp. 143–259, 2013.
[4] S. Tong, E. Fine, Y . Lin, T. J. Cradick, and G. Bao, “Nanomedicine:
Tiny particles and machines give huge gains,” Annals of Biomedical
Engineering, pp. 1–17, 2013.
[5] C. Mavroidis and A. Ferreira, “Nanorobotics: Past, present, and
future,” in Nanorobotics, C. Mavroidis and A. Ferreira, Eds. Springer
New York, 2013, pp. 3–27.
[6] S. Hauert, S. Berman, R. Nagpal, and S. N. Bhatia, “A computational
framework for identifying design guidelines to increase the penetration
of targeted nanoparticles into tumors,” Nano Today, vol. 8, no. 6, pp.
566–576, 2013.
[7] S. Wang and E. E. Dormidontova, “Selectivity of ligand-receptor
interactions between nanoparticle and cell surfaces,” Phys. Rev. Lett.,
vol. 109, p. 238102, Dec 2012.
[8] L. Matthey, S. Berman, and V . Kumar, “Stochastic strategies for a
swarm robotic assembly system,” in Proceedings of the 2009 IEEE
International Conference on Robotics and Automation, Kobe, Japan,
May 12–17, 2009, pp. 1953–1958.
[9] W. C. Evans, G. Mermoud, and A. Martinoli, “Comparing and
modeling distributed control strategies for miniature self-assembling
robots,” in Int’l. Conf. Robotics and Automation (ICRA), 2010, pp.
1438–1445.
[10] E. Klavins, S. Burden, and N. Napp, “Optimal rules for programmed
stochastic self-assembly,” in Proceedings of Robotics: Science and
Systems, Philadelphia, PA, USA, August 2006.
[11] N. Napp, S. Burden, and E. Klavins, “Setpoint regulation for stochas-
tically interacting robots,” in Proceedings of Robotics: Science and
Systems, Seattle, WA, USA, June 2009.
[12] N. Correll, “Parameter estimation and optimal control of swarm-
robotic systems: A case study in distributed task allocation,” in Int’l.
Conf. Robotics and Automation (ICRA), 2008, pp. 3302–3307.
[13] W. Liu and A. F. T. Winﬁeld, “Modeling and optimization of adaptive
foraging in swarm robotic systems,” Int’l. J. of Robotics Research,
vol. 29, no. 14, pp. 1743–1760, 2010.
[14] S. Berman,
´
A. Hal´ asz, M. A. Hsieh, and V . Kumar, “Optimized
stochastic policies for task allocation in swarms of robots,” IEEE
Trans. Robot., vol. 25, no. 4, pp. 927–937, August 2009.
[15] T. W. Mather and M. A. Hsieh., “Distributed robot ensemble control
for deployment to multiple sites.” In Proceedings of Robotics: Science
and Systems, LosAngeles, CA, USA, 2011.
[16] A. Martinoli, K. Easton, and W. Agassounon, “Modeling swarm
robotic systems: A case study in collaborative distributed manipula-
tion,” Int’l. Journal of Robotics Research, vol. 23, pp. 415–436, 2004.
[17] T. H. Labella, M. Dorigo, and J.-L. Deneubourg, “Division of labor
in a group of robots inspired by ants’ foraging behavior,” ACM Trans.
Auton. Adapt. Syst., vol. 1, no. 1, pp. 4–25, 2006.
[18] N. Correll and A. Martinoli, “Modeling and optimization of a swarm-
intelligent inspection system,” in Distributed Autonomous Robotic
Systems 6. Springer, 2007, pp. 369–378.
[19] T. P. Pavlic, S. Wilson, G. P. Kumar, and S. Berman, “An enzyme-
inspired approach to stochastic allocation of robotic swarms around
boundaries,” in Int’l. Symposium on Robotics Research (ISRR), Sin-
gapore, 2013.
[20] J. van Lint and R. Wilson, A Course in Combinatorics. New York,
NY , USA: Cambridge University Press, 2001.
[21] H. David and H. Nagaraja, Order Statistics. Hoboken,NJ, USA: John
Wiley and Sons, 2003.
[22] K. Murphy, Machine Learning: A Probabilistic Perspective. Cam-
bridge,MA,USA: The MIT Press, 2012.
[23] K. Williams and J. Burdick, “Multi-robot boundary coverage with plan
revision,” in Robotics and Automation, 2006. ICRA 2006. Proceedings
2006 IEEE International Conference on, 2006, pp. 1716–1723.
[24] R. Motwani and P. Raghavan, Randomized Algorithms. New York,
NY , USA: Cambridge University Press, 1995.
[25] G. P. Kumar, A. Bufﬁn, T. P. Pavlic, S. C. Pratt, and S. M. Berman,
“A stochastic hybrid system model of collective transport in the desert
ant Aphaenogaster cockerelli,” in Proc. 16th Int’l. Conf. on Hybrid
Systems: Computation and Control, ser. HSCC’13, 2013, pp. 119–124.
81
