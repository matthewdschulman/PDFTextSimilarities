Efﬁcient Robot-Sensor Network Distributed SEIF Range-Only SLAM
A. Torres-Gonz´ alez, J. R. Martinez-de Dios and A. Ollero
Abstract— This paper is motivated by schemes of robot-
sensor network cooperation where sensor nodes (beacons)
are used as landmarks for Range-Only (RO) Simultaneous
Localization and Mapping (SLAM). Most existing RO-SLAM
techniques consider beacons as passive devices disregarding
the sensing, computing and communication capabilities they
are actually endowed with. This paper proposes a Range-Only
scheme based on Sparse Extended Information Filters (SEIF)
that efﬁciently exploits their capabilities. The robot computes
the SLAM prediction stage and distributes the update stage
among beacons within its sensing area. The proposed scheme
naturally integrates robot-beacon and inter-beacon measure-
ments, signiﬁcantly improving map and also robot estimations.
Our scheme inherits from SEIF its efﬁciency and scalability and
further reduces robot computational burden by exploiting the
beacons computing capability. As a result, it has lower error
and lower computer requirements than traditional methods.
This paper presents the scheme, evaluates and compares its
performance in simulations and real experiments.
I. INTRODUCTION
We are interested in Range Only (RO) SLAM, which
integrates range measurements between the robot and a set
of static landmarks. RO-SLAM can be very useful in a
wide range of applications such as advanced monitoring or
search and rescue, in which robots cooperate with sensor
nodes endowed with sensing, computing and communication
capabilities. This interest has originated the development of a
growing number of RO-SLAM methods that use sensor net-
works as landmarks [1], [2], [3]. However, the great majority
of them consider beacons as passive devices disregarding
many of their capabilities.
This paper presents an online SLAM scheme based on
Sparse Extended Information Filters (SEIF) that efﬁciently
exploits beacon capabilities by distributing measurement
gathering and SLAM update computation among the beacons
surrounding the robot. The robot performs SEIF prediction
stage and broadcasts the predicted state. Each beacon receiv-
ing the message takes range measurements to each of the
beacons within its sensing area and to the robot, computes
the SEIF update integrating these measurements and sends
the result back to the robot. The robot reconstructs the full
updated state by adding the contributions it receives.
The proposed scheme integrates in the SEIF SLAM all
direct robot-beacon and also inter-beacon measurements that
involve at least one beacon within the robot sensing area,
This work was supported by the EC-SAFEMOBIL (European Commis-
sion ICT-2011-288082), CLEAR (DPI2011-28937-C02-01) and the Minis-
terio de Educaci´ on y Deportes FPU Program. J. R. Martinez-de Dios thank
the partial support from PLANET (European Commission FP7-257649-ICT-
2009-5). The authors are with Robotics, Vision and Control Research Group,
University of Seville, 41092 Seville, Spain arturotorres@us.es,
jdedios@us.es, aollero@us.es
naturally avoiding repeated measurements. Integrating inter-
beacon measurements reduces the map estimation uncer-
tainty and indirectly also improves the robot localization
accuracy. Also, the method is based on SEIF beneﬁting
from its efﬁciency and scalability. Moreover, it exploits
the computing capability of beacons reducing the robot
computational burden and enabling its implementation in
robots with lower computer capabilities. This paper presents
the scheme and evaluates and compares its performance with
traditional methods based on EKF and SEIF in simulations
and experiments performed in the CONET Integrated Testbed
[4].
The paper is organized as follows. Section I-A summarizes
the main existing RO-SLAM methods. Section II presents
the proposed method and motivates it with potential appli-
cations. Section III brieﬂy summarizes SEIF SLAM as an
introduction to our method, which is detailed in Section IV.
Its evaluation and comparison with other existing methods
is in Section V. Section VI shows its performance in real
experiments. Conclusions are in Section VII.
A. Related work
Various SLAM ﬁlters have been applied to RO-SLAM.
EKF and FastSLAM are maybe the most widely used meth-
ods. EKF SLAM [5], [6] is optimal in presence of Gaussian
noise and obtains good results in most implementations.
FastSLAM [7] factorizes the state vector dividing it in the
vehicle pose estimation and the map estimation. It is more
ﬂexible than EKF due to the use of a Particle Filter as the
core of the algorithm, which allows having different noise
distributions apart from only Gaussian as in the case of
EKF. In FastSLAM each particle of the ﬁlter represents an
hypothesis of the robot pose and the map.
In order to improve efﬁciency and scalability, different
strategies have been developed in the past years. Many of
them use the canonical form of the Gaussian distribution
based on the information state vector and the information
matrix. It has been demonstrated that many of the off-
diagonal elements of the information matrix are relatively
close to zero [8], [9]. Thin Junction Tree Filters [10] use an
special data structure –called junction tree– to represent the
information matrix. Work [10] proposes approximations to
keep these junction tree simple –thin– regardless of the map
size. Treemap Filters [11] hierarchically divide the map into
local regions. The Sparse Extended Information Filter (SEIF)
by Thrun et al. [8], [12] improves efﬁciency and scalability
making approximations that maintain the information matrix
sparse. SEIF for feature-based SLAM has been researched
in some works. In [13] a modiﬁcation for ensuring the
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 1319
consistency of the global map estimate was proposed. SEIFs
were used in multi-robot systems in [14]. We could not ﬁnd
any paper that applied SEIF to RO-SLAM.
Range measurements involve partial observability, i.e. sev-
eral measurements are necessary to disambiguate a location.
In RO-SLAM partial observability is addressed by two main
approaches: delayed and undelayed mapping initialization.
Undelayed initialization directly uses the measurements in
the SLAM ﬁlter from the very beginning using multi-
hypothesis estimation tools such as Sum of Gaussians [15],
[7]. Delayed initialization employs auxiliaty tools to compute
the initial estimation of landmarks. Examples of these tools
are Particle Filters [6], Probability Grids [5], [16] and trilat-
eration methods [2]. Trilateration methods, although simple
and efﬁcient, are very sensitive to measurement noise. It was
the ﬁrst approach but was soon overtaken since the SLAM
performance is very sensitive to the accuracy in beacon ini-
tialization. Probability Grids provide better initialization but
their accuracy depends on the size and resolution of the grid.
Particle Filters (PFs) are the most widely applied method.
They provide better accuracy and various mechanisms have
been developed to reduce their computational burden.
All the aforementioned RO-SLAM methods use only
robot-beacon measurements. Integrating range measurements
between beacons is useful to improve the estimations of
the map, and also, indirectly, of the robot. However, despite
its potential advantages, very few methods exploiting inter-
beacon measurements have been proposed. The general idea
of using inter-beacon was given in [5], where different ways
for incorporating inter-beacon measurements were proposed,
mainly by using virtual nodes and adopting off-line map
improvement using multidimensional scaling. These off-line
SLAM solutions are not suitable for many applications,
which require an on-line map and robot locations.
In most proposed methods the RO-SLAM algorithm is
computed centralized by the robot. To the best of our
knowledge no methods where beacons actively participate
in the computation of the SLAM ﬁlter have been reported.
II. GENERAL DESCRIPTION
Our work is motivated by schemes of cooperation between
robots and sensor networks. Consider a GPS-denied scenario
where a large number N of sensor nodes have been deployed
at unknown locations. For instance, they have been randomly
thrown for on-line monitoring a disaster or accident in an
industry or urban area, where preexisting infrastructure can
be damaged. The basic role of each sensor node is to
periodically take measurements, e.g. toxic gas concentration,
ﬁlter and compute statistics of the measurements and transmit
them to a Base Station. For these tasks the nodes must
be endowed with sensing, communication and computing
capabilities. In fact, this is the case of most COTS sensor
nodes [17]. Assume that each node is equipped with a range
sensor and can measure the distance to the robot or to other
nodes within its sensing area. Again, this is not a constraint.
For instance, most COTS nodes can measure received signal
strength (RSS) from incoming messages and can measure the
range to the emitting node [17]. From now on, in the paper,
the terms beacons and nodes will be used synonymously.
The application is to on-line monitor the status of the
event. Having the precise location of the robot and each
node is necessary for accurate monitoring. Besides, it en-
ables advanced robot-sensor network cooperation strategies
of interest in these applications such as using the robot for
sensor node deployment [18], replacement [19] or collecting
data from the sensors [20], among others. GPS cannot be
used. A RO-SLAM method using sensor nodes (beacons) as
landmarks can be very useful to on-line estimate nodes and
robot locations. In this problem RO-SLAM can have advan-
tages w.r.t. visual SLAM since suitable lighting conditions
are not always present. Besides, RO-SLAM using beacons
as landmarks naturally solves the data association problem.
This paper presents a distributed SEIF SLAM scheme that
efﬁciently exploits beacons sensing, computing and com-
munications capabilities. In contrast to traditional methods,
which use only robot-beacon measurements, the proposed
scheme naturally integrates also inter-beacon measurements
signiﬁcantly improving map and robot localization estima-
tions. It is based on SEIF and scales well with the number
of beacons. In contrast, EKF SLAM scales with O(N
2
) [21].
Also, most existing SLAM methods are executed centralized
in the robot whereas our method distributes the SEIF SLAM
update stage among beacons, reducing the robot computa-
tional burden.
The operation of our method is as follows. The SEIF
SLAM prediction stage is executed in the robot. The robot
keeps LNB, the list of beacons that are currently within
the robot sensing area, SA
r
. Then, the robot broadcasts an
U pdateReq message that includes LNB and the predicted
state. A beacon b
i
receiving the message, extracts LNB. If
b
i
is present in LNB, it takes range measurements to the
robot (z
i;r
) and to each of the beacons within its sensing area
SA
i
. This measurement set is designed as MS
i
=fz
i;r
;z
i; j
:
8b
j
2 SA
i
g, where z
i; j
is the range measurement to beacon b
j
.
Then, with MS
i
beacon b
i
computes the SEIF SLAM update
and sends back the result to the robot in an U pdateResp
message. Finally, since the SEIF SLAM update stage is
additive, the robot reconstructs the updated state by adding
the contributions it received. To prevent overlapping of
response messages the beacons can respond one after the
other using their order in LNB.
Figure 1 illustrates its operation. In a traditional approach,
see Fig. 1-top, the robot takes measurements to the beacons
within SA
r
–in grey–fz
r;1
;z
r;5
;z
r;6
g. In our scheme, see Fig.
1-bottom, each beacon b
i
in LNB=fb
1
;b
5
;b
6
g takes MS
i
,
e.g. b
5
takes MS
5
=fz
5;r
;z
5;1
;z
5;6
g and integrates them in
the SEIF update. This scheme is equivalent to performing
traditional SLAM with a ﬂeet of virtual robots, one at each
beacon within the sensing area of the real robot.
The proposed scheme naturally integrates all direct robot-
beacon and inter-beacon measurements that involve at least
one beacon within SA
r
. It also naturally avoids repeated
measurements. It takes one measurement for all these dis-
tances except for inter-beacon distances when both beacons
1320
Fig. 1. Examples of a traditional RO-SLAM (top) and the proposed scheme
(bottom). Grey circles represent sensing areas the robot (top) and of beacons
b
1
, b
5
and b
6
(bottom).
are within SA
r
. In this case two different measurements are
taken. As will be shown in Section V, the method is also
robust to message loss since errors in messages of one beacon
only affect the contribution of that beacon.
III. RANGE ONLY SEIF SLAM IN A NUTSHELL
This section brieﬂy summarizes the SEIF SLAM algorithm
as an introduction to the proposed method, which detailed
in Section IV. The state vector~ x is comprised of the robot
position and orientation (x
r
) and the location of all the N
beacons in the map (x
1
;x
2
;:::;x
N
). The estimation of~ x is its
mean m. For notation simplicity, time subindex t has been
omitted. For brevity, detailed descriptions of equations and
algorithms have been obviated. They can be found in [21].
SEIFs are based on Extended Information Filters (EIFs).
Duals to EKFs, EIFs represent the state vector by its informa-
tion vector x =S
 1
m and the information matrix W=S
 1
.
The geometry of W is in (1). W is symmetric, positive-
semideﬁnite and each off-diagonal entry –called link [8]–
represents the relation between two elements in~ x.
W=
0
B
B
B
@
W
x
r
;x
r
W
x
r
;x
1
 W
x
r
;x
N
W
x
1
;x
r
W
x
1
;x
1
 W
x
1
;x
N
.
.
.
.
.
.
.
.
.
.
.
.
W
x
N
;x
r
W
x
N
;x
1
 W
x
N
;x
N
1
C
C
C
A
(1)
Integrating measurement z
r; j
in the EIF SLAM update
stage only affects the on-diagonal elementsW
x
r
;x
r
andW
x
j
;x
j
and the links between the robot and b
j
, i.e. W
x
r
;x
j
and
its symmetric W
x
j
;x
r
. Measurement updates increment the
information of involved elements increasing the value of
links in W –strengthen links. On the other hand, in the
prediction stage noise in robot motion originates a loss of
information in the relative location of the beacons, which
decreases the value of the involved links –weakens links.
Thus, at any time in the EIF SLAM operation some of
the off-diagonal elements of W are zero meaning lack of
information between the involved elements; some of them
have high values –strong links– meaning high information
and a number of them have values close to zero –weak links.
Weak links have much lower impact on the EIF estimation
than strong links but both involve similar computational
burden. SEIF simpliﬁes the structure of W by deleting weak
links to save burden without signiﬁcantly perturbing the EIF
estimation.
SEIF operates as EIF but maintains a sparse representation
of W by keeping the number of active beacons bounded
by a threshold. At each step the discovered beacons are
classiﬁed in active and passive. Active beacons are those
that have active –non-zero– links. Every time the number of
active beacons is above the bound, a sparsiﬁcation step that
deactivates the beacons with the weakest links is performed.
EIF measurement update modiﬁes only the involved el-
ements in W. Factorizing W allows efﬁcient update stages
regardless of the map size –numbers of beacons. SEIF
inherits this efﬁciency. Moreover, by bounding the number of
active beacons, SEIF signiﬁcantly reduces the computational
burden of the prediction stage. For linearizing the prediction
and observation models it is required to recover the state
estimate m from the predicted
¯
W and
¯
x . Recovering the
full state vector involves inverting a large matrix –with N
beacons it is O((2N+ 3)
3
). Instead, SEIF recovers only
the useful part of ~ x –robot and active beacons– using an
efﬁcient algorithm [21]. Thus, SEIF signiﬁcantly improves
computational burden and scalability to the map size w.r.t.
EIF. Enforcing sparseness in W involves an approximation
error in the estimations obtained by SEIF. Work [21] suggests
using sparsiﬁcation bounds in the range [4  10] to balance
between accuracy degradation and burden reductions.
SEIF has been traditionally applied in visual and laser-
based SLAM. The observation model adopted in our RO-
SLAM SEIF for range measurement z
r; j
taken by the robot
to beacon b
j
is as follows:
h
r; j
(m)=
q
d
2
x
+d
2
y
; (2)
where d
x
=m
x
 m
j
x
and d
y
=m
y
 m
j
y
. The couples (m
x
;m
y
)
and (m
j
x
;m
j
y
) are respectively the estimated positions of the
robot and b
j
. h
r; j
is nonlinear. Its Jacobian is:
H
r; j
=
¶h
r; j
¶m
=
h
d
x
h
r; j
d
y
h
r; j
0 
 d
x
h
r; j
 d
y
h
r; j

i
(3)
Range measurements have partial observability. The SEIF
should be combined with a mechanism for beacon initializa-
tion. When the robot takes the ﬁrst measurement from beacon
b
j
, the initialization of b
j
is started and we say that beacon
b
j
is at the ”Initialization stage”. A number of measurements
of b
j
taken from different locations are required to compute
1321
an initial estimation of the location of the beacon. When the
initial estimation is computed, it is incorporated in the state
vector. At that moment we say that beacon b
j
is at the ”SEIF
stage”.
IV. ROBOT-SENSOR NETWORK DISTRIBUTED SEIF
SLAM
The proposed method has two main differences from
existing approaches: a) it distributes the SEIF computation
among beacons; and b) it integrates robot-beacon and inter-
beacon measurements. h
IB
i; j
, the model used for inter-beacon
measurement z
i; j
, is the same as that used in (2) but taking
d
x
=m
i
x
 m
j
x
and d
y
=m
i
y
 m
j
y
. The Jacobian of h
IB
i; j
is:
H
IB
i; j
=
h
0 0 0 
d
x
h
i; j
d
y
h
i; j

 d
x
h
i; j
 d
y
h
i; j

i
(4)
All the terms in H
IB
i; j
are zero except for the entries of the
beacons involved in the measurement.
The operations of the robot and beacons in one prediction-
update cycle are summarized in Algs. 1 and 2. First, the
robot computes the SEIF prediction stage. We assume static
beacons and a robot with non-linear kinematic model. Thus,
its Jacobian should be computed at each time, which requires
recovering m. Our scheme uses the efﬁcient algorithm de-
scribed in [21] for SEIF motion update and state recovery.
This algorithm computes the predicted information vector
¯
x ,
the information matrix
¯
W and also the recovered predicted
estimate m.
Algorithm 1 Summary of operation of the robot
Require: x
t 1
;W
t 1
1: SEIF motion update and state recovery
2: Update LNB and create U pdateReq message
3: Broadcast U pdateReq message
4: Receive U pdateResp messages from beacons
5: Sum the contributions to
¯
x and
¯
W as in (7), (8)
6: SEIF Sparsiﬁcation
7: return x
t
;W
t
Algorithm 2 Summary of the operation of beacon b
i
1: Receive U pdateReq message. Extract LNB
2: if (b
i
is present in LNB) then
3: Take measurements MS
i
4: if (b
i
is at ”SEIF state”) then
5: Compute x
i
and W
i
with MS
i
as in (5) and (6)
6: Sendx
i
andW
i
to robot in an U pdateResp message
7: else
8: Send MS
i
to robot in an U pdateResp message
9: end if
10: else
11: Send to robot a BeaconDiscovery message
12: end if
Next, the robot broadcasts an U pdateReq message that
includes LNB and the predicted estimate m. Transmitting
the whole m is not suitable in cases with large numbers of
beacons: it would require broadcasting larger –or several–
messages, increasing message losses. Besides, the greater
part of m is not of interest for the beacons in LNB. The
approach adopted is to transmit only the elements in m
required for each beacon in LNB. Each beacon b
i
in LNB
takes range measurements to the robot and to the beacons
b
j
2 SA
i
. For integrating them it needsm
i
,m
r
andm
j
8 j2 SA
i
.
Of course, only estimates of beacons b
j
that are at ”SEIF
stage” are available. Let ev
i
be the vector with the estimates
required for beacon b
i
to perform its SEIF update, deﬁned
as ev
i
=

m
r
m
i
m
j

T
.
At the beginning LNB is assumed empty. If a beacon b
i
that received the U pdateReq message does not ﬁnd itself
in LNB, it sends a BeaconDiscovery message to the robot
with the identiﬁers of the beacons that are within SA
i
. The
next U pdateReq message sent by the robot will include
LNB updated with b
i
and the beacon estimate vector ev
i
.
When a beacon in LNB does not participate in a number of
consecutive updates, the robot interprets that it is out of its
sensing area and excludes it from LNB.
After broadcasting the U pdateReq message, the robot
starts a phase in which it receives U pdateResp messages
from beacons. A beacon b
i
that received an U pdateReq
message performs differently depending on whether b
i
is at
the ”Initialization stage” or at the ”SEIF stage”.
1) Beacon at the SEIF stage: In this case b
i
measures the
range to the beacons in its sensing range –its measurement
set is MS
i
– and computes its contribution to the SEIF update
integrating each measurement as follows:
x
i
=
å
k2MS
i
H
T
i;k
R
 1
[z
i;k
  h
i;k
(ev
i
)+ H
i;k
ev
i
]; (5)
W
i
=
å
k2MS
i
H
T
i;k
R
 1
H
i;k
; (6)
where h
i;k
(ev
i
) and H
i;k
stand for the predictions and Ja-
cobians for each measurement in MS
i
either robot-beacon
measurement –it uses observation modes in (2) and (3)– or
inter-beacon measurement –(4). R is the covariance matrix
of the measurement noise.
Then, beacon b
i
transmits the resulting x
i
and W
i
to the
robot in an U pdateResp message. When a timeout expires
the robot reconstructs the updated state (x and W) adding
the predicted
¯
x and
¯
W to the contributions received from
beacons:
x =
¯
x+
å
i
F
T
i
x
i
; (7)
W=
¯
W+
å
i
F
T
i
W
i
F
i
; (8)
where F
i
is the projection matrix that implements operations
that allocate x
i
and W
i
at the correct entries for x and W.
1322
2) Beacon at the Initialization stage: In this case beacon
b
i
creates an U pdateResp message with MS
i
and transmits
it to the robot, which uses MS
i
for the initialization of b
i
.
When the robot ﬁnalizes beacon initialization it incorporates
it in~ x. In this scheme, shown in Alg. 2, the robot centralizes
the initialization of every beacon. We call it Method1.
We have also developed Method2, in which each beacon
computes its own initialization: both SEIF update and beacon
initialization are decentralized. b
i
integrates MS
i
in its own
initialization. When the beacon initialization is ﬁnished, b
i
sends the robot its estimation in an U pdateResp message so
that it incorporates the initialized beacon in~ x.
A number of beacon initialization mechanisms can be used
in the proposed scheme. The selection between Method1
or Method2 depends on the initialization chosen and the
beacons computing capabilities. For instance, with beacons
implemented using Wireless Sensor Network technology
Method2 is suitable in case of using trilateration initialization
but would require Method1 if using PFs. Beacons imple-
mented with devices such as embedded computers or PDAs
could execute Method2 with PFs.
Finally, the robot should check if the updated W satisﬁes
the sparsiﬁcation bound. If not, the active beacons with
stronger links are selected and the weakest are deactivated
as described in [8]. Note that measurements from active and
passive beacons are integrated in the update stage. Integrating
measurements from a passive beacon gives these nodes the
possibility of being selected in the sparsiﬁcation step.
V. SIMULATIONS
This section evaluates the accuracy, computational burden
and robustness of the proposed scheme and compares it
with existing methods. We assume the robot with differential
conﬁguration. Its kinematic model is as follows:
2
4
x
k
y
k
q
k
3
5
=
2
4
x
k 1
+ T
k
V
k
sinq
k 1
y
k 1
+ T
k
V
k
cosq
k 1
q
k 1
+ T
k
a
k
3
5
; (9)
where (x
k
;y
k
;q
k
) is the robot state, V
k
and a
k
are the odom-
etry linear and steering velocities and T
k
is the differential
time between t
k
and t
k 1
. The standard deviation of odometry
for V and a of s
V
= 0:001m=s and s
a
= 0:005rad.
We assume that each beacon is equipped with a range
sensor with 15 meters sensing range and a standard devi-
ation s
m
= 1:2m. Particle Filters were selected for beacon
initialization due to their ﬂexibility and robustness. The
PFs were conﬁgured with 150 particles. When the ﬁrst
measurement for a beacon is received, its auxiliary PF is
initialized deploying particles in an annular distribution of
width w = 4s
m
. The sparsiﬁcation bound chosen was 10,
within the range suggested in [21]. SLAM provides the
generated map –and robot location– in a local coordinate
frame. To compare with the ground-truth, an afﬁne transform
is performed on the ﬁnal beacon locations, re-aligning the
local solution into the same global coordinate frame.
The proposed method has been extensively tested with
different scenarios and robot trajectories. As an example Fig.
2 shows the results using the robot odometry from the Plaza
dataset of Djugash [22] assuming 50 randomly distributed
beacons. The resulting mean error in the robot and beacon
location estimations were respectively 0:31m and 0:42m.
?40 ?20 0
?10
0
10
20
30
40
50
60
x [m]
y [m]
Fig. 2. Results of the proposed Method1 with 50 randomly distributed
beacons. The ground-truth is represented in blue and the estimation in red.
The proposed scheme was compared to EKF and tra-
ditional SEIF, in which the robot integrates only robot-
beacon measurements. The parameters for all the methods
were exactly the same. Series of extensive simulations with
different robot motion and random maps were performed.
Figure 3 shows the mean error in the estimation of map
(top) and robot (center), and the auxiliary PF convergence
times (bottom) in 100 70x70m scenarios with 50 beacons.
For clarity, only the results for 100 scenarios are shown. In
almost all scenarios the proposed Method2 had the lowest
robot and map errors, see Table I. Similar results were
obtained with the proposed Method1. Also, in the proposed
methods PFs converged much sooner than in SEIF and EKF.
Earlier beacon initialization has positive effects on errors and
on computational burden. These results were conﬁrmed in
repetitions with different parameters and measurement and
odometry noise levels.
TABLE I
MEAN MAP AND ROBOT ERRORS AND AUXILIARY PF CONVERGENCE
TIMES IN SERIES OF 500 SIMULATIONS WITH 50 BEACONS.
EKF SEIF Proposed Method2
Map error [m] 0.431 0.451 0.308
Robot error [m] 0.634 0.663 0.415
PF convergence times (k) 1246 1249 263
Series of simulations with different map sizes –between
10 and 300 beacons– were performed to evaluate the scala-
bility of the proposed scheme. 80 scenarios with randomly
deployed beacons were simulated for each map size. They
employed the same parameters that were used before. Fig-
1323
0 20 40 60 80 100
0.2
0.3
0.4
0.5
0.6
0.7
0.8
Scenario #
Map error [m]
 
 
EKF
SEIF
Method 2
0 20 40 60 80 100
0.4
0.6
0.8
1
1.2
Scenario #
Robot error [m]
 
 
EKF
SEIF
Method 2
0 20 40 60 80 100
0
500
1000
1500
2000
Scenario #
PF convergence time (k)
 
 
EKF
SEIF
Method 2
Fig. 3. Comparison of the proposed Method2, EKF and traditional SEIF
in map error (top), robot error (center) and auxiliary PFs convergence times
(bottom) in 100 simulations with different random robot paths and maps.
Similar results were obtained with the proposed Method1. Results are shown
connected for better visualization.
ure 4-top shows the average robot computational burden –
measured with MATLAB Proﬁler– for the EKF, traditional
SEIF and the proposed Method1 and Method2. Method2 is
the most efﬁcient for maps with more than 50 beacons. For
any map size Method2 requires lower burden than Method1
and, Method1 and lower than the traditional SEIF.
The map and robot estimation errors obtained in these
simulations are in Fig. 4-bottom. The proposed Method2 ob-
tains the lowest errors. Method1 and Method2 obtain similar
errors: only Method2 is shown for clarity. The advantage
of the proposed scheme is more evident with larger maps.
Inter-beacon measurements enforce map consistency and, in
absence of inter-beacon measurements, the estimations are
more inﬂuenced by robot odometry noise.
Our scheme uses a protocol between robot and beacons.
For realism, in all the previous simulations messages were
assumed affected by random transmissions errors. The Packet
Reception Rate (PRR) model depicted in Fig. 5-top was used.
This model is realistic and similar to experimental models
such as that in [23]. To evaluate the robustness of our scheme
series of experiments have been simulated using the PRR
0 50 100 150 200 250 300
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
Size of the map (number of beacons)
CPU Time/Iteration [sec]
 
 
EKF
SEIF
Method 1
Method 2
EKF
SEIF
Method 1
Method 2
0 50 100 150 200 250 300
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
Map size (number of beacons)
Map and robot errors [m]
 
 
EKF
SEIF
Method 2
Fig. 4. Performance analysis of the proposed Method1, Method2, EKF and
traditional SEIF with different map sizes: top) robot computational burden,
bottom) map and robot errors. Map errors are represented with full lines
and robot errors, with dashed lines.
model scaled by a factor in the range [0-1]. Scaling factor
0.5 involves that in the best case (low distances) 50% of the
messages are lost. The resulting map errors (full lines) and
robot errors (dashed lines) are shown in Fig. 5-bottom. The
additive nature of the proposed scheme makes it rather robust
to message loss. Figure 5-bottom also shows the errors for
EKF and traditional SEIF –horizontal lines since they are not
inﬂuenced by PRR. The accuracy of the proposed Method2
overtakes EKF and SEIF with PRR levels higher than 75%,
which is a rather pessimistic rate –with low distances 25% of
the messages are lost. Also, it is insensitive to transmission
loss for PRR levels higher than 90%.
Series of simulations have been performed to assess the
impact of different sparsiﬁcation bounds. Our analysis con-
ﬁrms the results in [21], which have been omitted for brevity.
VI. EXPERIMENTS
The proposed scheme has been validated in series of
experiments performed in the CONET Integrated Testbed
(http://conet.us.es) [4], see Fig. 6-left. The testbed
is a remote tool to assess and compare methods combining
robot and ubiquitous networks. The testbed is composed of
Pioneer 3-AT robots, each equipped with a Hokuyo range
ﬁnder, a Microsoft Kinect, GPS and Inertial Measurement
Units. The robot ground-truth localization is obtained us-
ing the AMCL (Adaptive Monte-Carlo Localization) that
integrates laser range measurements and provides an error
lower than 0:01m. Among others, the testbed also includes a
network with 9 Nanotron NanoPAN devices equipped with
1324
10 15 20 25
0
0.2
0.4
0.6
0.8
1
Distance [m]
PRR
60 70 80 90 100
0.4
0.5
0.6
0.7
0.8
0.9
Packet Reception Rate (PRR) [%]
Map and robot errors [m]
 
 
Method 2
EKF
SEIF
Fig. 5. Top) PRR model used in simulations. Bottom) Impact of PRR
on map –full lines– and robot –dashed– errors for the proposed DSEIF
Method2, EKF and SEIF.
range sensors, Fig. 6-right. Their characterization shown
that their error has zero mean and a standard deviation of
s
m
= 0:8m.
Fig. 6. Left) Picture taken in the validation experiments. Right) Nanotron
NanoPAN range sensors used in the experiments.
Figure 7 shows the results of the proposed Method2 in
one experiment. It was compared with EKF and traditional
SEIF in series of 25 experiments with different maps and
robot paths, see Table II. The improvement in the map error
is 40% w.r.t. SEIF and 37% w.r.t. EKF. The testbed allowed
performing the same experiment many times in the same
conditions, which conﬁrmed the repeatability of results.
TABLE II
MEAN MAP AND ROBOT ERRORS AND AUXILIARY PF CONVERGENCE
TIME IN SERIES OF 25 EXPERIMENTS.
EKF SEIF Proposed Method2
Map error [m] 0.251 0.2625 0.1575
Robot error [m] 0.485 0.506 0.425
PF convergence times (k) 1246 1249 263
Figure 8 presents the evolution of the location error for
?10 ?5 0 5 10
?8
?6
?4
?2
0
2
4
6
8
x [m]
y [m]
b
1
b
2
b
3
b
4
b
5
b
8
b
7
b
6
Fig. 7. Results of the proposed Method2. Estimations are in red color and
ground truth in blue.
each beacon in the proposed Method2 (bottom) and the
traditional SEIF (top). The drawing for each beacon starts
when its auxiliary PF converged. In the proposed method
the beacon errors are signiﬁcantly lower and beacon PFs
converge signiﬁcantly sooner. In average in the traditional
SEIF all PFs converged at k= 1246 and in our method they
converged at k= 263 (78% earlier).
0 1000 2000 3000 4000 5000 6000 7000 8000
0
1
2
3
4
Time (k)
Error [m]
SEIF
 
 
Beacon 1
Beacon 2
Beacon 3
Beacon 4
Beacon 5
Beacon 6
Beacon 7
Beacon 8
0 1000 2000 3000 4000 5000 6000 7000 8000
0
1
2
3
4
Time (k)
Error [m]
Method 2
 
 
Beacon 1
Beacon 2
Beacon 3
Beacon 4
Beacon 5
Beacon 6
Beacon 7
Beacon 8
Fig. 8. Evolution of the location error for each beacon for traditional SEIF
(top) and the proposed Method2 (bottom).
In order to evidence the scalability improvement we per-
formed series of hybrid simulated-real experiments with the
robot, 8 real beacons and different numbers of simulated
beacons at random locations. 25 experiments were performed
for each map size with between 20 and 200 beacons. The
resulting robot computational burden and errors, in Fig. 9,
conﬁrmed the results obtained in simulation.
1325
0 50 100 150 200
0
0.2
0.4
0.6
0.8
1
1.2
1.4
Size of the map (number of beacons)
CPU Time/Iteration [sec]
 
 
EKF
SEIF
Method 1
Method 2
EKF
SEIF
Method 2
Method 1
0 50 100 150 200
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
Map size (number of beacons)
Map and robot errors [m]
 
 
EKF
SEIF
Method 2
Fig. 9. Performance analysis of the proposed Method1, Method2, EKF and
traditional SEIF with different map sizes: top) robot computational burden,
bottom) map and robot errors. Map errors are represented with full lines
and robot errors, with dashed lines.
VII. CONCLUSIONS
This paper deals with RO-SLAM for robot-sensor network
cooperation applications in which sensor nodes (beacons) are
used as landmarks for SLAM. This paper proposes a SEIF
SLAM scheme that distributes the computation of the SLAM
algorithm between the robot and the surrounding beacons
exploiting their sensing, computing and communication ca-
pabilities. Beacons actively participate in the SLAM com-
putation taking range measurements and integrating them in
the SEIF update stage.
The presented scheme naturally integrates robot-beacon
measurements together with inter-beacon measurements,
which results in improvements in map and robot estimations.
Also, it inherits from SEIF its efﬁciency and scalability and
further reduces the robot computational burden by exploiting
the beacons computing capability. As a result, the proposed
scheme has lower error and lower computer requirements
than traditional RO-SLAM methods such as EKF and SEIF.
Two different implementations are presented. In Method1
the initialization of each beacon is centralized at the robot
whereas in Method2 it is performed at each beacon.
The extension of this scheme to multi-robot SLAM har-
monizing robot and sensor nodes cooperative behavior and
its full-scale experimentation in the real application scenarios
are object of current work.
REFERENCES
[1] S. Challa, F. Leipold, S. Deshpande, and M. Liu, “Simultaneous
localization and mapping in wireless sensor networks,” in Intelligent
Sensors, Sensor Networks and Information Processing Conference,
2005, dec. 2005, pp. 81 – 87.
[2] E. Menegatti, A. Zanella, S. Zilli, F. Zorzi, and E. Pagello, “Range-
only slam with a mobile robot and a wireless sensor networks,” in
IEEE Intl. Conf. on Robotics and Automation, ICRA’09, 2009, pp.
8–14.
[3] D. Sun, A. Kleiner, and T. Wendt, “Multi-robot range-only slam by
active sensor nodes for urban search and rescue,” in RoboCup 2008:
Robot Soccer World Cup XII, ser. Lecture Notes in Computer Science,
L. Iocchi, H. Matsubara, A. Weitzenfeld, and C. Zhou, Eds. Springer
Berlin Heidelberg, 2009, vol. 5399, pp. 318–330.
[4] A. Jim´ enez-Gonz´ alez, J. R. Mart´ ınez-de Dios, and A. Ollero, “An in-
tegrated testbed for cooperative perception with heterogeneous mobile
and static sensors,” Sensors, vol. 11, no. 12, pp. 11 516–11 543, 2011.
[5] J. Djugash, S. Singh, G. Kantor, and W. Zhang, “Range-only slam for
robots operating cooperatively with sensor networks,” in Proc. IEEE
Intl. Conf. on Robotics and Automation, ICRA’06, may 2006, pp. 2078
–2084.
[6] E. Menegatti, M. Danieletto, M. Mina, A. Pretto, A. Bardella,
S. Zanconato, P. Zanuttigh, and A. Zanella, “Autonomous discovery,
localization and recognition of smart objects through wsn and image
features,” in Proc. IEEE GLOBECOM 2010, 2010, pp. 1653 –1657.
[7] J.-L. Blanco, J.-A. Fernandez-Madrigal, and J. Gonzalez, “Efﬁcient
probabilistic range-only slam,” in Proc. IEEE/RSJ Intl. Conf. on
Intelligent Robots and Systems, IROS’08, sept. 2008, pp. 1017 –1022.
[8] S. Thrun, D. Koller, Z. Ghahmarani, and H. Durrant-Whyte, “Slam
updates require constant time,” School of Computer Science, Carnegie
Mellon University, Pittsburgh, Tech. Rep, 2002.
[9] U. Frese, “A proof for the approximate sparsity of slam information
matrices,” in Proc. IEEE Intl. Conf. on Robotics and Automation,
ICRA’05, 2005, pp. 329–335.
[10] M. A. Paskin, “Thin junction tree ﬁlters for simultaneous localization
and mapping,” in Proc. of the 18th Intl. Joint Conference on Artiﬁcial
Intelligence, IJCAI-03, G. Gottlob and T. Walsh, Eds. San Francisco,
CA: Morgan Kaufmann Publishers, 2003, pp. 1157–1164.
[11] U. Frese, “Treemap: An o (log n) algorithm for simultaneous local-
ization and mapping,” in Spatial Cognition IV . Reasoning, Action,
Interaction. Springer, 2005, pp. 455–477.
[12] Y . Liu and S. Thrun, “Results for outdoor-slam using sparse extended
information ﬁlters,” in Proc. IEEE Intl. Conf. on Robotics and Au-
tomation, ICRA’03, vol. 1, 2003, pp. 1227–1233.
[13] R. Eustice, M. Walter, and J. Leonard, “Sparse extended information
ﬁlters: Insights into sparsiﬁcation,” in Proc. IEEE/RSJ Intl. Conf. on
Intelligent Robots and Systems, IROS’05, 2005, pp. 3281–3288.
[14] S. Thrun and Y . Liu, “Multi-robot slam with sparse extended infor-
mation ﬁlers,” in Robotics Research. Springer, 2005, pp. 254–266.
[15] J. Sola, A. Monin, M. Devy, and T. Lemaire, “Undelayed initialization
in bearing only slam,” in Proc. IEEE/RSJ Intl. Conf. on Intelligent
Robots and Systems, IROS’05, 2005, pp. 2499–2504.
[16] E. Olson, J. Leonard, and S. Teller, “Robust range-only beacon local-
ization,” in Proc. 2004 IEEE/OES Autonomous Underwater Vehicles,
june 2004, pp. 66 – 75.
[17] M. Banatre, P. Marron, A. Ollero, and A. Wolisz, Cooperating
Embedded Systems and Wireless Sensor Networks. Wiley, 2008.
[18] D. O. Popa and F. L. Lewis, “Algorithms for robotic deployment of
wsn in adaptive sampling applications,” in Wireless Sensor Networks
and Applications. Springer US, 2008, pp. 35–64.
[19] Y . Mei, C. Xian, S. Das, Y . C. Hu, and Y .-H. Lu, “Sensor replacement
using mobile robots,” Comput. Commun., vol. 30, no. 13, pp. 2615–
2626, Sep. 2007.
[20] J. Goerner, N. Chakraborty, and K. Sycara, “Energy efﬁcient data
collection with mobile robots in heterogeneous sensor networks,” in
IEEE Intl. Conf. on Robotics and Automation, ICRA’13, 2013.
[21] S. Thrun, W. Burgard, and D. Fox, Probabilistic Robotics, 3rd ed.
Cambridge: The MIT Press, 2005.
[22] J. Djugash, B. Hamner, and S. Roth, “Navigating with ranging radios:
Five data sets with ground truth,” Journal of Field Robotics, vol. 26,
no. 9, pp. 689–695, September 2009.
[23] M. Mamun, T. Hasan-Al-Mahmud, S. Debnath, and I. M., “Analyzing
the low power wireless links for wireless sensor networks,” Journal
of Telecommunications, vol. 1, pp. 99 –110, February 2010.
1326
