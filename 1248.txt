Robotic Construction of Arbitrary Shapes with Amorphous Materials
Nils Napp and Radhika Nagpal
{nnapp@wyss, rad@eecs}.harvard.edu
Harvard University
Cambridge MA, USA
Abstract— We present a locally reactive algorithm to con-
struct arbitrary shapes with amorphous materials. The goal
is to provide methods for robust robotic construction in
unstructured, cluttered terrain, where deliberative approaches
with pre-fabricated construction elements are difﬁcult to apply.
Amorphous materials provide a simple way to interface with
existing obstacles, as well as irregularly shaped previous deposi-
tions. The local reactive nature of these algorithms allows robots
to recover from disturbances, operate in dynamic environments,
and provides a way to work with scalable robot teams.
I. INTRODUCTION
A. Motivation
Robots are well-suited for tasks that put people in harm’s
way or need to be performed faster and more consistently
that humans can. The long-term goal of this project is
to enable robots to do the type of construction that is
particularly useful in emergency situations, where hazardous
poorly prepared construction environments are the norm, and
new structures, e.g. levies, supports , or access ramps, need
to be built around, on top of, or in support of existing
structures. The focus of this paper is designing algorithms
that enable one or more mobile robots to reliably build
approximations to pre-speciﬁed structures with amorphous
building materials. The target shape is assumed to be much
larger than the robots, so they need to navigate and move on
top of partially completed structures. Amorphous materials
allow pre-speciﬁed structures to be built on or around irregu-
larly shaped obstacles—something that is difﬁcult to achieve
with deliberative approaches and pre-fabricated construction
elements. In contrast to related work using discrete lattice-
like elements, we use a continuous problem formulation and
exploit the additional mathematical tools that come with it.
The presented approach relies on reactive robot behaviors,
which means robots use current local information to make
decisions as opposed to following a ﬁxed construction plan
or maintaining a world model to execute such a plan. This
approach provides feedback during the construction process,
which allows us to work with amorphous materials that de-
form after deposition and operate in poorly characterized and
dynamic environments. In previous work we demonstrated
a locally reactive algorithm to adaptively build ramps over
arbitrary unknown terrain. Here we extend the work on ramp
building by approximating arbitrary target structures as a
series of ramps. We present two ﬂavors of the shape building
algorithm: ﬁrst, an algorithm where robots have global
positioning, and second an algorithm where robots can only
locally sense terrain. With global positioning, the underlying
ramp building algorithm guarantees access to building sites
throughout the construction process and its adaptive nature
enables the ﬁnal shape to be built over irregular terrain.
Without global positioning, we design a compiler that takes
an arbitrary goal structure, g, and generates markers in the
environment such that when robots react to this marked up
environment they build the desired shape, Fig. 1.
We envision these types of construction algorithms and
robots to be useful in preparing hazardous cluttered sites with
loose rubble for people or other robots, either by building
a stabilizing layer over loose material or providing support
structures and roughly level surfaces for more accurate
types of construction. By exploring the tradeoff between
locomotion and construction capabilities of a robot against
the allowable approximation error and construction speed,
this theoretical work can serve as a guide when designing
such systems. The contribution of this paper is to provide a
compiler that takes an arbitrary target structure and generates
a set of environmental markings that reproduce it to within a
pre-speciﬁed accuracy when robots respond to the markings
with a known locally reactive behavior. In addition, the
key technical contribution is a lower bound for terminating
structures of the ramp building [11] in terms off-continuity.
This bound allows us to prove that the compiler works
and provides additional tools for reasoning about amorphous
construction in general.
Section II sets up the mathematical notation and provides
needed results. Procedures for building arbitrary structures
are described in Sec. III, where Sec. III-A summarizes
previous work on building ramps, and Sec. III-C presents
our main result. Simulations and a detailed error analysis of
the resulting procedure are given in Sec. IV.
B. Related Work
Since construction is generally difﬁcult, dirty, and often
dangerous work there has been much interest in automating
it. This brief literature survey mostly focuses on related
algorithmic problems instead of mechanism design or low-
level control problems.
Previous work on autonomous construction often focuses
on the case where robots (or building blocks) have good
estimates of their global position and all share the same
consistent target shape [2][7][12][16][19] or execute pre-
compiled local rules to create it [3][6]. Some approaches
either abstract away motion constraints [16][21], or are
developed for physical systems that do not have compli-
cated motion constraints that restrict acceptable intermediate
structures [2, pp130–151][7]. Approaches based on additive
manufacturing, e.g. [4] also fall into this category. This
classiﬁcation based on the speciﬁcation approach can be
further broken down into how much global state information
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 438
(a)
Target Structure
(b) (c) (d)
Fig. 1. (a) Irregular unnavigable terrain (black) and a dam-like target structure (gray). The initial position of robots is to the left. (b) Ramp building
executed over terrain with no knowledge of target structure. Note that material is only added to move past steep features, i.e. to make terrain navigable. (c)
Shape building with global knowledge. In addition to ramp building, robots make a deposition whenever they are within the target shape and more than
? from the shape’s boundary. (d) Shape built by executing ramp building in an marked up environment. Robots do not know about the ﬁnal target shape,
but respond to markers (arrow locations) compiled according to Alg. 1 in Sec. III-C to approximate the target shape.
individual robots have during runtime. Some algorithms as-
sume global knowledge of the construction state [2][7], while
others use only local observations [12][6][16][3]. The latter
approaches often exploit the local nature of their approaches
to gain speedup though parallelism [12][18][21] and fault
tolerance through reactive behaviors [6][20]. When robots
have global position estimates, the presented amorphous con-
struction neatly falls into this line of research. Robots share
the same coordinate system and goal, but have only local
state information and use local rules to make depositions
and satisfy motion constraints.
The problem of specifying a target structure in a system
with known growth dynamics is special case of programmed
self-assembly, in which a system of interacting components
is programmed/designed in such a way that the interaction
dynamics result in a desired ﬁnal shape. The extensive prior
work in this area typically assumes that individual pieces do
not have good estimates of their global position or any global
knowledge, such as the number of interacting components,
size of the assembly volume, assembly state, etc. Instead the
global behavior is encoded by specifying purely local behav-
iors [5][9]. This general approach has been applied to a wide
variety of systems, ranging from DNA [13], micro-machined
components [1], to robots, where local interactions can take
advantage of the considerable storage and computational
power of micro-processors [14]. The idea of using feedback
on the whole self-assembling system has also been explored
by a number of groups. The interactions are still local, but
external global knowledge of the assembly state is used to
tune them [8][10][15]. The proposed markup procedure in
Sec. III-C most closely resembles patterned self-assembly
or seeded growth [17], where global knowledge is used
to compile environmental markings that encode the target
shape. Purely reactive (but carefully designed) robot behavior
represents the growth dynamics.
II. THE AMORPHOUS CONSTRUCTION MODEL
The following notation is similar to our earlier work and
included here both to achieve a self-contained presentation
and to concisely state the previous results [11]. This sections
describes a state and deposition model for amorphous con-
struction, a model for structures which robots can navigate,
and a global projection operator for structures that is used for
proving correctness of building strategies in the next section.
A. State and Deposition Model
We model the construction area Q as a convex, compact,
and ﬁnite subset ofR (orR
2
) and the domain of a bounded,
non-negative height function h : Q ? R
+
which describes
a structure. Robots move on structures and modify them.
While building speciﬁc structures, the goal structure is
denoted by g. Given a goal structure and initial structure
h, the support of g is the set of points where the goal
structure differs from the initial environment, and is denoted
by S = {x ? Q | h(x) < g(x)}, which we assume is a
connected subset ofQ. Given two structuresh andg,g is said
to dominate h, denoted h≤ g, when h(x)≤ g(x) ?x? Q.
Let Q be the space of real-valued, bounded functions on
Q and Q
+
? Q the subset of non-negative ones, i.e.
the space of structures. Function application to points and
operator applications to functions are denoted by (·) and [·]
respectively.
Robots can deposit amorphous construction material and
control its volume and position. The free (top) surface of each
deposition is modeled by a parameterized shape functiond?
Q while the bottom conforms to the structure. As a simple,
yet sufﬁciently general, family of shape functions we use
cones. Given an apex-position pair (?,?) ? Q?R
+
and
steepness k
d
?R
+
let
d
(?,?)
(x) =??k
d
|??x|. (1)
The deposition operator D : Q ? Q
+
? Q
+
models
interactions of depositions with the environment, here simply
covering it as construction with materials like mud, expand-
ing foam, or sand would. Given a structure h ? Q
+
with
h(?)<?, the new structure after deposition d
(?,?)
is given
by
D[d
(?,?)
,h](x) = max{(d(x),h(x)}. (2)
Given an initial structure h
0
?Q
+
a structure is built by
a sequence of depositions characterized by their shape pa-
rameters (?
1
,?
1
),(?
2
,?
2
),(?
3
,?
3
),.... The height function
h
n
after n depositions is deﬁned recursively by
h
n
(x) =D[d
(?n,?n)
,h
n?1
](x). (3)
After the n-th deposition, local reactive rules of each robot
direct it to move on h
n
and possibly make a deposition
resulting in a new structure h
n+1
. For example, in the case
when robots have global knowledge, they deposit whenever
they are inside the goal shape, i.e. are positioned in its
support S.
B. Navigable Structures and f-continuity
Building ramps requires a concise description of navigable
structures. We use three parameters to describe robot speciﬁc
motion constraints: K ? R
+
, to model the maximum
439
steepness robots can drive up or down, ? ? R
+
, to model
the largest discontinuity robots can freely move past, and
r?R
+
, to limit the amount of discontinuity in a small area,
such as the robot length. A structure is called navigable if
and only if it is locally (parameter r) close (parameter ?) to
K-Lipschitz, i.e. ?x,y?Q and |x?y|≤r:
|h(x)?h(y)|≤?+K|x?y|. (4)
As opposed to [11] we recast this deﬁnition as a continuity
constraint where a single function, Eqn. (8) which depends
on the three navigability parameters, is used to weigh the
distance between two points.
A function h?Q is called f-continuous iff
?x,y?Q |h(x)?h(y)|≤f(|x?y|), (5)
where f :R
+
?R
+
is a monotone function that is zero at
zero and sub-additive (preserves the triangle inequality) i.e.
f(0) = 0
x≤y ? f(x)≤f(y) ?x,y,?R
+
,
f(x+y) ≤ f(x)+f(y) ?x,y?R
+
. (6)
For example, when k(x) = Kx then a function is f-
continuous with function k (written as k-continuous) iff it
is K-Lipschitz, see Fig. 2(a) for example functions.
To reason about global guarantees of local algorithms, we
deﬁne the projection operator P
f
in Eqn.(7), which maps
any structure to the closest f-continuous function that can
be built by only adding material. At point x? Q, P
f
takes
the maximum value of any needed additions so all other
points fulﬁll Condition (5),
P
f
[h](x) = max
y?Q
{h(y)?f(|x?y|)}. (7)
Theorem 1: The operator P
f
: Q 7? Q in Eqn. (7) has
the following properties:
1) P
f
[h](x) is the smallest f-continuous function that
dominates h.
2) f ≤f
?
?P
f
[h]≥P
f
?[h].
See Fig. 2(b) for examples and Sec. VI for proof.
Theorem 2: The function
n(x) =
l
x
r
m
?+Kx (8)
fulﬁlls the conditions in Eqn. (6) andn-continuous functions
are exactly the set of navigable ones.
Proof: (n-continuous? navigable) For a givenn con-
tinuous function h, restricting the deﬁnition of n-continuity
in Eqn. (5) to point pairs x,x
?
s.t.|x?x
?
|≤r results in the
navigability condition|h(x)?h(x
?
)|≤?+K|x?x
?
|.
(navigable ? n-continuous) Given an arbitrary point pair
x,x
?
? Q, the line segment connecting them is also in Q
by assumption. Let x
0
, x
1
... x
N
be N + 1 points spaced
along this line with x
0
= x and x
N
= x
?
, where the ﬁrst
N points are spaced r apart and the last pair possibly less,
i.e.|x
N
?x
N?1
|≤r. For each pair x
i?1
,x
i
by navigability
|h(x
i
)?h(x
i?1
)|≤?+|x
i
?x
i?1
|. There areN =
l
|x?x
?
|
r
m
such point pairs and summing the incremental differences
k
?
(x)
k(x)
n
?
(x)
n(x)
?
r
R
+
R
+
R
+
Q
Fig. 2. (a) Example functions for f-continuity. The functions k and k
?
describe Lipschitz continuity with different parameters K. The functions
n and n
?
are navigability functions with different parameters r and ?. (b)
Different f-continuous projections of the same a sample function (ﬁlled
gray) using using k,k
?
,n and n
?
for specifying continuity.
implies n-continuity:
K|x?x
?
|+

|x?x
?
|
r

?
= K
N
X
i=1
|x
i
?x
i?1
|+N?≥
N
X
i=1
|h(x
i
)?h(x
i?1
)|
≥ |h(x
0
)?h(x
N
)| =|h(x)?h(x
?
)|. (9)
Navigability is deﬁned for structures and checked for
point pairs. Using the equivalence between n-continuity and
navigability allows a direct deﬁnition of navigability for
single points. A pointx?Q in structureh is called navigable
iff P
n
[h](x) =h(x).
III. BUILDING ARBITRARY STRUCTURES
This section describes increasingly complex examples of
building structures: (1) a brief summary of previous results
on building ramps including a new lower bound; (2) a strat-
egy for building a goal structure, g, on arbitrary, potentially
unnavigable terrain, when robots can estimate their global
position in a consistent reference frame, i.e. have GPS; and
(3) a compilation procedure that takes global information and
produces markers which allow robots to build structures to
within a pre-speciﬁed error ?
T
using only local knowledge.
As presented, all algorithms in this section requireQ?R to
get an ordering of points in Q. One simple way of applying
these algorithms to Q?R
2
is to ﬁx a path and directly use
the results. Alternatively, this approach could be extended by
using other orderings that are aimed at achieving efﬁcient
implementations, for example by searching for good paths.
A. Building Ramps Adaptively
Our previous work on adaptive ramp building [11] guaran-
tees the construction of a ﬁnal structure,h
?
, that is navigable
everywhere between a starting point, x
0
, and a goal position
x
?
. One or more robots can build ramps using only local
knowledge of the current terrain and the heading direction
toward x
?
.
The ramp building algorithm maintains a navigable area
aroundx
0
, called the accessible region, and extends it toward
x
?
until the goal is reached, Fig. 3(a). Speciﬁcally, a robot
repeats the following sequence of operations:
1) Move toward goal until reaching it or ﬁnding a non-
navigable feature, i.e. a point pair |x?y| < r with
|h(x)?h(y)|>K|x?y|+?.
440
x
0 x x
?
Accessible Region
r
? ?
K
K ?K
?
l
robot
l
deposition
Fig. 3. (a) Schematic of adaptive ramp building. Cone like depositions are
shown in red. The accessible region reaches form the smallest point in the
domain to the current position x. When ramp building is complete (Fig. 1b)
the whole domain is navigable. (b) Schematic of robot speciﬁc geometric
limits on navigability parameters. The lengths l
deposition
and l
robot
place
limits on the maximum deposition height and r.
2) Deposit on the lower point of the non-navigable pair
(minimum deposition height ? and maximum height
given by robot geometry).
3) Backup by 2r.
As depositions made in response to non-navigable features
might themselves be non-navigable features, backing up
guarantees that robots maintain the accessible region that
extends from x
0
. This region might temporarily shrink, e.g.
when a robot encounters an obstacle while moving uphill
and makes a deposition that creates a steep feature. By
backtracking and repeating the procedure, new depositions
are checked for navagability.
How the navigability parameters K, ?, and r relate to
a robot’s geometry is illustrated in Fig. 3(b). We assume
that they can be chosen conservatively for a given robot.
In fact, since they inﬂuence the built structure one might
choose these values to fulﬁll both robot motion constraints
and produce desirable results. For example, one could create
a smoother structure by choosing an artiﬁcially low value
of ?. The following considerations place limits on these
parameters:
Deposition resolution <?< Motion constraints;
0 ≤K <
Deposition paramteres
(e.g. K
d
) or motion
constraints;
Robot length <r < Sensing range.
Within these ranges the parameters can be chosen freely and
different combinations result in different ﬁnal structures, see
Sec. IV.
Theorem 3: Settingx
0
= min(Q)+2r andx
?
= max(Q)
and running the ramp building algorithm on an initial struc-
ture h
0
where points up to the initial position, x≤ x
0
, are
navigable results in a ﬁnal structureh
?
with upper and lower
bounds given by
P
n
[h
0
]≤h
?
≤P
k
[h
0
]. (10)
Proof: The choice of x
0
and x
?
imply that h
?
is
navigable everywhere. The upper boundP
k
is proved in [11,
Sec. 4.1]. Theorem 2 implies that P
n
[h
0
] is navigable, and
Thm. 1.1 implies it is the smallest dominating navigable
structure. Since h
0
≤h
?
, P
n
[h
0
] is a lower bound for h
?
.
Note that [11] assumes a continuoush
0
in order to ensure
progress—a restriction we would like to relax to allow
discontinuities at markers in the next section.
Lemma 4: Adaptive ramp building works over discontin-
uous structures with a countable number discontinuities of
the from h
0
(x)+
P
i
?
i
?(x?x
i
), where ?(0) = 1, ?
i
> 0,
and h
0
?Q
+
is continuous.
Proof: Since they have measure zero and ﬁnite height,
this type of discontinuity does not change any of the vol-
ume computations in the progress proofs. The restriction
?
i
> 0 ensures that the discontinuous points x
i
are only
deposition locations (lower point in non-navigable pair) if
its neighborhood (responsible for deposition volume) ensures
progress [11, Sec. 3.1].
B. Building With Global Positioning
With global positioning, the problem of building an arbi-
trary goal structureg(x) is easy to solve. In addition to ramp
building robots execute the following behavior: they make a
deposition (of a maximum height g(x)+
?
2
) whenever they
are in the support, S, of g and
h
n
(x)<g(x)?
?
2
. (11)
For these depositions, they follow the same sizing and
backing up strategy as in adaptive ramp building. Following
this strategy essentially treats the interior of g as an obstacle
and the ramp building algorithm adaptively builds over it.
Robots might need to add additional material to ensure
that the structures they are moving on are navigable. Where
and how much they add is determined by u(x) and l(x),
which are upper and lower approximations of g that take
navigability into consideration. They are deﬁned in terms of,
potentially non-navigable, auxiliary functions g
u
and g
l
:
g
u
(x) =

g(x)+?
T
,x?S
h
0
(x) , otherwise
u(x) =P
k
[g
u
](x) (12)
g
l
(x) =

max(g(x)??
T
,h
0
) ,x?S
h
0
(x) , otherwise
l(x) =P
k
[g
l
](x). (13)
In terms of the navigable upper and lower bounds this
strategy results in the following structure.
Theorem 5: When robots execute the ramp building algo-
rithm and additionally deposit on pointsx?S where condi-
tion Eqn. (11) is true (with the maximum height g(x)+
?
2
),
the resulting structure has the following properties: h
?
≤ u
?x?Q and l≤h
?
?x?S with ?
T
=
?
2
.
Proof: The deposition height is limited by g
u
on navi-
gable points of g. Since any additional depositions to ensure
navigability the are made by the ramp building algorithm,
the upper bound from Thm. 3 is P
k
[g
u
] = u. Robots will
deposit on points in S with h
n
≤ g?
?
2
≤ l and can make
these depositions without violating the upper bound since
the deposition height is as least ?. Where g is navigable,
i.e. points that are not covered by a ramp, robots will keep
adding to the target structure until the l≤h
n
.
441
Fig. 4. (a) Diagram of compilation procedure and error bounds. The original environment is shown in black, the structure to be built build, g, in gray,
and the markers x
i
as black dots. The K-Lipschitz approximation of the shape is shown in solid red and the±?
T
bounds of acceptable ﬁnal structures,
u and l, as dashed red lines. The upper and lower bounds P
k
and Pn induced by the markers are shown as blue lines. The compilation procedure results
in markers that have a height equal to the upper +?
T
bound and are spaced so the lower bounds induced by each marker intersect at crossing points c
i
on the??
T
bound (green dots). Markers are only placed on the support, shown in green, of the gray structure, i.e. points in the original environment on
which the structure should be built. (b) Final structure built in response to markers.
C. Building Without Global Positioning
Without global positioning individual robots do not know
where they are with respect to the target shape. Local sensing
allows them to assess the navigability of their immediate
surroundings. Yet, while this restriction limits the ability
of individual robots to make building decisions, dropping
the need of sharing in a consistent global reference frame
also makes this approach robust to position and progress
uncertainty.
Specifying Structures: The particular strategy we pursue
here is to design a set ofN discrete markingsm of the form
m(x) =
N
X
i=1
?
i
?(x?x
i
) (14)
so that ramp building on h
0
+m results in the ﬁnal target
shape g to within a pre-speciﬁed error ?
T
. We tackle this
problem by designing a compilation procedure that takes
an arbitrary initial environmenth
0
(x), goal shape g(x), and
error ?
T
to produce initial markingsm on h
0
s.t. the system
dynamics of ramp building have a steady state h
?
(x) with
|h
?
(x)?g(x)|≤?
T
on S, subject to g being navigable.
Compiling Markers: Each marker above a certain height
makes a structure non-navigable, so that robots will build a
ramp in response. Given the upper boundu and lower bound
l for acceptable ﬁnal structures the compilation procedure in
Alg. 1 generates m, of the form Eqn. (14), such that ramp
building on h
0
+m, result in a navigable structure that is
bound between l and u for every point in the supportS, and
bounded above by u outside of the support.
Marker placements are computed iteratively by choosing
positions such that when their height ish
0
(x)+m(x) =u(x)
the lower bounds of the resulting ramps intersect on l(x),
Fig. 1(a). The points, where the lower bounds intersect,
are called crossing points c
i
? S. Algorithm 1 starts
with crossing point c
0
= min(S) and alternates between
computing the next larger marker location x
0
, which in turn
determines the next crossing pointc
1
, wherec
0
<x
0
<c
1
...
.
Algorithm 1 Compiling Markers.
1: c
0
= min(S)
2: N = 0
3: while c
i
< max(S) do
4: x
i
= max{x?S |u(x)?n(|x?c
i
|)>l(c
i
)}
5: c
i+1
= max{c?S |u(x
i
)?n(|x
i
?c|)>l(c)}
6: increment N
7: end while
8: m(x) =
P
N
i=1
u(x
i
)?h
0
(x
i
)?(x?x
i
).
Theorem 6: Given an initial structure h
0
and goal struc-
ture g≥h
0
and target error ?
T
> ?, the compilation proce-
dure in Alg. 1 terminates and generates a ﬁnal marking m
such that executing adaptive ramp building onh
0
+m results
in a ﬁnal structureh
?
with the property that|h
?
?P
k
[g]|≤?
T
on the support of g and h
?
≤u outside the support.
Proof: This proof proceeds in three steps. First the
global upper bound, then the lower bound on S, and ﬁnally
termination.
The upper bound u is k-continuous. By construction
h
0
+ m ≤ u and the upper bound for the ﬁnal structure
h
?
of adaptive ramp building on h
0
+ m is P
k
[h
0
+ m].
Since P
k
[h
0
+m] is the smallest k-continuous function that
dominates h
0
+m, u must be at least as large and h
?
< u
globally. By the deﬁnition of u in Eqn. 1, u?P
k
[g] ≤ ?
T
and thus h
?
?P
k
[g]≤?
T
on S.
We prover the lower bound by induction and show that
the marker between two crossing points c
i
and c
i+1
induces
the lower bound on h
?
between the two points. Since
adding markers can only increase the size of h
?
adding
more markers can only make the bound tighter. Assume that
|h
?
(x)?P
k
[g](x)|≤?
T
for all x≤c
i
. By Line 4 in Alg. 1,
the smallest n-continuous function built in response to the
marker at x
i
is larger than l at c
i
and the points between
c
i
and x
i
. By Line 5 the next c
i+1
is close enough that at
the smallest n-continuous function built in response to the
marker atx
i
is at least as larger asl atc
i+1
at points between
442
height= 3r
0
r
?
(a)
r
?
 
 
1.0 2.0 3.0 4.0 5.0 6.0 7.0
0.05
0.10
0.15
0.20
0.25
0.30
0.35
0.40
0.45
0.50
0
1
2
3
4
5
6
7
8
?
r
(b)
0.5 1 1.5 2 2.5 3
0
10
20
30
40
50
60
70
80
90
100
2
4
6
8
10
number of markers
?T
?
(c)
Fig. 5. Adaptive Ramp Building. (a) Schematic of test geometry for
quantifying error (gray area). All quantities are normalized to r
0
, so this
geometry represents building a ramp over a marker that is three times as high
as the robot is long. (b) Error volume of the sample structure as a function of
varying r, and ? and a constant K = 0.5. Since all variables are normalized
to r
0
, a value of r = 2 represents increasing the characteristic length of a
robot by 2, either by physically increasing the robot size or adjusting the
sensing range. The error is given in units of r
2
0
. (c) Number of markers
produced by Alg. 1 on the target structure in Fig. 4(a) as a function of
changing ?
T
and keeping all other parameters the same. The inset shows
that as ?
T
grows only a small number of markers are needed, and the same
number of markers can produce several different levels of accuracy. For
example, ?
T
=2.3? and ?
T
= 1.9? both require 4 markers.
x
i
and c
i+1
, thus by induction h
?
?P
k
[g]≥?
T
.
Since the magnitude of the derivative of l and u are both
bounded by K, the minimum separation between c
i
and x
i
is at least
?T?
?
2
K
. Thus each pass through the loop ensures
progress. Termination requires that?
T
is at least
?
2
, otherwise
c
i
= x
i
= c
i+1
and iterations through the loop (Line 3–6)
do not result in progress.
Once the compiler has used global information to com-
pute marker heights and locations, adaptive ramp building
can build the structure by locally responding to them, see
Fig. 4(b).
IV. SIMULATION EXPERIMENTS AND PARAMETER
SENSITIVITY ANALYSIS
This section focuses on quantifying different error types
when building structures. Given a target shape g this ap-
proach to designing markers has three distinct sources of
error in the ﬁnal structure
1) If the goal shape g is not K-Lipschitz it is approxi-
mated by P
k
[g].
2) The difference between |P
k
[h
0
+m]?P
k
[g]| which
result from approximating the shape by a ﬁnite number
of markers.
3) The uncertainty in the exact shape of h
?
of when the
ramp building algorithm stops, i.e. the boundsP
n
[h
0
+
m]≤h
?
≤P
K
[h
0
+m].
The ﬁrst type is due to a robot’s motion constraints. If
robots cannot move over steep features, then the the ﬁnal
shape cannot have any. This error can be reduced by using
robots with navigability constraints that have a large value
of K. This error is bounded by |g?P
k
[g]|.
The second type of error is related to marker density. Since
it is controlled by the compilation parameter ?
T
, the (L
∞
)
error itself is easy to quantify,±?
T
from P
k
[g]. Figure 5(c)
shows the number of markers needed to compile the target
structure in Fig 4(a) as function of ?
T
where all other
parameters are constant. Since the navigability functionn has
a discontinuity, choosing the smallest ?
T
for a given number
of markers makes sense. For some values the error can be
decreased essentially for free (no additional markers). This
type of error (L
1
) is bounded by ?
T
|S|, i.e. target epsilon
times the size of the support. From the proof of Thm. 6,
an upper bound for the number of markers is given by the
minimum speparation between markers and the diameter of
S, i.e. for a given target error and parameter combination the
number of needed markers is bound by K
|S|
?T?
?
2
. And the
procedure produces an excessive amount of markers when
?
T
approaches the lower theoretical limit
?
2
, see Fig. 5(c).
The third type of error depends on the navigability param-
etersK,r, and?. We use the reference geometry in Fig. 5(a)
to evaluate the tradeoff of different parameter combinations.
The reproduction ﬁdelity should (and does) depend on how
much information each robot has, i.e. how local the algorithm
is, and how much uncertainty each amorphous deposition
has. On one hand, if the construction material is very sloppy
and does not allow for accurate depositions (large ?) the
construction material limits ﬁdelity, and more information
does not help. On the other hand, if the view of the world is
too local, i.e. robots cannot see much of their environment
(smallr), uncertainties propagate and limit ﬁdelity, and more
accurate depositions do not help, Fig. 5(b).
The error sources can be controlled in different ways
and this section gives guidance on how to trade off design
parameters, for example, whether to design a robot that
is better at driving over rough terrain or to focus on a
mechanism that can make more accurate depositions.
V. CONCLUSION
We present algorithms for robotic construction with amor-
phous building materials that allow one or more robots
to build approximations to arbitrary shapes and provide
an error analysis for the various sources of approximation
error. Amorphous building materials allow robots to build
structures over unknown irregular terrain, and these methods
are designed to enable robotic construction in disaster areas
where such environments are the norm. The presented ap-
proach utilizes previous work on adaptive ramp building as
a base behavior to provide access to building sites during
the construction process. Complicated structures can be
approximated by a series of ramps. By using single markers
to encode ramps, we provide a compilation procedure that
can efﬁciently encode approximations to arbitrary target
structures with a relatively small number of markers. This
approach allows robots without global positioning to build
structures by locally reacting to markers.
In addition to creating a physical implementation, we
plan to extend this work by looking for more physically
realistic markers. One option is to mark up environment by
choosing locations according Alg.1 and encoding the desired
443
height in some other way, for example, the marker color
or a tag embedded the building material which robots can
read and modify. The next theoretical step that would make
both the presented work and the underlying ramp building
algorithm easier to implement, would be to get a better
characterization of allowable deposition shape functions, d.
Rather than designing the amorphous deposition mechanism
around a mathematical abstraction that works, it would be
much better to develop a theory that is ﬂexible and can
accommodate shape functions that are easy to implement.
ACKNOWLEDGEMETNS
We are grateful to the Wyss Institute for Biologically
Inspired Engineering which funded this work.
REFERENCES
[1] Mila Boncheva and George M. Whitesides. Making things by self-
assembly. MRS Bulletin, 30:736–742, 10 2005.
[2] Gramazio & Kohler et Raffaello d’Andrea. Flight Assembled Archi-
tecture. HYX Architecture, Contemporary Art, Expos Review, Digital
Cultures, Philosophy, 2013.
[3] Alexander Grushin and James A. Reggia. Automated design of
distributed control rules for the self-assembly of prespeciﬁed artiﬁ-
cial structures. Robotics and Autonomous Systems, 56:334 – 359,
2008/04/30/ 2008.
[4] B. Khoshnevis. Automated construction by contour crafting related
robotics and information technologies. Journal of Automation in
Construction Special Issue: The best of ISARC 2002, 13:5–19, 2004.
[5] E. Klavins, R. Ghrist, and D. Lipsky. A grammatical approach to self-
organizing robotic systems. Automatic Control, IEEE Transactions on,
51(6):949–962, 2006.
[6] K. Kotay and D. Rus. Generic distributed assembly and repair algo-
rithms for self-reconﬁguring robots. In IEEE International Conference
on Robotics and Automation (ICRA), Sendai, Japan, 2004.
[7] Quentin Lindsey, Daniel Mellinger, and Vijay Kumar. Construction
of cubic structures with quadrotor teams. In Proceedings of Robotics:
Science and Systems, Los Angeles, CA, USA, June 2011.
[8] Gregory Mermoud, Massimo Mastrangeli, U. Upadhyay, and A. Mar-
tinoli. Real-time automated modeling and control of self-assembling
systems. In Robotics and Automation (ICRA), 2012 IEEE International
Conference on, pages 4266–4273, 2012.
[9] R. Nagpal, F. Zambonelli, E.G. Sirer, H. Chaouchi, and M. Smirnov.
Interdisciplinary research: roles for self-organization. Intelligent Sys-
tems, IEEE, 21(2):50–58, 2006.
[10] Nils Napp, Samuel Burden, and Eric Klavins. Setpoint regulation for
stochastically interacting robots. Autonomous Robots, 30(1):57–71,
2011.
[11] Nils Napp and Radhika Nagpal. Distributed amorphous ramp con-
struction in unstructured environments. In Distributed Autonomous
Robotic Systems (DARS12), 2012.
[12] Kirstin Petersen, Radhika Nagpal, and Justin Werfel. Termes: An au-
tonomous robotic system for three-dimensional collective construction.
In Proceedings of Robotics: Science and Systems, Los Angeles, CA,
USA, June 2011.
[13] Paul W. K Rothemund, Nick Papadakis, and Erik Winfree. Algorithmic
self-assembly of dna sierpinski triangles. PLoS Biol, 2(12):e424, 12
2004.
[14] M. Rubenstein and W. Shen. Automatic scalable size selection for the
shape of a distributed robotic collective. In 2010 IEEE/RSJ Intl. Conf.
on Intelligent Robots and Systems, Taipei Taiwan, 2010.
[15] Michael T Tolley and Hod Lipson. On-line assembly planning for
stochastically reconﬁgurable systems. The International Journal of
Robotics Research, 2011.
[16] Justin Werfel and Radhika Nagpal. Three-dimensional construction
with mobile robots and modular blocks. Int. J. Rob. Res., 27:463–
479, March 2008.
[17] George M. Whitesides and Bartosz Grzybowski. Self-assembly at all
scales. Science, 295(5564):2418–2421, 2002.
[18] James Worcester, Joshua Rogoff, and M. Ani Hsieh. Constrained
task partitioning for distributed assembly. In Intelligent Robots and
Systems (IROS), 2011 IEEE/RSJ International Conference on, pages
4790–4796, 2011.
[19] S. Yun, D. A. Hjelle, H. Lipson, and D. Rus. Planning the reconﬁgura-
tion of grounded truss structures with truss climbing robots that carry
truss elements. In Proc. of IEEE/RSJ IEEE International Conference
on Robotics and Automation, Kobe, Japan, May 2009.
[20] Seung-kook Yun and D. Rus. Adaptation to robot failures and shape
change in decentralized construction. In Robotics and Automation
(ICRA), 2010 IEEE International Conference on, pages 2451–2458,
2010.
[21] Seung-kook Yun, Mac Schwager, and Daniela Rus. Coordinating
construction of truss structures using distributed equal-mass partition-
ing. In Cdric Pradalier, Roland Siegwart, and Gerhard Hirzinger,
editors, Robotics Research, volume 70 of Springer Tracts in Advanced
Robotics, pages 607–623. Springer Berlin Heidelberg, 2011.
VI. PROOFS
Proof: 1 (Smallest dominating f-continuous function):
The proof proceeds in three steps, ﬁrst we show thatP
f
[h]
is f-continuous, second that it is dominating, and third that
it is the smallest such function.
To prove f-continuity, assume to the contrary that
P
f
[h](x) is not f-continuous. Then ? x,x
?
? Q s.t.
|P
f
[h](x) ? P
f
[h](x
?
)| > f(|x ? x
?
|). Without loss of
generality, assume that P
f
[h](x
?
)<P
f
[h](x). Dropping the
absolute value and rearranging terms gives:
P
f
[h](x)?f(|x?x
?
|) > P
f
[h](x
?
)
or
max
y?Q
{h(y)?f(|x?y|}?f(|x?x
?
|)
> max
y
?
?Q
{h(y
?
)?f(|x
?
?y
?
|)}. (15)
Choosing, the possibly sub-optimal value, y
?
= y for the
smaller term yields
h(y)?f(|x?y|)?f(|x?x
?
|)>h(y)?f(|x
?
?y|).
Sub-additivity and monotonicity of f lead to the following
contradiction
f(|x
?
?y|)>f(|x?y|)+f(|x?x
?
|)
≥ f(|x?y|+|x?x
?
|)≥f(|x
?
?y|).
Thus, P
f
[h](x) is f-continuous.
To show thatP
f
[h] dominatesh, note that in the deﬁnition
in Eqn. 7 the maximization is over all elementsy?Q, since
x?Q andf(0) = 0, the value of the new functionP
f
[h](x)
at x is at least as large as h(x).
Finally, to show P
f
[h] is the smallest dominating f-
continuous function, let g,h?Q
+
be two functions where
g ≥ h and g is f-continuous. Assume to the contrary that
?x ? Q s.t. P
f
[h](x) > g(x). By the deﬁnition of P
f
[h]
?x
?
?Q s.t.
h(x
?
)?f(|x
?
?x|)>g(x).
Since g≥h,
g(x)<h(x
?
)?f(|x
?
?x|)≤g(x
?
)?f(|x
?
?x|)
leads to a contradiction about the f-continuity of g
f(|x
?
?x|)<g(x
?
)?g(x)≤|g(x
?
)?g(x)|.
Thus P
f
[h] is the smallest f-continuous function that dom-
inates h.
Proof: 2 (Preserved order of f): Given two functions
f,f
?
? R
+
? R
+
that fulﬁll condition (6) where f ≤ f
?
and an arbitrary structure h ? Q
+
, then P
f
?[h] ≤ P
f
[h].
The proof follows directly from the deﬁnition Eqn. (7), since
every point in P
f
?[h] is smaller (subtracts more) than P
f
[h].
444
