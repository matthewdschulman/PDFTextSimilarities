Hierarchical Trafﬁc Control for Partially Decentralized Coordination of
Multi AGV Systems in Industrial Environments
Valerio Digani, Lorenzo Sabattini, Cristian Secchi and Cesare Fantuzzi
Abstract— This paper deals with decentralized coordina-
tion of Automated Guided Vehicles (AGVs). We propose a
hierarchical trafﬁc control algorithm, that implements path
planning on a two layer architecture. The high-level layer
describes the topological relationships among different areas
of the environment. In the low-level layer, each area includes
a set of ﬁxed routes, along which the AGVs have to move. An
algorithm is also introduced for the automatic deﬁnition of the
route map itself. The coordination among the AGVs is obtained
exploiting shared resources (i.e. centralized information) and
local negotiation (i.e. decentralized coordination). The proposed
strategy is validated by means of simulations using real plant.
I. INTRODUCTION
This paper deals with the path planning and coordina-
tion of multiple Automated Guided Vehicles (AGVs) in
an automated warehouse.Coordinated motion of groups of
autonomous vehicles is a relevant topic in the ﬁeld of mobile
multi-robot systems, and has thus been widely addressed in
the literature (see, for instance, the recent papers [1], [2] and
references therein). Generally speaking, main approaches can
be divided into two categories: centralized and decentralized.
The main advantage of centralized approaches is that they
can theoretically ﬁnd optimal solutions [3]. The main issue is
instead represented by the complexity of the problem, which
grows exponentially with the number of robots [4].
Decentralized techniques are generally faster than central-
ized ones, but they present several drawbacks, such as failing
in ﬁnding valid paths for all robots due to deadlocks [5], [6].
In general, both centralized and decentralized methods
exploit a route map to reduce the search space [3], [7]. As
explained in [10], a hierarchical route map can also abstract
the traversable areas using the adequate number of nodes and
edges of a graph. It is worth noting that the performance
of the coordination algorithm is strongly related to the
characteristics of the route map where the coordination itself
is performed. An evidence of this claim can be found, for
instance, in the common necessity of deﬁning speciﬁc trafﬁc
rules to overcome local issues [9]. Hence, even though the
design of the route map and the subsequent coordination are
strongly related problems, in the literature they are generally
treated in a separate manner, to the best of the authors’
knowledge. In fact, while several strategies can be found
in the literature for the deﬁnition of a route map [11], [12],
Authors are with the Department of Science and Methods
for Engineering (DISMI), University of Modena and Reggio
Emilia, Italy fvalerio.digani,lorenzo.sabattini,
cristian.secchi, cesare.fantuzzig@unimore.it
This paper is written within PAN-Robots project. The research leading
to these results has received funding from the European Union Seventh
Framework Programme (FP7/2007-2013) under grant agreement n. 314193.
none of them consider the subsequent coordination that will
be performed along the route map itself, during the daily
industrial operations.
The contribution of this paper is on the deﬁnition of a
methodology to solve the coordination problem in a holistic
manner, providing a solution that simultaneously optimizes
the creation of the route map and the coordination of the
AGVs. In particular:
1) We deﬁne an algorithm for the automatic deﬁnition of
the optimal route map, given the geometry of the plant,
in such a way that the subsequent coordination of AGVs
on the route map itself can be dealt with in an automatic
and optimal manner
2) We introduce a hierarchical control architecture [5] for
the coordination of a ﬂeet based on two layers. The ﬁrst
layer is a topological graph of the plant where each node
is a macro-area of the environment. The second layer
is the real route map on which the AGVs move
3) We present a partially decentralized control strategy for
the coordination of multi AGV systems. Each AGV au-
tonomously computes its path, on both layers, exploiting
shared information regarding the state of the ﬂeet
Preliminary results on this topic were introduced in [13].
II. PROBLEM STATEMENT
In this paper we will present a combined strategy for the
path planning and route map creation in order to coordinate
multiple AGVs. The coordination is achieved considering
both aspects.
A route map is a set of routes as a highway, and it is
composed by distinguished elements called segments. The
AGVs are constrained to follow the route map and its
segments. We ﬁrst introduce the deﬁnition of a path on a
route map.
Deﬁnition 1 Paths Given a route map, a path is a set of
consecutive segments.
Geometrically a path is a spline, that is, a piecewise poly-
nomial function. A path can be assigned to an AGV , that is
then allowed to move along the segments in the path.
We introduce the following deﬁnition of admissible set of
paths.
Deﬁnition 2 Admissible set of paths Given a ﬂeet ofN
AGVs, a set ofN paths is admissible if, assigning each path
to a different AGV , a velocity proﬁle can be deﬁned in such
a way that collisions are avoided.
The problem can be formally stated as follows:
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 6144
Problem 1 Multi AGV path planning Consider:
 a ﬂeet ofN AGVs
 a route map
 the initial and ﬁnal positions for all the AGVs
Deﬁne an admissible set of paths such that each AGV is able
to move from its initial position to its assigned ﬁnal position.
Therefore, the problem consists of planning a path for a
ﬂeet of AGVs in an 2D static environment, so that conﬂicts
and deadlocks are avoided. Each AGV starts its path in
an initial position, and has to reach its own pick/drop
position. Each AGV can communicate with the others in its
neighborhood and has a prior knowledge of the environment.
The following Assumptions are made on the system:
A1 No unforeseen events, such as the presence dynamic
obstacles (manual forklift, people, etc.) are considered.
A2 Each AGV has prior knowledge of the geometry of the
sectors and of the route map.
It is worth noting that removing Assumption 1 would lead
to the solution of the dynamic version of the multi AGV path
planning problem, in which the set of paths initially deﬁned
has to be modiﬁed in case of unforeseen events.
The task assignment (that is, the goal given to each AGV)
is out of the scope of this paper, and will therefore not be
considered.
III. AUTOMATIC ROUTE MAP
The design of the route map is an optimization problem.
In detail, the problem is faced in two sequential steps: the
ﬁrst step is based on a topological representation of the
environment and the second step on a geometrical one.
A. Topological Optimization
The topological optimization process coincides with the
all-pair shortest path problem, which is formulated as:
Deﬁnition 3 All-Pair Shortest Path Problem Given a
weighted graph (V , E) with weight function w : E ! R,
determine the set of paths that connect all pairs of vertices
in G, with the minimum overall length.
The objective is then to ﬁnd the shortest path between
each pair of nodes. In our case, the nodes are the working
stations (pick/drop locations) of the warehouse.
The process starts with a complete undirected graph in
which the nodes are the stations and the edges are the
links between them. A weight is assigned to each edge.
The objective of this step is to reduce the complete graph
removing the less favorable edges. In this way we obtain a
reduced graph whose edges deﬁne the shortest paths between
each pair of nodes.
The all-pair shortest path problem is resolved by using
the Floyd-Warshall algorithm (complexity O(jVj
3
), whereV
is the number of nodes) [14]. The core of the topological
optimization regards the calculation of the weight to assign
to each edge. The outcome is to ﬁnd the shortest path among
each pair of nodes, in such a way that the distances and the
obstacles are taken in account.
We introduce a weight w
ij
for each edge between the
nodes i and j, computed in a heuristic manner as follows:
w
ij
= (D
ij
+
O
X
k=1
 
ijk
P (k))!

; w
ij
2R (1)
Where:
 D
ij
2R is the Euclidean distance between the node i
and the node j. The Euclidean distance represents the
ideal (straight path) length of the path.
 P (k) represents the perimeter of the convex hull around
the k-th obstacle, while O is the total number of
obstacles in the environment. The term 
ijk
2f0; 1g
is equal to 1 if the straight path between node i and
nodej intersects obstaclek, zero otherwise. Therefore,
the term
O
X
k=1
 
ijk
P (k) takes in account the number and
the size of the obstacles crossed by the straight path
between i and j. In fact, due to the obstacles, the real
path will be different from the straight one, and the
distance will be higher. Therefore a penalty is used to
give a heuristic approximation of the real distance. The
heuristic is needed in order to gather the real possibility
to cross an obstacle during the geometric path process.
 !

2f1; 1:5; 2g is the penalty factor which is computed
in an empirical manner to take into account the direction
of the preferred material ﬂow in the warehouse. In
any warehouse, in fact, this preferred ﬂow can be
deﬁned: for instance, material is often transferred from
the production area to the storage area, while the
opposite ﬂow is less utilized. Hence, this factor leads to
breaking symmetries: namely, paths between the same
pair of nodes with opposite directions are possible and
different. A path is then penalized if its direction is
opposite with respect to the material ﬂow. In particular,
we let the value !

assume three empirically deﬁned
values, based on the angle  between the vector of the
material ﬂow and the direction of the path:
!

=
8
>
>
>
>
>
>
<
>
>
>
>
>
>
:
2 if <
3
2
 (high penalty)
1:5 if

2
 or
3
2
< 2 (low penalty)
1 if 0<

2
(no penalty)
(2)
B. Geometrical Optimization
The second step of the route map process concerns the
real path design.
Without loss of generality, we deﬁne each segment of
the route map as a spline, that is a piecewise polynomial
function. Assume hereafter that N is the number of the
splines and M
j
is the number of pieces of the j-th spline
with degree ".
6145
Given a reference system u v, a piece of the spline is
expressed as:
v =
"
X
k=1
a
k
ij
u
" k
(3)
The parameters can be rewritten in compact form as:
a
ij
=

a
1
ij
a
"
ij

T
2R
"
(4)
Where a
ij
are the set of parameters of the i-th piece of the
j-th curve.
The problem consists of ﬁnding the shortest splines be-
tween the pair of nodes obtained from the topological opti-
mization. Therefore the parameters a
ij
are the variables to
be chosen in order to optimize the process. The optimization
variables can then be collected in the vector x, deﬁned as
follows:
x =

a
T
11
 a
T
M11
a
T
12
 a
T
M22
 a
T
1N
 a
T
M
N
N

T
2R
n
(5)
where n ="
P
N
j=1
M
j
.
The optimization problem can then be formulated as
follows:
minimize f (x) + Kkpk (6a)
subject to Ax =b (6b)
c (x) 0 (6c)
The problem is a nonlinear constrained optimization.
The linear constraints in Eq. (6b) are the boundary con-
ditions of the curves where A2 R
mn
and b2 R. A is
a block diagonal matrix, whose j-th block A
j
2 R
mj"
is
referred to the j-th curve, and its elements concern:
 Start and Goal position
 Initial and ﬁnal orientation
 Continuity and derivative among the pieces the spline
In order to deﬁne the nonlinear constraints, we ﬁrst
introduce the concept of distance between two objects. In
particular, when considering the distance between two ob-
jects in a two-dimensional space, we will refer to the Fr´ echet
distance [15]: loosely speaking, considering two curves, the
Fr´ echet distance is the length of minimum-length segment
connecting two points of these curves.
The nonlinear constraints in Eq. (6c) collect inequality
distance constraints. Speciﬁcally, let > 0 be the minimum
allowed distance between two curves, or between a curve and
an obstacle, deﬁned in order to avoid collisions. Moreover,
let
 d
j;o
(x) be the distance between the spline i and the
obstacle o. This value is required to be greater than 
for all the pairsj-o, to avoid collisions between an AGV
traveling on a path and an obstacle. Hence, constraints
on the distance between a spline and an obstacle are
hard constraints.
 l
j;z
(x) be the distance between the spline j and the
spline z. Preferable solutions deﬁne splines for which
this value is greater than  for all the pairs j-z. If
such an admissible solution is not available, violation
of this constraint is admissible: the presence of curves
whose distance is less than  can be managed creating
an intersection, as described in Section III-C. Hence,
constraints on the distance between two splines are soft
constraints.
On these lines, for each pair of splines j-z we introduce
the variablep
j;z
 0, and we deﬁne
j;z
(x) =l
j;z
(x)+p
j;z
:
as will be subsequently clariﬁed, the presence of the term
p
j;z
deﬁnes the constraint as soft. The distances can then be
collected into the vector  (x)2R
ON
2
 (N  1)
2
, deﬁned
as follows:
 (x) = [d
1;1
 d
N;O

1;2
 
1;N
 
N 1;N
]
T
(7)
where N is the number of splines and O is the number of
obstacles.
The constraints are then collected in the vector c(x)
deﬁned as follows:
c(x) =  (x) +1 (8)
where 1 is a vector of all ones of opportune dimension.
The objective function in Eq. (6a) is composed of two
terms. The termf(x) represents the total length of geometric
paths, and is deﬁned as follows:
f(x) =
N
X
j=1
Mj
X
i=1
Z
X
ij
f
X
ij
s
p
1 +jv
0
j
2
du (9)
whereN is the number of curves,X
ij
s
andX
ij
f
are the start
and ﬁnal point of the i-th piece of the j-th curve and v
0
is
the derivative of thei-th piece of thej-th curve with respect
to u.
Let the vector p2R

, where  =
N!
2! (N!  2!)
, collect
all the variables p
j;z
. Therefore, the term Kkpk in the
objective function deﬁnes the soft constraints regarding the
distances among the curves. In fact, minimizingkpk leads
to the minimum violation of the constraint on the distance
between two curves. The parameter K > 0 is a tuning gain,
to be determined empirically.
C. Route map properties
Once the geometrical optimization has been performed,
the route map is deﬁned as a set of unidirectional segments:
this property is useful for coordination purposes, since it is
not possible to have pathological situations, such as two (or
more) AGVs moving along the same segment with opposite
directions.
In the case that a segment intersects one or more other
segments, an intersection has to be deﬁned. As will be
clariﬁed in the following Sections, intersections are consid-
ered as shared resources, to be allocated to a single AGV
when necessary. As shown in Fig. 1a, each intersection is
characterized by the presence of a cross point and a certain
number of attention points. These points are deﬁned as
follows:
6146
 Cross points: it is the point in common among two or
more segments
 Attention points: for each segment entering the inter-
section, an attention point is deﬁned in such a way that,
if an AGV stops on the attention point itself, it does
not collide with AGVs in the cross point, or in other
attention points. It is worth noting that the deﬁnition of
the attention points is based on the size and shape of
the AGVs used in the particular application.
(a) A Route map intersec-
tion
(b) General route map in a sec-
tor
Fig. 1: Route map properties
IV. TWO LAYER CONTROL ARCHITECTURE
The problem of coordinating an elevated number of AGVs
is faced in this Section splitting the control through a multi-
layer architecture. In our approach, two layers are used.
The top-layer, or Topological Layer, is a topological map
representing the global map, with different macro-cells called
sectors. The layer below, or second layer, is the geometric
map of each sector of the ﬁrst layer, and will be hereafter
referred to as Route Map Layer.
Therefore the path planning is done on two levels. Topol-
ogy path planning searches for the best path to the ﬁnal goal
(actually to the ﬁnal sector where the real goal is) from the
current sector. Route map planning computes the path on the
route map and handles the coordination inside the sector.
A. Topological layer
The ﬁrst layer is the most abstract layer, it is generated
by a subdivision of the geometric layout in several sectors.
1) Sector division: The layer gives a topological repre-
sentation of the real map by means of an unidirected graph.
Each node of the graph is a sector. A sector is an area, or a
region, which can be distinguished from the other ones based
on the following properties:
 topological aspects
 logistical aspects
 geometrical aspects
 constraints
The topological information regards the connection among
the sectors. In detail, a sector is deﬁned in such a way that
a connection with neighboring sector exists. The constraints
are deﬁned based on the characteristics of the operational
environment. For instance, constraints can be deﬁned in
terms of maximum number of AGVs contained in a single
sector, or in terms of maximum number of operations of
loading/unloading. This kind of information is owned by
the sectors and it is stored in a centralized manner. In this
way, the information is visible to all the AGVs and is shared
among them from the centralized storage.
2) Path planning on the topological layer: The informa-
tion owned by the sectors are used to plan the sub-optimal
route for an AGV . Each vehicle has to reach its destination
minimizing the length of the path.
It is worth remarking that each AGV autonomously plans
its path, as soon as it is assigned a destination. As task assign-
ment is generally asynchronous, path planning is performed
in an asynchronous manner as well. Therefore, the future
position of other AGVs is unknown in advance.
Hence, each AGV computes is path from the start sector
to the goal one exploiting the D* algorithm [16], combined
with a MPC (Model Predictive Control [17]) mechanism.
Namely, at each step, the AGV checks if the previously
assigned path is still admissible. According to the MPC
approach, at each step a prediction horizon is deﬁned, along
which the corresponding portion of the path is computed.
This combined approach is needed in order to re-plan in
dynamic manner the path. In particular the re-planning event
is performed based on the trafﬁc congestion (i.e. number
of AGVs) of the planned sectors in the prediction horizon.
This approach provides an optimal local solution but a sub-
optimal global one, because only the part of the path inside
the horizon is interested by the optimization.
The procedure is summarized in Algorithm 1: in this
algorithm, the vector path contains the list of sectors in the
planned path, the term H is the prediction horizon, and the
index i identiﬁes the current step.
Algorithm 1: Path planning on the topological layer
1 while path[i]6= goal do
2 path[i :i +H] = D*;
3 go to path[i + 1];
4 end
B. Route Map layer
Inside each sector the coordination among AGVs is
needed. The second layer manages the real path following on
the route map (created according to the procedure describes
in Section III) and the avoidance of deadlocks and conﬂicts
among AGVs or among AGVs and obstacles. The coordina-
tion is managed locally (in each sector) in a decentralized
manner. With this hierarchical architecture it is possible to
simplify the whole control in order to focus the coordination
of the AGVs only inside each sector in a local way.
Each AGV has to compute a path to reach the next planned
sector on the topological layer. The path planning inside a
sector consists of assigning a set of segments to each AGV .
The algorithm used to ﬁnd the path is the simple A*. The
choice is due to the fact that the route map is ﬁxed, and local
dynamic changes are not considered.
6147
The path planning strategy is based on the assumption that
each AGV has a prior knowledge of the geometry of the
sectors and of the route map, according to Assumption A2.
Conﬂicts among AGVs are managed by means of a
hybrid approach, combining a negotiation mechanism with
a resource allocation strategy In particular, the resource
(intersection) is allocated only to a single AGV in order to
avoid conﬂicts, and the negotiation permits to avoid dead-
locks. This process is managed locally, because it takes place
exclusively inside the sector: the AGVs share information
among each other, without the participation of a centralized
supervisor. The data exchange among AGVs concerns:
 AGV priority: each AGV is supposed to have a priority,
related to the task it is carrying on. If this priority is not
assigned a priori, several strategies can be found in the
literature for decentralized priority allocation (see e.g.
[18]).
 Intersection request: an AGV which is approaching an
intersection has to communicate this intention to the
others.
 Intersection allocation: an AGV that is allowed to go
through an intersection has to communicate this to the
others.
The coordination procedure is described in details in Algo-
rithms 2 and 3. In this algorithm, the termpos (AGV [i]) rep-
resent the position of thei-th AGV , while attention point [j ]
is the attention point related to the j-th intersection, iden-
tiﬁed as intersection [j ]. The term request [i;j] represents
the request of the i-th AGV for the allocation of the j-th
intersection. The term AGV [i]
p
is the value of the priority
of the i-th AGV and intersection [j ]
p
is the value of the
priority of the intersection j.
Algorithm 2: Coordination on the route map layer
1 if pos (AGV [i]) = attention point [j ] then
2 request [i;j] :=true;
3 if9k6=i such that request [k;j] =true then
4 Negotiation;
5 else
6 AGV [i] :=winner;
7 end
8 if AGV [i] =winner and intersection [j ] =free
then
9 move;
10 request [i;j] :=false;
11 else
12 stop;
13 go to line 2;
14 end
15 end
V. SIMULATIONS
In order to evaluate the proposed methodology, several
simulations have been implemented in Matlab. A real plant
Algorithm 3: Negotiation
1 if AGV [i]
p
< intersection [j ]
p
then
2 intersection [j ]
p
:=AGV [i]
p
;
3 end
4 if AGV [i]
p
> intersection [j ]
p
then
5 return;
6 end
7 if AGV [i]
p
= intersection [j ]
p
then
8 AGV [i] :=winner;
9 return;
10 end
of a warehouse has been used to build the automatic route
map and to test the coordination algorithm.
An example of route map generation is shown in Fig. 2.
For the sake of clarity, we provide a simple example, with
only four operation points: in this manner, the effect of the
topological and geometrical optimization can be effectively
interpreted by the reader. Hence, Fig. 2a shows the ﬁrst
step of the topological optimization, where a complete graph
among the operation points is drawn. The next step reduces
the graph as shown in Fig. 2b according to the all-pair
shortest path algorithm. The geometric route map is then
built as a composition of linear splines, as shown in Fig. 2c. It
is worth noting that a feasible solution can always be found.
Subsequently the coordination algorithm has been tested
on a simulated environment. In order to evaluate the per-
formance of the proposed methodologies, repeated test have
been conducted under the following conditions:
 the ﬂeet is composed by a variable number of AGVs: 5,
10, 15, 20. For each conﬁguration, 10 runs of simulation
have been performed
 layout divided into 25 sectors
 maximum limit of 4 AGVs allowed in each sector
 a queue of 25 tasks is generated randomly
 the simulation stops when all the AGVs reach their
goals and the queue of tasks is empty
 the priority is generated randomly for each AGV
In order to simulate a ﬂeet of decentralized AGVs, the
algorithm is executed in a parallel manner by implementing
one single dedicated process per AGV . A statistical analysis
has been carried out in order to experimentally evaluate the
computational complexity of the algorithm. The results (see
Fig. 3) show that the elapsed time increases almost linearly
with the number of AGVs. It is worth noting that, as the
the number of AGVs increased, also the variance of results
increases. This is due to the high number of negotiations
which, depending on the random priority of the AGVs,
can provide different results on tests performed in similar
conditions.
The result of a typical simulation run is shown in the
accompanying video. The video shows the coordination of
a ﬂeet of 15 AGVs. The video shows a Matlab simulation
where the AGVs are presented as colored triangles moving
6148
(a) Toplogical optimization:
complete graph
(b) Toplogical optimization: re-
duced graph
(c) Geometrical optimization
Fig. 2: Route map generation
5 10 15 20
20
30
40
50
60
70
80
90
100
110
Number of AGVs
Elapsed time (s)
Elapsed time vs number of AGVs
 
 
Elapsed time standard deviation
Regression line
Fig. 3: Elapsed time versus number of AGVs
on a simulated real plant. The AGVs disappear after they
have arrived in the ﬁnal positions.
VI. CONCLUSION
The paper describes a coordination strategy for a ﬂeet
of AGVs, through an architecture based on a two-layer
approach. The presented idea tries to treat the planning and
the path optimization as a common entity. On these lines,
an automatic route map generation process is proposed that
autonomously deﬁnes a set of optimal paths among several
operation points.
The coordination and the trafﬁc management are treated
as global functions. In order to achieve this, a hybrid path
planning and coordination is achieved. The path planning is
split on the two layers in order to simplify the problem. The
path planning executed by each AGV is totally decentralized,
but the information about the occupation of the sectors is
managed in a centralized way. The local coordination is
also totally decentralized. In this case, the AGVs share the
information among them in order to negotiate the access to
the shared resources (i.e. the intersections).
The simulations have shown that it is easily possible to
manage a high number of AGVs with this approach avoiding
conﬂicts among them. Current work aims at formally analyz-
ing the complexity of the proposed algorithm in an analytic
manner. Several strategies will be also studied in order to
optimize the coordination and to include a task allocation
mechanism as part of the coordination itself. Moreover,
future works will aim at implementing the proposed approach
on a real system working in an industrial plant, in order to
compare the performances of the proposes approach with
the current centralized system used in a real automatic
warehouse and with the current manual built route map.
REFERENCES
[1] Y . Zhang and H. Mehrjerdi, “A survey on multiple unmanned vehicles
formation control and coordination: Normal and fault situations,” in
International Conference on Unmanned Aircraft Systems (ICUAS).
IEEE, 2013, pp. 1087–1096.
[2] S. Hoshino and H. Seki, “Multi-robot coordination for jams in con-
gested systems,” Robotics and Autonomous Systems, 2013.
[3] S. LaValle and S. Hutchinson, “Optimal motion planning for multiple
robots having independent goals,” IEEE Transactions on Robotics and
Automation, vol. 14, no. 6, pp. 912–925, 1998.
[4] T. Simeon, S. Leroy, and J.-P. Lauumond, “Path coordination for mul-
tiple mobile robots: A resolution-complete algorithm,” IEEE Transac-
tions on Robotics and Automation, vol. 18, no. 1, pp. 42–49, 2002.
[5] W. Zhang, M. Kamgarpour, D. Sun, and C. Tomlin, “A hierarchical
ﬂight planning framework for air trafﬁc management,” Proceedings of
the IEEE, vol. 100, no. 1, pp. 179–194, 2012.
[6] M. Jager and B. Nebel, “Decentralized collision avoidance, deadlock
detection, and deadlock resolution for multiple mobile robots,” in
Proceedings of the IEEE/RSJ International Conference on Intelligent
Robots and Systems, 2001., vol. 3, 2001, pp. 1213–1219 vol.3.
[7] L. Makarem and D. Gillet, “Fluent coordination of autonomous
vehicles at intersections,” 2012 IEEE International Conference on
Systems, Man, and Cybernetics (SMC), pp. 2557–2562, Oct. 2012.
[8] R. Olmi, C. Secchi, and C. Fantuzzi, “Coordination of industrial
AGVs,” International Journal of Vehicle Autonomous Systems, vol. 9,
no. 1, pp. 5–25, 2011.
[9] L. Pallottino, V . G. Scordio, A. Bicchi, and E. Frazzoli, “Decentralized
Cooperative Policy for Conﬂict Resolution in Multivehicle Systems,”
IEEE Transactions on Robotics, vol. 23, no. 6, pp. 1170–1183, Dec.
2007.
[10] B. Park, J. Choi, and W. K. Chung, “An efﬁcient mobile robot
path planning using hierarchical roadmap representation in indoor
environment,” 2012 IEEE International Conference on Robotics and
Automation, pp. 180–186, May 2012.
[11] R. Geraerts and M. H. Overmars, “Creating high-quality roadmaps for
motion planning in virtual environments,” in IEEE/RSJ International
Conference on Intelligent Robots and Systems, 2006, pp. 4355–4361.
[12] R. Z. Farahani, E. Miandoabchi, W. Szeto, and H. Rashidi, “A review
of urban transportation network design problems,” European Journal
of Operational Research, 2013.
[13] V . Digani, L. Sabattini, C. Secchi, and C. Fantuzzi, “Towards decen-
tralized coordination of multi robot systems in industrial environments:
a hierarchical trafﬁc control strategy,” in IEEE International Confer-
ence on Intelligent Computer Communication and Processing (ICCP),
2013.
[14] R. W. Floyd, “Algorithm 97: Shortest path,” Commun. ACM, vol. 5,
no. 6, pp. 345–, Jun. 1962.
[15] M. Godau and H. Alt, “Computing the Fr´ echet distance between two
polygonal curves,” International Journal of Computational Geometry
and Applications, vol. 05, no. 01n02, pp. 75–91, 1995.
[16] A. Stentz, “Optimal and efﬁcient path planning for partially-known en-
vironments,” Proceedings of the 1994 IEEE International Conference
on Robotics and Automation, no. May, pp. 3310–3317, 1994.
[17] C. E. Garca, D. M. Prett, and M. Morari, “Model predictive control:
Theory and practicea survey,” Automatica, vol. 25, no. 3, pp. 335 –
348, 1989.
[18] N. A. Lynch, Distributed algorithms. Morgan Kaufmann, 1996.
6149
