A Self-triggered Visual Servoing Model Predictive Control Scheme for
Under-actuated Underwater Robotic Vehicles
Shahab Heshmati-Alamdari, Alina Eqtami, George C. Karras, Dimos V . Dimarogonas
and Kostas J. Kyriakopoulos
Abstract— This paper presents a novel Vision-based Nonlin-
ear Model Predictive Control (NMPC) scheme for an under-
actuated underwater robotic vehicle. In this scheme, the control
loop does not close periodically, but instead a self-triggering
framework decides when to provide the next control update. Be-
tween two consecutive triggering instants, the control sequence
computed by the NMPC is applied to the system in an open-
loop fashion, i.e, no state measurements are required during
that period. This results to a signiﬁcant smaller number of
requested measurements from the vision system, as well as less
frequent computations of the control law, reducing in that way
the processing time and the energy consumption. The image
constraints (i.e preserving the target inside the camera’s ﬁeld
of view), the external disturbances induced by currents and
waves, as well as the vehicle’s kinematic constraints due to
under-actuation, are being considered during the control design.
The closed-loop system has analytically guaranteed stability and
convergence properties, while the performance of the proposed
control scheme is experimentally veriﬁed using a small under-
actuated underwater vehicle in a test tank.
I. INTRODUCTION
Visual Servo Control has been extensively used in the past
for the autonomous operation of underwater robotic vehicles.
Complex missions such as ship hull inspection, surveillance
of underwater facilities (e.g oil platforms) and handling of
underwater equipment (e.g control panels, valves) require de-
tailed and continuous visual feedback which can be obtained
from either monocular or stereo vision systems.
In a standard underwater vehicle conﬁguration, the camera
is directly mounted on the robot (eye-in-hand camera system)
and the control error can be in general formulated in three
different ways: (i) Position-Based Visual Servoing (PBVS),
where the visual features extracted from the image are used
to estimate the 3D pose of the robot wrt the target; (ii) Image-
Based Visual Servoing (IBVS), where the control inputs are
determined directly on the 2D image plane based on the
error of the image features between the current and desired
images, and (iii) Hybrid Visual Servoing, where 3D PBVS
is combined with 2D IBVS [1],[2]. The motion control of an
Shahab Heshmati-Alamdari, George C. Karras and Kostas J.
Kyriakopoulos are with the Control Systems Lab, Department
of Mechanical Engineering, National Technical University of
Athens, 9 Heroon Polytechniou Street, Zografou 15780, Greece
fshahab,karrasg,kkyria@mail.ntua.grg. Dimos
V . Dimarogonas is with the KTH ACCESS Linnaeus Center and
the KTH Centre for Autonomous Systems, School of Electrical
Engineering, Royal Institute of Technology (KTH), Stockholm,
Sweden fdimos@ee.kth.seg. His work was supported
by the Swedish Research Council and the EU HYCON2 NoE.
Alina Eqtami is with Cardiovascular Surgery, Childrens Hospital
Boston, Harvard Medical School, Boston MA, 02115, USA.
falina.eqtami@childrens.harvard.edug.
Fig. 1: Problem Statement: Navigation and stabilization of the
vehicle wrt a visual target while maintain target inside camera’s
optical ﬁeld.
underwater vehicle is generally a highly nonlinear problem.
Moreover, real applications (e.g inspection and surveillance
tasks) impose constraints on the inputs and the states of the
vehicle (i.e visual and/or kinematic constraints). Nonlinear
Model Predictive controllers can efﬁciently handle nonlinear-
ities and constraints simultaneously [3] . However, as NMPC
schemes constitute in solving a constrained Optimal Control
Problem (OCP) at each instant, they are considered to be
computationally demanding. This motivates the event-based
design framework of the predictive controllers in order to
compute the control law only when is needed. The event-
based formulation of control tasks is a quite recent develop-
ment that can lead to the alleviation of energy consumption
as well as to the improvement of the requirements of the
computational resources. Under this formulation the decision
for the control update is based on a certain condition of
the state of the system which can lead not only to a more
ﬂexible aperiodic sampling but can also guarantee to preserve
necessary properties of the system such as stability and
convergence, [4]. More speciﬁcally, in the case of self-
triggered control only the latest state measurement needs to
be known for determining the next triggering instant. Some
relevant results for the self-triggered set-up can be found in
[5],[6], [7].
In this paper, a Self-triggered Position Based Visual Servo
NMPC scheme for the motion control of an under-actuated
underwater vehicle is presented. The purpose of this work
is to navigate and stabilize the vehicle towards a visual
target by using the proposed control framework and assuring
that the target will always remain inside the camera’s ﬁeld
of view (Fig. 1). The ﬁled of view (FOV) constraints are
handled by the explicit formulation of the visual constraints
inside the NMPC framework. The main contribution of this
work relies in the design of a framework that will provide
aperiodic control sequences that lead to stable closed-loop
responses and of a mechanism that will decide when these
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 3826
Fig. 2: Differential Drive Robot. Red color indicates no actuation
availability, while green color indicates actuation availability along
body frame axes.
control updates should occur. This results to the reduction
of the computational effort and the energy consumption
which are of utmost importance especially in the case
of Autonomous Underwater Vehicles (AUVs) where lean
computational algorithms and low energy consumption are
required. Some preliminary results on the self-triggered MPC
for nonholonomic systems are given in [8].
Experimental results of this kind of event-based formula-
tions are scarce in the literature,[9], [10], and to the best of
our knowledge this event-based set-up has never been used
before to control a real underwater vehicle.The performance
of our proposed control scheme is experimentally veriﬁed
using a small under-actuated underwater vehicle. The experi-
mental results are quite satisfying as the vehicle’s state vector
converges to a bounded set around the desired position and
the triggering instants are signiﬁcantly reduced with respect
to (wrt) the traditional time-triggered case. The remainder of
the paper is organized as follows: In Section II, the modeling
of the underwater vehicle with the imposed constraints and
uncertainties, the vision-based state estimation of the vehicle,
as well as the whole problem statement are presented.
Section III accommodates the robust stability analysis for the
NMPC scheme which leads to the self-triggered framework.
Section IV , illustrates the efﬁciency of the proposed approach
through a set of experimental results. Finally, Section V
concludes the paper.
II. PROBLEM FORMULATION
A. Mathematical Modeling
Generally an underwater vehicle is considered as a 6
DOF free body with position and Euler angle vector x =
[x y z   ]
T
. The body velocities vector is deﬁned as
v = [u w pq r]
T
where the components are surge, sway,
heave, roll, pitch and yaw respectively (Fig.2). The general
form of the kinematic equations of an underwater vehicle is
given [11]:
_ x =J(x)v (1)
where: J(x) is the Jacobian matrix transforming the veloci-
ties from the body-ﬁxed to earth-ﬁxed frame. The vehicle
used in this work is a 3 DOF VideoRay Pro ROV . It is
equipped with three thrusters, which are effective only in
surge, heave and yaw motion (Fig.2), meaning that the
vehicle is under-actuated along the sway axis. The angles
,  and angular velocities p and q are negligible and we
can consider them to be equal to zero. Due to the above
assumption and the relative low speed of the vehicle, we
only consider the kinematic model of the vehicle, which in
its discrete-time form is formulated as follows [11]:
x
k+1
=f(x
k
;V
k
) +g(x
k
;v
k
))
2
6
4

k+1
y
k+1
z
k+1
 
k+1
3
7
5 =
=
2
6
4

k
y
k
z
k
 
k
3
7
5 +
h
2
6
4
cos 
k
0 0
sin 
k
0 0
0 1 0
0 0 1
3
7
5
2
4
u
k
w
k
r
k
3
5
+
2
6
4
  sin 
k
cos 
k
0
0
3
7
5v
k
i
dt (2)
where x = [
k
;y
k
;z
k
; 
k
]
>
denotes the state vector at the
time-step k which includes the position and orientation of
the vehicle wrt the target frameG. The control input of the
system is V
k
= [u
k
;w
k
;r
k
]
>
and dt denotes the sampling
period. In [12], it was proven that for any vehicle described
by (2), for any bounded control input [u
k
;r
k
] the velocity
about the sway direction v
k
can be seen as a bounded
perturbation with upper boundjjv
k
jj  v that vanishes at
the point x = 0. Consequently, this point is an equilibrium
of the kinematic system of (2). Note that throughout this
paper the notation (  ) will denote the upper bound for each
of the variables. Therefore we consider the system:
x
k+1
=f(x
k
;V
k
))
2
6
6
4

k+1
y
k+1
z
k+1
 
k+1
3
7
7
5
=
2
6
6
4

k
y
k
z
k
 
k
3
7
7
5
+
2
6
6
4
cos 
k
0 0
sin 
k
0 0
0 1 0
0 0 1
3
7
7
5
2
4
u
k
w
k
r
k
3
5
dt (3)
As the nominal kinematic system of the underwater vehi-
cle. The function g() is considered as a bounded inner
disturbance of the system that vanishes at the origin. Also,
g(x
k
;v
k
)2  R
4
with   to be a compact set, such that:
jjg(x
k
;v
k
)jj   with  ,  vdt (4)
The robot moves under the inﬂuence of an irrotational current
which behaves as an external disturbance. The current has
components wrt the,y andz axes, denoted by

,
y
and
z
respectively. Also it has a slowly-varying velocity
c
which is
upper bounded byjj
c
k
jj


c
and it has direction in y
plane and  in z axes, wrt the global frame, see Fig.3. In
particular we set 
k
= [
(=k)
;
(y=k)
;
(z=k)
; 0]
>
2 R
4
with  to be a compact set, where:

(=k)
,
c
k
 cos sindt

(y=k)
,
c
k
 sin sindt

(z=k)
,
c
k
cosdt (5)
It is easy to show thatjj
k
jj

, with

 =


c
dt. Taking into
consideration the aforementioned disturbances that affect the
vehicle, we are now ready to model the perturbed system as
follows:
x
k+1
=f(x
k
;V
k
) +!
k
(6)
with !
k
=g(x
k
;v
k
) +
k
2 
R
4
as the result of adding
the inner and external disturbances of the system. 
 is a
compact set such that 
 =   , where “” denotes the
Minkowski addition of two sets. Since the sets  and   are
compact, it yields that 
 is also a compact set, bounded by
3827
jj!
k
jj  ! with  !,

 +  .
The robot is equipped by a vision system that includes
a pinhole camera with limited angles of view a and b for
 y and  z plane respectively, see Fig.3. The FOV
Fig. 3: Modeling of the state constraints (8a)-(8c) imposed by the
sensor system and modeling of the external disturbance (5).
constraints of the system can be described as: [ y
T
;y
T
]
[f
y=1
;f
y=2
] and [ z
T
;z
T
]  [f
z=1
;f
z=2
], where 2y
T
and 2z
T
are the width and height of the target respectively.
Also [f
y=1
;f
y=2
] and [f
z=1
;f
z=2
] are the camera’s ﬁeld-
of-view on y and z plane respectively. Moreover, the
vehicle should not exceed the maximum distance R
max
at
which the target is visible and recognizable to the vision sys-
tem. These requirements are captured by the state constraint
set X of the system, given by:
x
k
2XR
4
(7)
which is formed by the following constraints:
 y + tan(  
a
2
) yT 0; y  tan( +
a
2
) yT 0
(8a)
 z  tan(
b
2
) zT 0; z  tan(
b
2
) zT 0 (8b)
R
2
max
 
2
 y
2
 0 (8c)
Furthermore, the control constraint set V
set
is assumed to
be compact and is given by:
V
k
, [u
k
;w
k
;r
k
]2V
set
R
3
(9)
The constraints of the input are of the formjuj  u ,jwj  w
andjrj  r, therefore we getkV
k
k

V where

V = ( u
2
+
 w
2
+  r
2
)
1
2
and

V;  u;  w;  r2R
0
. It can be shown that the
nominal system (3) is Lipschitz continuous with Lipschitz
constant 0<L
f
<1. More speciﬁcally,
Lemma 1: The nominal model (3), subject to constraints
(8a)-(8c) and (9), is locally Lipschitz in x for all x2 X,
with a Lipschitz constant L
f
, (maxf8; 8( udt)
2
g + 1)
1
2
.
B. Control Design and Objective
The goal is to control the actual system (6) subject to the
state constraints of (8a)-(8c) and the control constraints (9),
to a desired compact set that includes the desired statex
d
,
[
d
;y
d
;z
d
; 
d
]
T
2X. A predictive controller is employed in
order to achieve this task. With the NMPC law the state of the
system is proven to converge to the desired set. The design of
the ISS predictive controller for system (6) is presented next.
The NMPC consists in solving an Optimal Control Problem
(OCP) wrt a control sequenceV
f
(k), for a prediction horizon
N. The OCP of the NMPC is given as follows:
min
V
f
(k)
JN (x
k
;V
f
(k)) = (10a)
min
V
f
(k)
N 1
X
j=0
F (^ x(k +jjk);V (k +jjk)) +E(^ x(k +NjK))
subject to
^ x(k +jjk)2Xj; 8j = 1;:::;N  1; (10b)
V (k +jjk)2Vset; 8j = 0;:::;N  1; (10c)
^ x(k +Njk)2 E
f
(10d)
Where E
f
is the terminal set and F and E are the running
and terminal cost function, respectively. The vector ^ x(k +
jjk) denotes the predicted state of the nominal system (3)
at sampling time k +j with j2 Z
0
. The predicted state
is based on the measurement of the state x
k
of the actual
system at sampling time k, while applying a sequence of
control inputs {V
k
;:::;V
k+j 1
}. Thus:
^ x(k +jjk) =f(^ x(k +j  1jk);V
k+j 1
)
It holds that ^ x(kjk) = x
k
. Furthermore, the following
preliminary result can be obtained:
Lemma 2: The difference between the actual state x
k+j
at the time-stepk+j and the predicted state ^ x(k+jjk) at the
same time-step, under the same control sequence, is upper
bounded by:
jjx
k+j
  ^ x(k +jjk)jj
j 1
X
i=0
(L
f
)
i
 w (11)
In Lemma 2, the difference between the actual state
trajectory of system (6) and the predicted state trajectory of
the nominal system is obtained. To address this divergence,
we used a restricted constraint set X
j
X instead of state
constraint set X into (10b) (see [13] and [14] for more
details). Let the cost function F (), as well as the terminal
cost E(), to both be of quadratic form, i.e., F (^ x;V ) =
^ x
>
Q^ x +V
>
RV and E(^ x) = ^ x
>
P ^ x, respectively, with P ,
Q and R being positive deﬁnite matrices. Particulary we
deﬁne Q = diag{q
1
;q
2
;q
3
;q
4
}, R = diag{r
1
;r
2
;r
3
} and
P =diag{p
1
;p
2
;p
3
;p
4
}. For the running cost function F ,
it is easy to show that F (0; 0) = 0,
Lemma 3: For the cost function F (x;V ) it holds that:
F (x;V )min(q
1
;q
2
;q
3
;q
4
;r
1
;r
2
;r
3
)jjxjj
2
(12)
The state and input constrained sets are bounded, therefor it
can be derived:
Lemma 4: The cost functionF (x;V ) is Lipschitz contin-
uous in XV
set
, with a Lipschitz constant:
L
F
= 2(R
2
max
+z
2
max
+ (

2
)
2
)
1
2

max
(Q) (13)
Where 
max
(Q) is the largest singular value of matrix Q
and z
max
= R
max
 tan(
b
2
) is the maximum feasible value
along z-axes.
In order to assert that the NMPC strategy results in a robust
stabilizing controller, some stability conditions are stated as
follows:
3828
Assumption 1: For the nominal system (3), there is an
admissible positively invariant set E  X such that the
terminal region E
f
 E . Where E = {x2X :jjxjj"
0
}
and "
0
being a positive parameter.
Assumption 2: We assume that in the terminal set E
f
,
there is a local stabilizing controller V
k
=h(x
k
)2V
set
for
allx2E , and an associated Lyapunov functionE such that
E(f(x
k
;h(x
k
))) E(x
k
)+F (x
k
;h(x
k
)) 0 for allx2E .
Assumption 3: The associated Lyapunov function for the
terminal region is Lipschitz in E , with Lipschitz constant
L
E
= 2"
0

max
(P ) for all x2E .
Assumption 4: Inside the set E we have E(x) =
x
T
Px  
"
, where 
"
= max{p
1
;p
2
;p
3
;p
4
}"
2
0
> 0.
Assuming that E = {x 2 X
(N 1)
: h(x) 2 V
set
} and
taking a positive parameter 
"
f
such that 
"
f
2 (0;
"
), we
assume that the terminal set E
f
= {x2R
3
:E(x)
"
f
}
is such that8x2E , f(x;h(x))2E
f
.
C. Problem Statement
The solution of the OCP (10a)-(10d) at a time-step k
provides an optimal control sequence V

(). The classic
framework of the MPC consists in applying to the system
only the ﬁrst control vector, i.e., V

(kjk) and to discard all
the remaining elements of the sequence. At the next time-step
k + 1, new state measurements are received and the whole
procedure is repeated again. This is iteratively repeated until
the system has reached to the desired terminal set. However,
the self-triggering framework suggests that a portion of the
computed control sequence may be applied to the system and
not only the ﬁrst vector. Suppose a triggering instantk
i
. The
control sequence that is applied to the plant is of the form
fV

(k
i
jk
i
);V

(k
i
+ 1jk
i
);:::V

(k
i
+d
i
jk
i
)g (14)
for all d
i
2 [0;k
i+1
 k
i
], where k
i+1
is the next triggering
instant. During the time interval [k
i
;k
i+1
) the control law
is applied to the plant in an open-loop fashion i.e., no state
measurements from the system are received. A question that
naturally arises is how large this time interval can be? Notice,
though, the smallest time interval is obviously 1, that is if
k
i+1
= k
i
+ 1 and that the largest time interval is N 
1. The self-triggered strategy that will be presented later in
this paper, answers to this question and provides sufﬁcient
conditions for ﬁnding the recalculation periods, or in other
words sufﬁcient conditions for triggering the computation of
the NMPC law. This leads us to the statement of the problem
treated in this paper:
Problem Statement 1: Consider the system (6) that is sub-
ject to constraints (7) and (9). The objective is (i) to design
a feedback control law provided by (10a)-(10d) such that the
system (6) converges to the terminal constraint set and (ii)
to ﬁnd a mechanism to decide when the next control update
should be.
III. STABILITY ANALYSIS OF SELF-TRIGGERING NMPC
FRAMEWORK
It can be proven that the closed-loop scheme (6)-(14) is
ISS wrt the disturbances, [15]. Moreover, through the ISS
analysis it is possible to reach to a self-triggering mechanism
which provides the triggering instants. The proof of the sta-
bility of a system under the NMPC consists in guaranteeing
(i) the feasibility property and (ii) the convergence property
of the closed-loop system.
We begin by showing that initial feasibility implies feasi-
bility afterwards. Consider two successive triggering events
k
i
andk
i+1
. A feasible control sequence
~
V (k+jjk+m), for
time steps m = 0;:::;N  1, based on the optimal solution
at the time-step k  1, is given by:
~
V (k +jjk +m) = (15)

V

(k +jjk  1) for j =m;:::;N  2
h(^ x(k +jjk +m)) for j =N  1;:::N +m  1
From the feasibility of the initial sequence at time-stepk 1
and with the help of Assumption 2, it follows that for m =
0;:::N  1 we have
~
V (k +jjk +m)2 V
set
. It could be
proven that ^ x(k +Njk +m)2E
f
for allm = 0;:::;N  1.
The state convergence of the perturbed system to a desired
terminal set is going to be shown in the sequel. A proper
value function must be shown to be decreasing in order to
prove stability of the closed-loop system. The optimal cost
will be used as a natural Lyapunov function candidate for
the stability analysis.
At the time-step k  1, the optimal cost is denoted as
J

(k  1), which is evaluated under the optimal control
sequence. Analogously, the optimal cost at a time-stepk+m
with m 2 [0;N  1] is denoted as J

(k +m). Now let
~
J
N
(k +m) to denote the “feasible” cost, evaluated from the
control sequence (15). This “feasible” cost will help us to
obtain the differenceJ

(k+m) J

(k 1). In particular the
difference between the feasible sequence at time-step k +j
and the optimal cost at time k  1 using (15) is given by:
J
m
=
~
J
N
(k +m) J

N
(k  1) =

 
L
E
 (L
f
)
(N (m+1))
+L
F

N (m+2)
X
i=0
(L
f
)
i
!
 w
 
m 1
X
i= 1
min(q
1
;q
2
;q
3
;q
4
;r
1
;r
2
;r
3
)jj^ x(k +ijk  1)jj
(16)
The optimality of the solution yields
J

N
(k +m) J

N
(k  1)
~
J
N
(k +m) J

N
(k  1)
(17)
The Lyapunov functionJ

() has been proven to be decreas-
ing, thus the closed-loop system converges to a compact set
E
f
, where it is ultimately bounded, due to Assumption 4.
A. The Self-triggered Framework
In this section the self-triggering mechanism is going
to be presented. Consider that at time-step k
i
an event is
triggered. The next control update time k
i+1
is considered
to be unknown and should be found. In particular, the next
control update time k
i+1
, k
i
+ d
i
should be such that
the closed-loop system does not loose any of its desired
3829
properties. Thus, we still need the Lyapunov function J

()
to be decreasing. Given (16) and (17), for a triggering instant
k
i
and a time-step d
i
with d
i
2 [1;N  1] we get:
J

(ki+1) J

(ki)

 
LE (L
f
)
(N d
i
)
+LF
N (d
i
+1)
X
i=0
(L
f
)
i
!
 w LQ(di)
(18)
where:
L
Q
(d
i
) =
i=di
X
i=1
min(q
1
;q
2
;q
3
;q
4
;r
1
;r
2
;r
3
)jj^ x(k +ijk  1)jj
The time instant d
i
should be such that:
 
LE (L
f
)
(N d
i
)
+LF
i=N (d
i
+1)
X
i=0
(L
f
)
i
!
 wLQ(di)
(19)
with 0<< 1 and Plugging (19) to (18), we get:
J

(k
i+1
) J

(k
i
) (  1)L
Q
(d
i
) (20)
This suggests that provided 0 <  < 1, the convergence
property is still guaranteed. Thus, the next control update
time should be triggered when (19) is violated. The condition
(19) should be checked for each consecutive time-step, i.e.,
for d
i
= 1; 2;::: . The time-step that this condition does
no longer holds should be the next triggering instant k
i+1
.
Notice that the time-step k
i+1
can be found beforehand at
time k
i
, i.e, this is a self-triggering mechanism. Moreover,
it should be pointed out that the term L
Q
(d
i
) includes
only predictions of the nominal system that is forming a
predicted sequence and that can also be computed by forward
integration of (3) for time-steps d
i
2 [1;N  1].
Next we describe the self-triggering mechanism. At time
k
i
a control update is triggered and a control trajectory for
[k
i
;k
i
+N 1] is provided. The solution of (19) will provide
the next update time k
i+1
. During the time interval k 2
[k
i
;k
i+1
) the control trajectory V

(k
i
+d
i
jk
i
) is applied to
the plant in an open-loop fashion. Next, at time-step k
i+1
the optimal control problem of the NMPC is solved again
using the current state measurement x(k
i+1
) as the initial
state. The controller follows this procedure until the system
converges to the terminal constraint set.
IV. EXPERIMENTS
The aim of this section is to show the efﬁcacy of the
proposed self-triggered NMPC controller to perform a real
experiment. An attitude stabilization of an underwater vehi-
cle was performed in real-time. Notice that the water is a
signiﬁcant source of disturbance in this experiment.
A. System Components
The ROV used is a 3-DOF (VideoRay PRO, VideoRay
LLC, Fig.2), equipped with three thrusters, a control unit, and
a CCD camera. The control unit is connected with a Personal
Computer (PC). The image dimensions are 640x480 pixels.
A target is located on an aluminium plate which is ﬁxed
inside the tank. The system software is implemented using
the Robotics Operating System (ROS, http://www.ros.org).
The target detection and vehicle localization are shown in
Fig.4.
Fig. 4: Experimental setup. (a) The initial conﬁguration. Vehicle’s
view (b) The desired pose of the vehicle. Vehicle’s view.
B. Experimental Results
The goal of the experiment is the attitude stabilization
of the vehicle at the desired position. The ﬁrst experiment
using the classical (time triggering) NMPC, will be com-
pared to the second experiment where the Self-Triggering
NMPC proposed in this paper is used. The initial and
the desired position of the robot wrt the target frame is
[
in
;y
in
;z
in
; 
in
] = [ 1:2; 0:45; 0:1; 0:401] and x
d
=
[
d
;y
d
;z
d
; 
d
]
>
= [ 0:6; 0:0; 0:0; 0:0] respectively. The
sampling time of this experiment is equal to dt = 0:15 sec.
The maximum translational and angular velocity of the vehi-
cle in surge, heave and yaw direction are  u = 0:2m=sec,  w =
0:3m=sec and  r = 0:3rad=sec, respectively. The matricesQ,
R and P are deﬁned as Q = diag(0:5; 4:5; 4:5; 0:1), R =
diag(0:17; 0:1; 1) and P =diag(1; 1; 1; 1), respectively.
0 10 20 30 40
?140
?120
?100
?80
?60
?40
Pose of the AUV under Self Triggered NMPC
Time
X(cm)
0 10 20 30 40
?40
?20
0
20
Time
Y (cm)
0 10 20 30 40
?15
?10
?5
0
5
Time
Z (cm)
0 10 20 30 40
?20
0
20
Time
? (Degree)
0 10 20 30 40
?140
?120
?100
?80
?60
?40
Pose of the AUV under Time Triggered MPC
Time
X (cm)
0 10 20 30 40
?60
?40
?20
0
20
Time
Y (cm)
0 10 20 30 40
?10
?5
0
5
Time
Z (cm)
0 10 20 30 40
?20
0
20
Time
? (Degree)
Fig. 5: The state of the robot wrt the target frame. (a) Self Triggered-
MPC. (b) Time Triggered MPC
In Fig.5 the states evolution of the system about x, y and
 in both experiments are depicted. The states of the system
are converging to a set around the desired position in both
3830
cases. It can be witnessed that the performances in the case
of self triggering are better (or the same) comparing to the
classical case. In both cases, all the constraints are satisﬁed
and the robot have reached the desired position wrt the target.
In Fig.6 the triggering instants in the case of self triggering
are captured. When the vertical axis has the value 1, the
NMPC is triggered, the image is processed and the state
vector is calculated, consequently the optimization algorithm
is running and a new control input sequence is computed.
For value 0, the control law is implemented on the system
in an open-loop fashion using the rest of the last computed
control input sequence, thus no optimization and no image
processing is running.
0 50 100 150 200 250
0
0.2
0.4
0.6
0.8
1
Sampling Time (dt)
Triggering
Fig. 6: The triggering instants in Self triggered NMPC . For value 1,
the NMPC is triggered. For value 0 the control law is implemented
on the robot in an open-loop fashion.
The computational time in a triggering instance is about
0:1sec while in the case of the open loop control is being
reduced to 0:0002sec. This is happening because neither the
image processing nor the optimization algorithm are running
between two triggering instances in the case of self triggered
control. This is very important in the case of underwater
vehicle where the energy sources (batteries) are very limited
and the recharging is very difﬁcult and time consuming.
Finally in Fig.7 the control inputs are depicted. It can be
seen that no violation of the constraints took place.
0 10 20 30 40
?0.1
0
0.1
0.2
0.3
Control inputs ? Self Triggered NMPC
Time
u
0 10 20 30 40
0
0.1
0.2
0.3
0.4
Time
w
0 10 20 30
?0.1
0
0.1
0.2
0.3
Time
r 
0 10 20 30 40
?0.1
0
0.1
0.2
0.3
Control Inputs Time Triggered MPC
Time
u
0 10 20 30 40
0.1
0.2
Time
w
0 10 20 30 40
?0.2
?0.1
0
0.1
0.2
Time
r
Fig. 7: Control inputs. (a) Self Triggered MPC. (b) Time Triggered
MPC.
V. SUMMARY AND FUTURE WORK
In this paper, a Self-triggered Visual Servo Model Pre-
dictive Control Scheme for Underwater Robotic Vehicles is
presented. The main idea is to trigger and run the NMPC only
when it is needed and not periodically as in the case of the
classic NMPC schemes. During the inter-sampling instants
the control sequence from the NMPC is applied to the system
in an open-loop fashion, i.e., neither the image processing nor
the optimization algorithm are running between two trigger-
ing instances. In this paper sufﬁcient conditions for triggering
were provided along with an experiment that shows the
effectiveness of the proposed framework comparing to the
classical time triggered NMPC. Future work will involve
extention of the proposed visual servo controller taking into
consideration the obstacles in the trajectory of the robot.
ACKNOWLEDGMENT
This work was supported by the EU funded project PAN-
DORA: Persistent Autonomy through learNing, aDaptation,
Observation and ReplAnning, FP7288273, 20122014.
REFERENCES
[1] F. Chaumette and S. Hutchinson, “Visual servo control. i. basic
approaches,” IEEE Robotics and Automation Magazine, vol. 13, no. 4,
pp. 82–90, 2006.
[2] F. Chaumette and S. Hutchinson, “Visual servo control, part ii:
Advanced approaches,” IEEE Robotics and Automation Magazine,
vol. 14, no. 1, pp. 109–118, 2007.
[3] S. Heshmati-alamdari, G. K. Karavas, A. Eqtami, K. Drossakis, and
K. J. Kyriakopoulos, “Robustness analysis of model predictive control
for constrained image-based visual servoing,” Proceedings of the 2014
IEEE International Conference on Robotics and Automation, 2014.
[4] P. Tabuada, “Event-triggered real-time scheduling of stabilizing control
tasks,” IEEE Transactions on Automatic Control, vol. 52, no. 9,
pp. 1680–1685, 2007.
[5] A. Anta and P. Tabuada, “To sample or not to sample: self-triggered
control for nonlinear systems,” IEEE Transactions on Automatic
Control, vol. 55, no. 9, pp. 2030–2042, 2010.
[6] D. Lehmann and J. Lunze, “Event-based control: A state feedback
approach,” European Control Conference, pp. 1716–1721, 2009.
[7] X. Wang and M. Lemmon, “Self-triggered feedback control systems
with ﬁnite-gain L2 stability,” IEEE Transactions on Automatic Control,
vol. 45, no. 3, pp. 452–467, 2009.
[8] A. Eqtami, S. Heshmati-alamdari, D. V . Dimarogonas, and K. J. Kyri-
akopoulos, “Self-triggered model predictive control for nonholonomic
systems,” European Control Conference, 2013. to appear.
[9] S. Durand, J. Guerrero-Castellanos, N. Marchand, and W. Guerrero-
Snchez, “Event-based control of the inverted pendulum: Swing up and
stabilization,” Control Engineering and Applied Informatics, vol. 15,
no. 3, pp. 96–104, 2013.
[10] J. T. Guzman, J. Guerrero-Castellanos, S. Durand, N. Marchand, and
R. L. Maya, “Event-based lqr control for attitude stabilization of a
quadrotor,” 15th IFAC Latinamerican Control Conference, 2012.
[11] T. Fossen, “Guidance and control of ocean vehicles,” Wiley, New York,
1994.
[12] D.Panagou and K. J. Kyriakopoulos, “Control of underactuated sys-
tems with viability constraints,” Proc. of the 50th IEEE Conference on
Decision and Control and European Control Conference, pp. 5497–
5502, 2011.
[13] D. L. Marruedo, T. Alamo, and E. Camacho, “Input-to-state stable mpc
for constrained discrete-time nonlinear systems with bounded additive
uncertainties,” 41st IEEE Conf. Decision and Control, pp. 4619 – 4624,
2002.
[14] G.Pin, L. Magni, T. Parisini, and D. Raimondo, “Robust receding-
horizon control of nonlinear systems with state dependent uncer-
tainties: an input-to-state approach,” American Control Conference,
pp. 1667 – 1672, 2008.
[15] Z.-P. Jiang and Y . Wang, “Input-to-state stability for discrete-time
nonlinear systems,” Automatica, vol. 37, no. 6, pp. 857–869, 2001.
3831
