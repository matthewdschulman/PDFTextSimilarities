A hybrid dynamic model for bio-inspired soft robots - Application to a
ﬂapping-wing micro air vehicle.
Mathieu Porez, Frédéric Boyer and Ayman Belkhiri
Abstract— The paper deals with the dynamic modeling of bio-
inspired robots with soft appendages such as ﬂying insect-like or
swimming ﬁsh-like robots. In order to model such soft systems,
we propose to use the Mobile Multibody System framework
introduced in [1], [2], [3]. In such a framework, the robot is
considered as a tree-like structure of rigid bodies where the
evolution of the position of the joints is governed by stress-strain
laws or control torques. Based on the Newton-Euler formulation
of these systems, we propose a new algorithm able to compute
at each step of a time loop both the net and passive joint
accelerations along with the control torques supplied by the
motors. To illustrate, based on previous work [4], the proposed
algorithm is applied to the simulation of the hovering ﬂight of
a soft ﬂapping-wing insect-like robot (see the attached video).
I. INTRODUCTION.
As revealed by works in biology such as those of Alexan-
der [5], animals have developed soft organs to improve their
locomotion performances. As an example, in the case of
ﬂying insects, such as hawk moth, the twisting strain of the
wing along the leading edge generates a phase lag between
the stroke and the pitch which is at the origin of the lift
during ﬂight [6]. Another relevant example of the beneﬁts
of compliances in animal locomotion is illustrated by the
dead ﬁsh in a wake. In fact, recent experiments [7] and
simulations [8] reveal that a dead trout placed in the wake
downstream from obstacles can extract energy passively from
large-scale coherent vortices and ascend ﬂow. Based on these
two examples, it appears that, soft organs allow animals: 1)
to add useful degrees of freedom for locomotion without
adding muscles; 2) to cyclically accumulate and restore
kinetic energy in order to minimize the power consumption
during the locomotion. From the roboticist’s view point, the
implementation of these concepts would allow to design sim-
pler, lighter and cheaper robots. As a result, the reproduction
of compliant wings of ﬂying insects is the key of success of
the new generation of Micro Air Vehicles (MA V) [9], [10].
To help researches to study soft locomotion, we propose, in
this paper, a Mobile Multibody Systems (MMS) framework
devoted to the dynamic modelling and simulation of loco-
motion systems which use soft appendages. The proposed
algorithm allows to solve numerically the three following
coupled dynamics: 1) the external forward dynamics ruling
the net motions of the MMS produced by locomotion through
a model of the contact forces with environment; 2) the
internal inverse dynamics ruling the internal control torques
Mathieu Porez, Frédéric Boyer and Ayman Belkhiri are with IRCCyN,
EMN - La Chantrerie - 4, rue Alfred Kastler,B.P. 20722, 44307 Nantes,
Cedex 3, France.
Contact: mathieu.porez@mines-nantes.fr
produced by the shape motions of the MMS; 3) the internal
forward dynamics ruling the strains of the compliant organs.
While being applicable to a wide diversity of systems, the
algorithm is illustrated on the case of the hovering ﬂight
of a soft MA V inspired of big moths of Sphyngidae family
like Manduca sexta (see the attached video). In order to
present this framework, the article is structured as follows.
The modelling of a MMS is ﬁrst presented in section II.
In section III, a hybrid algorithm dedicated to compute the
forward and the inverse dynamics of the MMS is introduced.
Then, the resulting simulator is exploited in section IV, in
the context of the ﬂapping ﬂight. Lastly, the article ends by
some concluding remarks.
II. THE PROBLEM STATEMENT.
A. Parametrisation and notations.
36
F
e
o
e
B
j
B
i
B
0
B
1
B
2
B
N
F
0
s
0
n
0
a
0
a
e
n
e
s
e
o
0
e
g
0
e
g
j
s
j
n
j
a
j
o
j
F
j
Fig. 1. Schematic view of a Mobile Multibody System.
In accordance with ﬁgure 1, let us consider a MMS
with a tree-like structure, in a 3-D space of an unbounded
volume ﬁlled of an initially quiescent ﬂuid (e.g. air, water,
etc ...). We attach to the ambient geometric space a ﬁxed
spatial orthonormed frame denoted byF
e
= (O
e
;s
e
;n
e
;a
e
),
wherea
e
supports the vertical axis and the plane (O
e
;s
e
;n
e
)
deﬁnes the ground. The considered MMS is composed of a
sequence of N + 1 rigid bodies interconnected through N
passive or actuated 1-DoF angular joints. These bodies are
denotedB
0
;B
1
;:::;B
N
, whereB
0
stands for the reference
body. Moreover, the bodies are numbered fromB
0
toward
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 3556
the tips of the branches in increasing order. In the following,
we denote by j and i, the indices of the current body and
its antecedent respectively. Moreover, we deﬁned byJ
a
the
index set of actuated joints and byJ
p
the index set of passive
joints. We attach to each bodyB
j
of density 
j
a mobile
frameF
j
= (O
j
;s
j
;n
j
;a
j
), where the center O
j
coincides
with the center of the joint j, and a
j
supports the joint
axis. Let us note that s
j
and n
j
are directed as required. At
any time t, the robot conﬁguration is deﬁned by the vector
of joint positions r = (r
1
;:::;r
n
)
T
deﬁning the relative
angles around the joint axis between the bodies, together
with the orientation matrix
e
R
0
and the position vector
e
P
0
of the mobile frame attached to the reference body
F
0
= (O
0
;s
0
;n
0
;a
0
) with respect toF
e
. The time evolution
of (
e
R
0
;
e
P
0
) deﬁnes the rigid net motion of the MMS.
Finally, throughout this article, we will use the following
notation convention. For any physical variable modelled by
a tensor, the right lower index will represent the body index
(to which it is related) while the left upper exponent will
indicate the index of the projection frame (e.g.
e
R
0
,
e
P
0
).
When the tensor related to a body is expressed in the mobile
frame of this body, the upper index is omitted. Moreover,
the temporal derivative @:=@t will be sometimes denoted by
a ’dot’.
B. Mobile Multibody System model.
To model the MMS presented previously, we use the
Newton-Euler (N-E) framework proposed in [1], [2], [3].
This general setting is devoted to the modelling of MMS, i.e.
Multibody Systems with a mobile basis (hereB
0
) whose mo-
tion is governed by the locomotion dynamics. Let us start by
introducing the geometric model of the MMS which relates
the posture of any frameF
j
with that of the antecedent frame
F
i
, both expressed in the earth frameF
e
and represented by
the two (4 4) matrices
e
g
i
and
e
g
j
of SE(3). This model
can be detailed as:
e
g
j
=
e
g
i
i
g
j
(r
j
) =
e
g
i

i
R
j
(r
j
)
i
P
j
0 1

, (1)
where
i
R
j
and
i
P
j
are the orientation matrix and the
position vector ofF
j
with respect toF
i
.
Regarding the velocity of the body j, it is a (6 1)
vector of se(3) denoted 
j
and related to the velocity of
the antecedent body i through the recursive relation:

j
= (V
T
j
; 

T
j
)
T
=Adj
gi

i
+ _ r
j
A
j
, (2)
where V
j
and 

j
are respectively the linear and angular
Galilean velocities of the considered body, both expressed
in its mobile frame, A
j
= (0
T
3
;a
T
j
)
T
is the (6 1) unit
vector supporting the joint axis j, and Adj
gi
is the adjoint
map operator which permits a change in velocity fromF
i
to
F
j
[11]:
Adj
gi
=

j
R
i
j
R
i
i
^
P
T
j
0
j
R
i

. (3)
Let us remark that in (3), we introduced the ’hat’ notation
which changes a (3 1) vector into its associated (3 3)
skew-symmetric tensor. Thus, for any vectors A and B in
R
3
,
^
A is deﬁned such that
^
AB =AB.
Once the Galilean velocities are deﬁned, by time deriva-
tion of (2), the acceleration ofB
j
is given by the relation:
_ 
j
=Adj
gi
_ 
i
+
j
+  r
j
A
j
, (4)
where 
j
represents the component of accelerations in (4)
which depends on velocities through the detailed expression:

j
=

(
j
V
i
+
j
P
i

j


i
) _ r
j
a
j
_ r
j
j


i
a
j

. (5)
Finally, by applying the Newton’s law and the Euler’s
theorem on thej
th
body, one obtains the dynamic equations
ofB
j
in the Newton-Euler form:
f
j
=M
j
_ 
j
+
j
+f
ext;j
+
X
k
Ad
T
k
gj
f
k
, (6)
where k are the indices of all the successive bodies toB
j
.
Moreover, in (6), we introduced the following notations:
 for any j, f
j
is the (6 1) force vector (element of
se(3)

) exerted byB
i
ontoB
j
; and
 M
j
is the (6 6) inertia tensor of B
j
(element of
se(3)


se(3)), which can be detailed as:
M
j
=

M
j
 MS
j
MS
j
I
j

(7)
= 
j
Z
V
B
j

1
3
 
^
O
j
Q
^
O
j
Q  
^
O
j
Q
^
O
j
Q

dV
Bj
,
where Q is a point ofB
j
, 1
3
is the 3 3 unit matrix,
while M
j
, MS
j
and I
j
are the tensor of body mass
(spherical in the rigid body case), the tensor of ﬁrst
inertia moments (skew-symmetric in the rigid body
case) and the tensor of angular inertia ofB
j
; and
 the (6 1) vector of Coriolis and centrifugal forces:

j
=

 

j
 (MS
j


j
) + 

j
 (M
j
V
j
)


j
 (I
j


j
) +MS
j
(

j
V
j
)

, (8)
(we shall see that the ﬂuid generates other velocity-
dependent inertia forces that we will also denote  by
extension); and
 the (6 1) vector of external forces denoted by f
ext;j
whose the model depends on the considered locomotion
problem.
Let us note that, forj = 0, (6) describes the time evolution
of the MMS net motion and it is named the external forward
dynamic model.
III. THE HYBRID ALGORITHM.
A. The algorithm working process.
In accordance with the assumptions of section II, we
address the following dynamic problem: knowing at each
time t, the state of the MMS (
e
g
0
;
e

0
;r; _ r), the accelera-
tions  r
j
(for j2J
a
) applied to the actuated joints through
3557
31
Control law Strain-stress law
1
st
 for. rec. loop
2
nd
 for. rec. loop
1
st
 back. rec. loop
Passive joint Actuated joint
1
s
2
g
j
,?
j
,?
j
,M
j
,?
j
,F
ext,j
M
?
j
,?
?
j
H
j
,K
j
,?
j
,M
?
j
,?
?
j
˙ ?
0
=(M
?
0
)
?1
?
?
0
?
0
,
e
g
0
1
s
2
bo(j)=1
bo(j)=1
bo(j)=1
bo(j)=0
bo(j)=0
bo(j)=0
¨r
d,j
?
j
¨r
j
?
j
˙ r
j
,r
j
Hybrid algorithm
˙ ?
0
=?(M
?
0
)
?1
?
?
0
bj=0 bj=1
bj=0 bj=1
bj=0 bj=1
g
j
,?
j
,?
j
,M
j
,?
j
,f
ext,j
Fig. 2. Flow chart of the proposed hybrid algorithm.
motion control laws and the torques 
j
(for j2J
p
) applied
to the passive joints through stress-strain material laws or
control torque; the dynamic problem consists in calculating
the accelerations of the reference body _ 
0
(describing the net
motion of the MMS with respect to the Galilean frameF
e
),
the torques 
j
(for j2J
a
) applied on the actuated joints
and the accelerations  r
j
(for j2J
p
) of passive joints. This
dynamic problem is named mixed dynamic problem since it
involves the forward and the inverse forms of the dynamic
of a multi-body system [1]. To resolve such a problem, we
propose here to extend to the MMS with a tree-like structure,
the inverse algorithm of Luh et al. [12] and the forward
algorithm of Featherstone [13] both dedicated initially to the
manipulators. Due to its mixed (inverse, forward) nature, the
resulting algorithm will be named "hybrid algorithm" and
its ﬂow chart is described in ﬁgure 2. From a computational
point of view, this algorithm, resolves, at each time step of
a time integration loop, three recursive sets of equations on
the bodies index. The ﬁrst loop is a forward recursive loop
(from the reference body to the tips of the branches of the
considered tree-like structure), which compute all the state
dependent variables related to subsequent computing as the
transformation matrices, velocities, inertia tensors, etc ... . It
is followed by a backward loop (from the tips of the branches
to the reference body) which computes _ 
0
, i.e. solves the
external forward dynamic model. To do this, the recursive
process computes the (6 6) inertia matrix of the whole
MMS:M

0
, and 

0
the (6 1) vector of all external and
inertia forces applied on the MMS. Finally, once the variables
are known, they allow to compute the current acceleration
of the reference body as follows:
_ 
0
=  (M

0
)
 1


0
, (9)
which is used to initialize the last forward recursive loop
(see the ﬂow chart in ﬁgure 2) dedicated to the internal
dynamics. This loop computes the accelerations of the
passive joints and the torque applied on the actuated joints,
which are the expected outputs allowing to update (after a
time integration) the external state (i.e. (
e
g
0
;
e

0
) and the
internal state (r
j
; _ r
j
for j 2 J
p
) of the MMS before to
increment the time and to begin the next iteration.
Before detailing the three loops previously presented, let
us introduce the following Boolean variable deﬁning the type
of the j
th
joint, i.e. for "actuated" or "passive" type:
8j; b
j
=

1 if  r
j
(t) is imposed and 
j
(t) is unknown;
0 if 
j
(t) is imposed and  r
j
(t) is unknown:
B. The ﬁrst forward recursion on the kinematics
Since the current robot’s state (
e
g
0
;
e

0
;r; _ r) is known,
the algorithm starts by the following forward recursion:
For j = 0; 1;:::;N, computes:

i
R
j
,
i
P
j
and the body transformations
e
g
j
from (1);
 the body velocities 
j
from (2);
 the terms 
j
of (4) from (5);
 the body inertia matricesM
j
from (7);
 the body Coriolis and centrifugal forces 
j
from (8);
 the external forces f
ext;j
whose the model depends on
the studied problem;
and initializes:
 the generalized inertia matrixM

j
from :
M

j
=M
j
; (10)
 the generalized forces 

j
from :


j
=
j
+f
ext;j
. (11)
End for.
C. The backward recursion on the external forward dynam-
ics
Once all the state-dependent variables are known, the next
step of the computational algorithm consists in executing
the following recursion:
For j =N;N  1;:::; 1, computes:
 If b
j
= 1 :
M

i
= M

i
+Ad
T
j
gi
M

j
Adj
gi
;


i
= 

i
+Ad
T
j
gi
(M

j
(A
j
 r
j
+
j
) +

j
) .
3558
 Else (if b
j
= 0) :
H
j
= A
T
j
M

j
A
j
;
K = M

j
 M

j
(A
j
H
 1
j
A
T
j
)M

j
;
 = K
j
+M

j
A
j
H
 1
j
(
j
 A
T
j


j
) +

j
;
M

i
= M

i
+Ad
T
j
gi
KAdj
gi
;


i
= 

i
+Ad
T
j
gi
 .
 End if.
End for.
Once this recursion loop is carried out, the accelerations
_ 
0
ofB
0
are computed from (9).
D. The second forward recursion loop on the internal (in-
verse and forward) dynamics
Finally, the algorithm ends with a second forward
recursion initialised by the current state and _ 
0
:
For j = 1; 2;:::;N, computes:
_ 
j
=Adj
gi
_ 
i
;
 If b
j
= 1 :
_ 
j
= _ 
j
+A
j
 r
j
+
j
;

j
= A
j
(M

j
_ 
j
+

j
) .
 Else (if b
j
= 0) :
 r
j
= H
 1
j
(
j
 A
T
j
(M

j
( _ 
j
+
j
) +

j
)) ;
_ 
j
= _ 
j
+A
j
 r
j
+
j
.
 End if.
End for.
Lastly, in order to update the external state of the MMS,
for the next iteration of the time loop, _ 
0
is numerically
integrated with a numerical integrator based on quaternions.
As regards the internal state, i.e. _ r
j
andr
j
, they are updated
by time integration of  r
j
.
IV. APPLICATION TO THE FLAPPING FLIGHT.
In this section, we propose to apply the algorithm, intro-
duced in section III, to the simulation of the hovering ﬂight
of a ﬂapping-wing insect-like robot bio-inspired from the
hawk moth Manduca sexta (see the attached video).
A. The robot parametrisation.
The considered robot is composed of a rigid thorax and
two soft wings where the deformations are concentrated
along the leading edge (see ﬁgure 3). For this numerical
example, only the twisting around the leading edge and
the bending in the plane perpendicular to the wing have
been taken into account. In order to model such a soft
system with the above general framework (see section III),
F
e
o
e
s
e
n
e
a
e
o
0
? g
Soft 
wing
T wisting 
strain
Bending 
strain
F
0
Stroke 
actuator
Thorax
Fig. 3. Schematic view of the soft MA V .
we propose to discretize each wing of the robot into a
serial assembly of rigid bodies. The discretization of each
of the wings of span S consists in dividing them into M
sections with a length l =S=M. Each section is composed
of the following serial assembly: 1) a 1-DoF angular joint
aligned with the leading edge (modeling the twisting); 2)
a ﬁctitious rigid body with no inertia; 3) a 1-DoF angular
joint for which the axis is in the wing plane and orthogonal
to the leading edge (modeling the bending); 4) a rigid body
or "blade" whose size and inertia are the same as those
of the considered section. Once so discretized, the virtual
robot has N = 4M + 1 bodies and 4M angular joints. To
illustrate this, ﬁgure 4 shows a virtual robot with M = 2
sections and N = 9 bodies.
7
s
0
a
0
o
0
o1,o2 o3,o4 o5,o6 o7,o8
o1,o2 o3,o4 o5,o6 o7,o8
B
0
B
1
B
2
B
3
B
4
B
5
B
6
B
7
B
8
a1
a2
a
3
a4
a
5
a
6
a
7
a
8
s1,s2 s3,s4 s5,s6 s7,s8
s
0
a2 a4
a
6
a
8
Fig. 4. Front and top views of a virtual robot atN = 9 bodies andM = 2
sections per wing.
In accordance with ﬁgure 5, the thorax, which is deﬁned
as the reference body, is denoted by B
0
while the rigid
bodies constituting the right and the left wings are denoted
B
1
;B
2
;:::;B
2M
and B
2M+1
;B
2M+2
;:::;B
4M
respectively.
The bodyB
0
of density 
t
, is an ellipsoid of the half-axes
3559
29
92
s
0
a
0
o
0
a
1
o
1
o
1
s
1
a
2M+1
s
2M+1
o
2M+1
o
2M+1
B
0
84
a
i
a
j
B
i
B
j
o
i
,o
j
s
i
,s
j
a
j o
i
,o
j
B
i
85
a
i
a
j
B
i
o
i
,o
j
s
i
,s
j
a
j
o
i
,o
j
B
i
B
j
Fig. 5. Schematic view of the ﬂapping-wing insect-like robot. On top: the
left wing; in the middle: the thorax; at the bottom: the right wing.
a, b and c along the vectors s
0
, n
0
, and a
0
of the frame
F
0
= (O
0
;s
0
;n
0
;a
0
) attached to the geometric center of
B
0
. The wings are attached toB
0
at d from O
0
along s
0
.
The blades, i.e. the bodies j2f2; 4;:::; 4Mg, have a length
l = S=M (along a
j
), a cord c
j
(along n
j
), a thickness e
(along s
j
) and a density 
w
. The wing having an elliptical
shape, the cord c
j
ofB
j
is a function of the position X
j
of
the section along the leading edge (from the root to the tip)
which is deﬁned as follow:
c
j
=C
q
1 X
2
j
=S
2
,
where C is the cord of the wing at its roots. As far as the
joints linking the wings to the thorax (i.e. j2f1; 2M + 1g)
are concerned, they are actuated to generate the typical stroke
observed in the hawk moth [14] according to the following
time law:
 r
d;j
=

 A!
2
cos(!t) , if j = 1 ,
A!
2
cos(!t) , if j = 2M + 1 ,
where A and ! are the amplitude and the frequency of
the stroke respectively. As regards the other joints of the
robot, they are all passive. Thus, the strain accelerations  r
j
of these joints are unknown while the strain torques 
j
are
imposed through strain-stress law function of the strain state,
i.e. (r
j
; _ r
j
). More precisely, the strain torques applied to the
joints numbered j2f3; 5;:::; 2M  1g[f2M + 3; 2M +
5;:::; 4M  1g, modeling the twist of the wings, are ruled
by the following viscous-elastic model:

j
= k
t;j
r
j
  _ r
j
, (12)
while the strain torques assigned to the joints numberedj2
f2; 4;:::; 2Mg[f2M + 2; 2M + 4;:::; 4Mg, which model
the bending, are governed by:

j
= k
b;j
r
j
  _ r
j
. (13)
In (12)-(13), we introduced the structural damping together
with k
t;j
and k
b;j
the stiffness of twisting and bending
respectively deﬁned along the leading edge by the following
linear functions:
k
t;j
=k
1
t
+
X
j
S
(k
2
t
 k
1
t
) , k
b;j
=k
1
b
+
X
j
S
(k
2
b
 k
1
b
) ,
with k
1
t
and k
2
t
(k
1
b
and k
2
b
) the stiffness of twisting (of
bending) at the root and the tip respectively.
B. Model of the external forces.
Let us now specify the model of external forces chosen
for this dynamic problem. It is the following:
f
ext;j
=f
g;j
+f
aero;j
, (14)
wheref
g;j
is the (6 1) vector of gravity forces applied on
B
j
and f
aero;j
is the (6 1) vector of aerodynamic forces
(6= 0, only for the blade bodies of the wing). In this numerical
example, based on the quasi-steady model of Dickinson & al
[6], [15], we distinguish two types of aerodynamic forces: 1)
the added mass forces due to the ﬂuid inertia; 2) the quasi-
steady forces of lift and drag whose time dependance is due
to the body kinematics and not to the ﬂuid ﬂow history.
Based on these considerations, f
aero;j
is deﬁned as:
f
aero;j
=f
a;j
+f
s;j
,
where f
a;j
and f
s;j
are the (6 1) vector of added
mass forces and the (6 1) vector of quasi-steady forces
3560
respectively.
To establish the model of aerodynamic forces, let us
consider the wing bladeB
j
. We deﬁne by  the abscissa
of a cross-section ofB
j
along the leading edge. On each
cross-section, along the cord, at a distance of 0:4c
j
from the
leading edge, we ﬁxe the center of pressure C
p
where the
quasi-steady forces (i.e. the lift and drag forces) are applied.
Moreover, on C
p
, we attach two unit vectors t and w. t
belongs to the blade plane and oriented from the trailing
edge to the leading edge while w is orthogonal to the blade
plane and oriented from the intrados to the extrados. Based
on these deﬁnitions, the model of quasi-steady forces can be
detailed as:
f
s;j
=
Z
l
0

1 0
^
O
j
C
p
1

L +D
0

d ,
where L et D are the lift and the drag forces respectively
deﬁned by:
L =
1
2

air
c
j
C
L
jjV
Cp()
jj
2
v , D =
1
2

air
c
j
C
D
jjV
Cp()
jj
2
u ,
where V
Cp()
is the linear speed of C
p
, v =
V
Cp()
=jjV
Cp()
jj,u =v (tv) ,
air
is the density of the
air while C
L
and C
D
are the coefﬁcients of the lift and the
drag respectively obtained from experiments [6]:
C
L
= 1:8 sin 2 , and C
D
= 1:92  1:55 cos 2 ,
with  =atan2( w
T
:v; t
T
:v) the incidence angle of the
-cross-section and the air ﬂow speed.
As regards the vector of added mass forces f
a;j
, it can
be simply derived from a kinetic momenta balance applied
to the ﬂuid which laterally boundsB
j
. Assuming that the
ﬂuid is perfect (inviscid and incompressible) and irrotational,
we derive the ﬂuid dynamics from the impulse-momentum
theory of the ﬂuid mechanic due to Kelvin and Kirchhoff
[16]. Moreover, considering the aspect ratio of wings, f
a;j
can be detail as (for more details see appendix in [3]):
f
a;j
=M
a;j
_ 
j
+
a;j
,
where we introduced the following deﬁnitions:
 M
a;j
is the (6 6) tensor of added inertia of the ﬂuid
accelerated byB
j
:
M
a;j
=

M
a;j
 MS
a;j
MS
a;j
I
a;j

=
Z
l
0

m
a
 m
a
^
O
j
C
p
m
a
^
O
j
C
p
 m
a
^
O
j
C
p
^
O
j
C
p

d ,
which only depends on the cross sectional added inertia
tensors m
a
=
air
c
2
j
w:w
T
; and
 
a;j
is the (61) vector of added mass forces produced
by the volume of ﬂuid accelerated by the Coriolis and
centrifugal accelerations ofB
j
:

a;j
=

 

j
 (MS
a;j


j
) + 

j
 (M
a;j
V
j
)


j
 (I
a;j


j
) +MS
a;j
(

j
V
j
)

+

0
V
j
 (M
a;j
V
j
)

.
Finally, (14) can be written as follows:
f
ext;j
=f
g;j
+M
a;j
_ 
j
+
a;j
+f
s;j
. (15)
Let us note that in (15),f
ext;j
is a function of _ 
j
which is still
unknown when (15) is evaluated by the hybrid algorithm. To
overcome this problem, we replace (10) and (11) by:
M

j
=M
j
+M
a;j
and 

j
=
j
+f
g;j
+
a;j
+f
s;j
,
respectively.
C. Results and Discussions
TABLE I
SIMULATION PARAMETERS.
Parameter Value Parameter Value
M 4 t 800 Kg/m
3
N 17 w 1400 Kg/m
3
S 7010
 3
m 
air
1:22 Kg/m
3
C 31:510
 3
m A 41:3=180 rad
e 0:110
 3
m ! 50 rad/s
a 8:510
 3
m k
1
t
310
 3
Nm/rad
b 8:510
 3
m k
2
t
910
 3
Nm/rad
c 2810
 3
m k
1
b
3610
 3
Nm/rad
d 18:210
 3
m k
2
b
910
 3
Nm/rad
l 1:7510
 3
m  110
 5
Nm.s/rad
To illustrate the hybrid algorithm of section III, we
realised a ﬂapping ﬂight simulator using the description of
section IV-A and the numerical parameters of table I. For
this simulation, the hybrid algorithm has been programmed
using MATLAB R . The developed simulator uses the
predictor-corrector method (with a fourth-order explicit
method for the prediction step and a ﬁfth-order implicit
method for the correction step) for the time integration
(with a time step of 1 10
 4
s) together with the Gaussian
quadrature method (at 6 points) for the spatial integration of
the external force model deﬁned in section IV-B. With this
model, these parameters and these numerical tools, we can
simulate the dynamics of a ﬂapping-wing insect-like robot
during one ﬂapping period, i.e. for T = 2=! = 0:04 s, in
17 s on a laptop (CPU Intel R  Dual-Core I7 @2.66GHz).
Finally, the initial conditions have been chosen to obtain the
periodicity of the hovering ﬂight.
Figure 6 shows a set of snapshots taken at regular time
during one ﬂapping cycle (see the attached video). On the
snapshots numbered 0-1 and 5-6, we observe that during
the transition between the downstroke and the upstroke
(and vice-versa), thanks to their ﬂexibility, the wings twist
around the leading edge and bend in the opposite direction
of the stroke. These twisting and bending deformations are
characteristic of the ﬂapping ﬂight and are similar to those
observed in the hawk moth Manduca sexta (see [14] and
3561
29
0
1
2
3
4
5
6
7
8
9
10
Downstroke Upstroke
4?10
?3
s
Fig. 6. Sagittal and coronal views of the ﬂapping-wing insect-like robot
for one stroke.
the video attached with [17]). As regards the net motion
of the robot, the linear motions of the thorax along the
vectors n
e
and a
e
have amplitudes of2 mm and0:5
mm respectively while the angular pitch motion has an
amplitude of 7 degrees. Moreover, we have plotted in
ﬁgure 7 the linear and angular speeds ofB
0
in the sagittal
plane of the robot.
As far as the wing deformations are concerned, ﬁgure
8 shows them. We observe that the maximum twisting
strain appears (in the middle of ﬁgure 8) when the stroke
angle is equal to zero (i.e. when the wings are aligned
with the thorax) while the maximum bending arises (on
top of ﬁgure 8) after the stroke reversals (when the wings
rotate and change direction). By adding all the relative
stain angles, the twisting rotation of each wing tip has79
0 0.25 0.5 0.75 1
?0.5
0
0.5
t/T
V
0
.n
e
 (m/s)
0 0.25 0.5 0.75 1
?0.1
?0.05
0
0.05
0.1
0.15
t/T
V
0
.a
e
 (m/s)
8
0 0.25 0.5 0.75 1
?40
?20
0
20
40
t/T
!
0
.s
e
 (rad/s)
Fig. 7. The time evolution of the linear and angular speeds ofB
0
in the
sagittal plane of the robot for one ﬂapping cycle.
112
Version ICRA
0 0.25 0.5 0.75 1
?0.02
?0.01
0
0.01
0.02
t/T
!
1
 = ?!
9
 (Nm)
0 0.25 0.5 0.75 1
?1
?0.5
0
0.5
1
t/T
(rad)
 
 
r
1
 = ?r
9
r
3
 = ?r
11
r
5
 = ?r
13
r
7
 = ?r
15
0 0.25 0.5 0.75 1
?1
?0.5
0
0.5
1
t/T
(rad)
 
 
r
2
 = ?r
10
r
4
 = ?r
12
r
6
 = ?r
14
r
8
 = ?r
16
Fig. 8. For one ﬂapping cycle, the time evolution of: on the top, the
bending strain; in the middle, the twisting strain; at the bottom, the stroke
torque.
3562
degrees in amplitude and a phase lag with respect to the
stroke of 58 degrees. For the bending strain, each wing
tip rotates at68 degrees in amplitude with a phase lag
of 36 degrees. These numerical results are close to the
observations from experimental biology [14]. From the view
point of the actuation, as illustrated at the bottom in ﬁgure
8, the proposed hybrid algorithm allows to compute the
torques required to ensure the desired ﬂapping motion. For
a ﬂapping cycle, the maximal torque is 12:1 mNm and this
peak appears after the stroke reversals. The mean power,
during one ﬂapping cycle, is equal to 0:42 W per wing and
the total speciﬁc mechanical power is closed to 120 W/Kg
which is less than the value measured for the hawk moth
Manduca sexta given in [18].
27
TRO
0 0.25 0.5 0.75 1
?0.1
0
0.1
t/T
F
ext
T
.a
e
 (N)
0 0.25 0.5 0.75 1
?0.4
?0.2
0
0.2
0.4
t/T
F
ext
T
.n
e
 (N)
Fig. 9. The time evolution, for one ﬂapping cycle, of the axial (on top)
and the vertical (at the bottom) components of the external forces.
Finally, ﬁgure 9 shows the linear components of the
external forces in the sagittal plane. The vertical component
of the external force, image of the lift, is maximal when
the wings are aligned with the thorax and minimal when the
wings change their stroke direction. These observations are
in agreement with the literature.
V. CONCLUSIONS
In this paper, we have presented a hybrid algorithm ded-
icated to the modeling of a Mobile Multibody System with
a tree-like structure having both active and passive joints.
Based on the Newton-Euler approach of robots dynamics
[1], [2], [3], the proposed approach can solve the forward
and inverse problems through a unique hybrid algorithm.
Moreover, in the context of the locomotion of soft robots
bio-inspired from animals, this algorithm allows to compute,
through a model of contact forces with the environment: 1)
the net motion; 2) the torques produced by the muscles or
the actuators; 3) the body shape, i.e. the deformations of soft
appendages after their discretisation in to serially connected
rigid bodies. As illustrated in section IV-C, in the case of the
ﬂapping ﬂight, the given solution is computationally efﬁcient
with observations of experimental biology [6], [14], [17].
In particular, we have been able to numerically recover the
characteristic wing deformations of the hawk moth Manduca
sexta during the stroke reversals.
VI. ACKNOWLEDGMENTS
The authors would like to thank the French National
Agency for Research (ANR) for supporting this work via
EV A (Flying Autonomous Entomopter) project (2009-2013).
REFERENCES
[1] W. Khalil, G. Gallot, and F. Boyer, “Dynamic modeling and simulation
of 3-d serial eel-like robot,” IEEE Transactions on Systems, Man and
Cybernetics - Part C: Applications and reviews, vol. 37, pp. 1259–
1268, 2007.
[2] F. Boyer and S. Ali, “Recursive inverse dynamics of multibody systems
with joints and wheels,” IEEE Transactions on Robotics, vol. 27, pp.
215–228, 2011.
[3] M. Porez, F. Boyer, and A. J. Ijspeert, “Improved lighthill ﬁsh
swimming model for bio-inspired robots - modelling, computational
aspects and experimental comparisons.” To appear in International
Journal of Robotics Research, pp. 1–34, 2014.
[4] A. Belkhiri, M. Porez, and F. Boyer, “A hybrid dynamic model of an
insect-like mav with soft wings,” in proceeding of IEEE International
Conference on Robotics and Biomimetics, (ROBIO’2012), December
2012, pp. 108–115.
[5] R. M. Alexander, Elastic mechanisms in animal movement. Cam-
bridge, UK: Cambridge University Press, 1988.
[6] M. H. Dickinson, F.-O. Lehmann, and S. P. Sane, “Wing rotation and
the aerodynamic basis of insect ﬂight,” Science, vol. 284, pp. 1954–
1960, 1999.
[7] D. Beal, F. Hover, M. Triantafyllou, J. Liao, and G. Lauder, “Passive
propulsion in vortex wakes,” Journal of Fluid Mechanics, vol. 549,
pp. 385–402, 2006.
[8] F. Candelier, M. Porez, and F. Boyer, “Note on the swimming of an
elongated body in a non-uniform ﬂow,” Journal of Fluid Mechanics,
vol. 716, pp. 616–637, 2013.
[9] R. J. Wood, “The ﬁrst takeoff of a biologically inspired at-scale robotic
insect,” IEEE Transactions on Robotics, vol. 24, pp. 341–347, 2008.
[10] N. O. Pérez-Arancibia, K. Y . Ma, K. C. Galloway, J. D. Greenberg, and
R. J. Wood, “First controlled vertical ﬂight of a biologically inspired
microrobot,” Bioinspiration & Biomimetics, vol. 6, pp. 036 009–1–11,
2011.
[11] R. M. Murray, S. S. Sastry, and L. Zexiang, A mathematical introduc-
tion to robotic manipulation. Boca Raton, USA: CRC Press, 1994.
[12] J. Luh, M. Walker, and R. Paul, “On-line computational scheme for
mechanical manipulators,” ASME Transaction, Journal of Dynamic
System, Measurements and control, vol. 102, pp. 69–76, 1980.
[13] R. Featherstone, “The calculation of robot dynamics using articulated-
body inertias,” International Journal of Robotics Research, vol. 2, pp.
13–30, 1983.
[14] A. Willmott and C. Ellington, “The mechanics of ﬂight in the hawk-
moth manduca sexta. i. kinematics of hovering and forward ﬂight,”
Journal of Experimental Biology, vol. 200, pp. 2705–2722, 1997.
[15] J. A. Walker, “Rotational lift: something different or more of the
same?” Journal of Experimental Biology, vol. 205, pp. 3783–3792,
2002.
[16] H. Lamb, Hydrodynamics, D. Publication, Ed. New York, USA:
Dover Publication, 1932.
[17] T. L. Hedrick and T. L. Daniel, “Flight control in the hawkmoth
manduca sexta: the inverse problem of hovering,” The Journal of
Experimental Biology, vol. 209, pp. 3114–3130, 2006.
[18] T. M. Casey, “Flight energetics of sphinx moths: power input during
hovering ﬂight,” The Journal of Experimental Biology, vol. 64, pp.
529–543, 1976.
3563
