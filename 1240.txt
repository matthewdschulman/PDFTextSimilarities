Fully Autonomous Focused Exploration for
Robotic Environmental Monitoring
Gregory Hitz
1
, Alkis Gotovos
2
, Franc üois Pomerleau
1
, Marie-
`
Eve Garneau
3
,
C« edric Pradalier
4
, Andreas Krause
2
and Roland Y . Siegwart
1
AbstractÑ Robotic sensors are promising instruments for
monitoring spatial phenomena. Oftentimes, rather than aiming
to achieve low prediction error everywhere, one is interested in
determining whether the phenomenon exhibits certain critical
behavior. In this paper, we consider the problem of focusing au-
tonomous sampling to determine whether and where the sensed
spatial Þeld exceeds a given threshold value. We introduce a
receding horizon path planner, LSE-DP, which plans efÞcient
paths for sensing in order to reduce our uncertainty speciÞcally
around the threshold value. We report fully autonomous Þeld
experiments with an Autonomous Surface Vessel (ASV) in an
aquatic monitoring setting, which demonstrate the effectiveness
of the proposed method. LSE-DP is able to reduce the uncer-
tainty around the threshold value of interest to 68% when
compared to non-adaptive methods.
I. INTRODUCTION
The analysis of both temporal and spatial dynamics of
environmental phenomena requires large data sets, which
have to be collected in potentially harsh conditions. Recent
advances in robotics facilitate the addition of mobility to
sensors and thus allow to collect data very speciÞcally at
desired locations. The selection of measurement sites is
a difÞcult problem, which has been addressed in recent
research. In the simplest setting, the objective of such a
selection process is to get uniformly high conÞdence about
the observed process over a given area. However, in many
cases it might be preferable to set a speciÞc focus on
particular aspects of the phenomenon, for example, where it
crosses a certain critical threshold value. With the targeted
investigation of a threshold value, the observed phenomenon
can be classiÞed into areas that are lower or higher than the
threshold. In this paper we investigate this problem, propose
a solution and apply it to a real environmental monitoring
application. Handling large data sets is a problem in biology
[1], which suggests that focusing on interesting areas may
lead to more efÞcient analysis of complex ecosystems.
In particular, our work aims at monitoring level sets within
the spatial distribution of cyanobacteria in a lake. Concretely,
we study the distribution of Planktothrix rubescens in Lake
Zurich, which we sense using an Autonomous Surface Vessel
(ASV). P . rubescens is a toxic cyanobacteria, which is
common in pre-alpine lakes and usually blooms in late
summer and fall. Optimal conditions for P . rubescens growth
are a vertically stable water column and a low light regime.
1
Autonomous Systems Lab Ð ETH Zurich, Switzerland
2
Learning & Adaptive Systems Group Ð ETH Zurich, Switzerland
3
Limnological Station Kilchberg Ð University of Zurich, Switzerland
4
DREAM Lab Ð GeorgiaTech Lorraine, France
These are met within the metalimnion (stable layer of highest
temperature gradients), which is localized between 5 and
18 m depth in Lake Zurich [1]. Therefore, P . rubescens
forms a horizontal layer during summer and fall. A 40-year
study of its seasonal abundance in Lake Zurich has shown
that the biovolume of this toxic cyanobacteria has increased
signiÞcantly over the last decades [2], emphasizing the
importance of regularly collecting high-density data sets. We
collect measurements with the ASV Lizhbeth [3]. The robot
is equipped with a winch system that allows the user to lower
an aquatic sensor unit into the water (YSI 6600, hereinafter
referred to as probe), which measures the ßuorescence of
phycoerythrin, the main pigment of P . rubescens, in relative
ßuorescence units (RFU). The winch allows the robot to take
measurements down to a depth of 25 m while moving. The
cylindrical probe is carried in a custom, torpedo-like support
structure (see Figure 1), to minimize drag and ensure a stable
lateral position. Further details about the robotic system and
its applications are provided by Hitz et al. [3].
Fig. 1. The Autonomous Surface Vessel on Lake Zurich on a calm day.
The YSI probe is mounted inside the black and yellow torpedo situated in
between the hulls and is ready to be lowered into the water.
A. Related work
The review of Dunbabin and Marques [4] provides an
extensive overview of applications of robots as mobile
sensing agents. Whereas some applications build on the
passive circulation of agents (such as the Argo ßoats [5]),
the majority of works use active agents and aim at planning
optimal paths to retrieve the most informative measurements
from the environment. Krause et al. [6] discuss the sensor
placement problem, which consists of selecting the most
informative sites for a given number of sensors. This is a
related problem but it is slightly simpler as the selected sites
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 2658
for sensors do not have to be connected to a feasible and
efÞcient path.
Aquatic monitoring projects, like ours, often deploy sub-
mersible robots (autonomous underwater vehicles, AUV).
For such systems, Binney et al. [7] describe a path planning
algorithm with the aim of reducing the overall uncertainty of
the scalar Þeld of interest. In such a scenario, the path can be
planned ofßine, since the actual values of the measurements
do not inßuence the planning. Smith et al. [8] discuss
the problem of optimizing measurement resolutions while
considering ocean currents when designing coverage paths
for AUVs. Hollinger and Singh [9] describe an algorithm
to plan paths for multiple agents for searching a target in
a known environment. Their approach is similar to ours as
they also make use of a receding horizon planner to over-
come computational complexity. Decentralized methods to
deploy multiple robots for exploring environmental processes
are discussed by Low et al. [10]. In a different context,
Hollinger et al. [11] discuss the beneÞt of adaptively planning
measurements for robotic underwater ship inspection, which
is similar in the sense that the inspection robot needs to
adapt its path online. A data-adaptive planner targeted at the
estimation of boundaries is presented by Singh et al. [12].
Their work is similar to ours, however, in their approach
they separate the problem in a coarse coverage run and
a reÞnement run. Gotovos et al. [13] present the Level
Set Estimation (LSE) algorithm which speciÞcally selects
sampling sites to estimate level sets. However, they only
brießy discuss the problem of path planning.
When doing robotic Þeld experiments in a dynamic envi-
ronment, one difÞculty arising is the missing ground truth
to compare results against. The NIMS project, which aimed
originally at observing light intensity within a forest canopy
[14] and aquatic environments [15], deals with that challenge
by generating static lighting conditions in a laboratory envi-
ronment in order to create dense ground truth measurements.
We reused the same methodology by doing coverage runs
before and after our experiments.
B. Contributions
In this paper, we propose an approach towards fully
autonomous robotic monitoring of critical thresholds in en-
vironmental phenomena. Our approach builds on the LSE
algorithm [13] and extends it with a path planner that
constrains the selected sites to lie on a feasible path for a
robot. In particular, we use a dynamic programming approach
with a receding horizon to plan a sampling path for the
probe within a predeÞned vertical transect plane. The core
contributions of this paper are:
1) A receding horizon path planner for the LSE algorithm
for choosing measurement sites on an efÞcient path.
2) A performance evaluation of the path planner in sim-
ulation and a discussion of reasonable parameters.
3) Results from fully autonomously executed Þeld tests on
a lake, for which we also recorded comparative data
sets on a uniform grid.
II. PROBLEM STATEMENT AND BACKGROUND
We seek to infer knowledge about an unknown scalar
Þeld f : R
d
7! R (in this application the distribution
of P . rubescens) from samples Y
t
= fy
1
;:::;y
t
g taken
at locationsA
t
=fx
1
;:::;x
t
g, selected from a Þnite set
of potential measurement sitesD R
d
. Given a constant
threshold h, we seek to classify all points x 2 D into
either a superlevel setH = fxjf(x)>hg or a sublevel
setL =fxjf(x)<hg. Besides selecting sites x
i
at which
we require measurementsy
i
, we want to visit these locations
along a pathP =hx
1
;:::;x
t
i, ideally as short as possible,
which obeys the motion constraints of the robot.
A. Gaussian process
Gaussian processes (GP)
1
offer a principled way to model
the unknown Þeld f non-parametrically, while allowing to
encode certain assumptions about the smoothness of f in
the form of hyper-parameters. A mean function m(x) and
a covariance function (or kernel) k(x;x
0
) fully specify a
Gaussian process GP(m(x);k(x;x
0
)) [17]. Whereas the
mean function formulates prior knowledge about the values
of f(x), the kernel function encodes the smoothness of f.
Under the assumption of constant Gaussian measurement
noise with zero mean (y
i
=f(x
i
)+e
i
wheree
i
N (0;
2
)),
we can formulate the mean, covariance matrix and variance
of the posterior over f as follows [17]:

t
(x) =k
t
(x)
T
 
K
t
+
2
I

 1
Y
t
(1)
k
t
(x;x
0
) =k(x;x
0
) k
t
(x)
T
 
K
t
+
2
I

 1
k
t
(x) (2)

2
t
(x) =k
t
(x;x) (3)
where k
t
(x) = [k(x
1
;x);:::;k(x
t
;x)]
T
and K
t
= [k(x;x
0
)]
x;x
0
2At
B. Level set estimation
Given a set of noisy measurementsY
t
at locationsA
t
, we
want to classify the setD into the two setsL
t
(low) andH
t
(high) which are deÞned by the threshold value h. To this
end, we use the GP posterior mean
t
(x) and variance
t
(x)
and take the conÞdence bounds introduced by Gotovos et. al.
[13] into account:
H
t
=fxj
t
(x) 
t
(x)>hg (4)
L
t
=fxj
t
(x) +
t
(x)<hg (5)
Using the predictive variance of the GP ensures that we only
classify points x for which f is higher or lower than the
threshold with high certainty. The parameter  allows to
control the level of required conÞdence for classiÞcation.
In general, not all x2D can be classiÞed intoL
t
orH
t
leaving a set of remaining uncertain points:
U
t
=Dn (L
t
[H
t
): (6)
Our goal is to efÞciently gain enough information about
the points inU
t
, to classify them according to Equations 4
1
Also called Kriging models in Geostatistics, where they are often used
to model spatial phenomena [16].
2659
or 5. The LSE algorithm [13] samples points according to an
ambiguity measure, which assesses the ÒinformativenessÓ of
each unclassiÞed point with respect to the desired threshold.
Gotovos et al. [13] also propose a batch processing version
of the basic sequential algorithm, in which multiple points
are selected in a single iteration, and then apply a naive path
planning scheme using a Traveling Salesman Problem (TSP)
formulation to connect the measurement sites selected in
each batch. While this is related to our approach in the sense
that the expected measurements along a path are evaluated
jointly in a batch, the TSP version of LSE produces paths
that are unacceptably long for real-world applications and,
furthermore, do not incorporate possible motion constraints
of the robot. This motivates the development of our receding
horizon planner.
III. PATH PLANNING
To plan a path within some space of dimensiond (usually
2 or 3), we set up a graphG(V;E) with a set of vertices V
and edgesE. The structure of the graph encodes motion lim-
itations of the robot, as well as application-based restrictions.
We discuss speciÞcs of our implementation in Section IV-A.
To compare different measurement paths we need to
evaluate the ÒinformativenessÓ of a pathP given a number
of already existing measurements. If we deÞne a set A of
equally spaced measurement locations alongP, we could,
as a Þrst approach, use the conditional mutual information
between the set y
A
of measurements along the path and the
underlying Þeld f given a set y
t
of existing measurements:
F
t
(A) = MI(f;y
A
jy
t
) =
1
2
log
 

I +
 2
K
t
A



; (7)
where K
t
A
= k
t
(x;x
0
)
x;x
0
2A
is derived using Equation 2.
However, using the above we ignore the fact that we are
interested in focusing around a speciÞc threshold, and thus,
intuitively speaking, our sampling should concentrate on
acquiring information about the yet unclassiÞed areas, i.e.
the areas of high uncertainty about classiÞcation. To that
end, we propose the following modiÞed mutual information
metric, which only takes into consideration those points on
the path that are still unclassiÞed:

F
t
(A) =F
t
(

A) = MI(f;y 
A
jy
t
) with

A =A\U
t
: (8)
We use a dynamic programming approach with which we
plan a path for a receding horizon of Þxed size h
dp
. At
iteration t, this results in a pathP
t
=hx
t;1
;:::;x
t;h
dp
i of
...
...
...
e
1,4
e
2,4
e
3,4
p
1
V
2
p
2
p
3
V
1
V
3
x
1
x
2
x
3
x
4
x
5
x
n-2
x
n-1
x
n
V
hdp
x
s
Fig. 2. Schema of the planning procedure. The setsV
k
, considered sequen-
tially, are arranged in columns. The vertices x
i
are processed in sequence.
which the robot executes the Þrst segment fromx
t;1
tox
t;2
.
After that, we re-plan the path with x
t+1;1
=x
t;2
.
During each iterationt, the LSE-DP
2
algorithm loops over
h
dp
sets of verticesfV
k
g
k=1;:::;h
dp
. The Þrst set only consists
of the starting pointx
s
and the following are built according
to Equation 9. They contain all vertices that are connected
to at least one of the vertices in the previous set. Here, we
assume that all edges have equal traveling cost, for reasons
of clarity
3
. The setsV
k
are shown schematically in Figure 2.
For each vertexx
i
we initialize the best pathp
?
i
to the starting
point x
t;1
as an empty sequence.
V
1
=fx
t;1
g
V
k
=fx2Dj (x
0
;x)2E ^ x
0
2V
k 1
g (9)
p
?
i
=hi
We process the sets of vertices sequentially in a forward
direction. Starting at k = 2, we optimize paths for each
vertex x of V
k
by evaluating the combinations of the edges
e
x
0
;x
to all possible predecessor x
0
and their best paths p
?
x
0:
p
?
x
= argmax
p2P
x
0
;x
 

F
t
(p)

(10)
P
x
0
;x
=fhp
?
x
0;e
x
0
;x
ije
x
0
;x
2Eg; x
0
2V
k 1
; x2V
k
Figure 2 shows an example of this procedure schemat-
ically. The part highlighted in blue is already processed,
making V
3
the set of vertices that is currently being pro-
cessed. The vertex x
4
is currently considered. The best
path p
?
4
is the maximizer of the mutual information along
the three potential paths:hp
?
1
;e
1;4
i,hp
?
2
;e
2;4
i andhp
?
3
;e
3;4
i.
This procedure is very similar to the Dijkstra algorithm
[18]. However, we have to take into account that mutual
information and, consequently, our metric

F
t
satisÞes a
diminishing returns property: the ÓinformativenessÓ of an
edge is not constant, but rather depends on the other edges
that make up the path. Thus, we cannot simply add up the
gains of separate edges, but have to re-evaluate the entire
path back to the initial vertex x
s
for the evaluation at each
vertex. In fact, the above diminishing returns property can
be formally tracked down to the submodularity of mutual
information (and

F
t
), which in our example is expressed via
the following inequality:

F
t
(p
?
1
) +

F
t
(e
1;4
)

F
t
(hp
?
1
;e
1;4
i).
During the initial setup of the graph, no information about
the boundaries of the level sets is available, meaning that
the initial setup of the graph might not give the desired
resolution in the unclassiÞed regions (after a certain number
of iterations whenjU
t
j is relatively small). For this reason,
a predeÞned number of vertices can be added to the graph,
which lie in the unclassiÞed regions. This can be done in
multiple ways. We discuss the method we implemented in
section IV-A.
The complete algorithm: Algorithm 1 describes the
overall procedure, which repeatedly plans a path and exe-
cutes the Þrst step until all points inD are classiÞed. In
2
LSE-DP stands for Level Set Estimation with Dynamic Programming.
3
Our approach naturally extends to non-uniform edge lengths.
2660
Algorithm 1 The LSE-DP algorithm
Input: Graph G, planning horizon h
dp
, starting vertex x
0
Output: level sets H and L
1: L
0
=;;H
0
=;;U =D
2: t 1
3: x
s
 x
0
4: while U
t 1
6=; do
5: G
t
 add adaptive vertices(G;U
t
)
6: p
?
t
 plan path(G
t
;x
s
;h
dp
)
7: y
t
 sample along(hx
s
;p
?
t;1
i)
8: H
t
;L
t
;U
t
 classify(y
1:t
)
9: x
s
 p
?
t;1
; t t + 1
practice, different stopping criteria might be required, for
example, limiting the number of iterations, or the maximal
number of remaining unclassiÞed points.
IV. EXPERIMENTAL SETUP
A. Implementation details
a) GP model details: For our application, we have
chosen an anisotropic squared exponential kernel of the
following form:
k(x;x
0
) =
f
exp
 
 (x x
0
)
T
L (x x
0
)

; (11)
where L is a diagonal matrix with diagonal elements
(1=l
1
;:::; 1=l
d
) and l
i
is the length scale parameter for the
i-th dimension. The anisotropicity of this kernel function
accounts for the large differences in spatial dynamics that the
problem at hand exhibits. Furthermore, we used a constant
mean function m(x) = m
gp
. Since we operate in a two-
dimensional space, this yields a set of Þve hyper-parameters:
[m
gp
;
f
;l
1
;l
2
;], which were optimized with respect to
the marginal likelihood based on data sets from an earlier
sampling campaign (during summer 2011, [1]).
b) Motion constraints: The robot operates in a two-
dimensional space and uses two different actuators to control
the position along each of the dimensions. The boat is
controlled along a predeÞned line on the lake with con-
stant speed. The maximal power of the motors and the
minimal speed that can be measured by differentiating GPS
measurements deÞne the range [ v
h;min
;  v
h;max
] of applicable
speed  v
h
along the horizontal axis ~ e
h
. The vertical mo-
tion of the probe is controlled by the winch for which
the power of the motor imposes limits on the maximal
vertical speed:  v
v
2 [  v
v;max
;  v
v;max
]. We translate these
velocity constraints to connectivity constraints in the graph
by deÞning a range for the inclination that an edge can have:
m
e
2 [  v
v;max
= v
h;min
;  v
v;max
= v
h;min
].
To minimize the energy consumption of the robot, we
impose further constraints. Accelerating the boat, stopping
and turning around are energetically expensive operations.
Furthermore, a constant horizontal speed aids the control of
the depth of the probe. Since the probe is tethered via a
cable, the speed of the boat inßuences the depth due to drag
and lift forces (further details in [3]). Therefore, we constrain
500 0 100 200 300 400
2
10
15
5
18
Distance [m]
Depth [m]
L
t
H
t
U
t
Fig. 3. The gray path shows the path that was previously executed,
along with the positions of samples (gray dots). The pink circles depict
the positions of the vertices and the gray circles the ones that are adaptively
added. The green line shows the planned path. The background is colored
according to the classes low (Lt ), high (Ht ) and unclassiÞed (Ut ).
Time
Controller
Planner
Model
Arrival at p
t,2
Arrival at p
t+1,2
d
t
d
t+1
d
t+1
Fig. 4. Schematic timeline. Planning is executed early enough to be com-
pleted before arriving at the next vertex. During this time, new measurements
(green circles) are buffered and only added to the model after planning has
completed.
the speed of the boat to a constant value:  v
h
=  v
h;set
and
minimize the number of stops by only allowing a change of
direction at the end of a transect.
c) Size constraints: We organize the vertices in the
graph in constantly spaced columns along the horizontal
axis. The example shown in Figure 3 illustrates the columns
of vertices as pink circles. Connections between vertices
are only allowed among neighboring columns and due to
the constraints on the inclination of edges m
e
, vertices of
the same column can not be connected. There remain two
parameters for the density of the vertices: the horizontal and
vertical spacing of the nodes (s
h
and s
v
, respectively). The
controller of the boat uses a circle of 3 m radius around
the target point to detect the arrival at the target. Combined
with the positioning accuracy of the GPS receiver ( 0.5 -
2 m, depending on the speed of the boat) yields a theoretical
minimal value for s
h
of 5 m.
d) Adaptive vertices: As described above, we adap-
tively add vertices in each iteration to give the unclassiÞed
areas more chances to be visited. We select their depth from
a uniform distribution over the entire height of the column
and keep them if they are inU
t
. In the example of Figure 3,
these additional vertices are shown as gray circles.
e) Real-time implementation on the robot: With an
increasing number of samples, the planning iterations with
LSE-DP require more time. This has to be considered for
applying the planner in a real-time application on the lake.
Once the boat arrives at a vertex, it would be inefÞcient in
terms of time and energy to stop and wait for the new path
to be computed. We rather want to Þnish the new planning
iteration by the time that we arrive at the next vertex, such
that the boat can directly continue with the updated path.
Since the boat is traveling at constant speed, we can estimate
2661
the distance from the vertex at which we have to start the
planning. Thus, given the duration d
t
that the planner took
to compute the path at iteration t, we predict the duration
of the next planning step by an incremental linear factor
^
d
t+1
=kd
t
, withk 1, which might be over-conservative,
but ensures that the planning algorithm Þnishes on time.
Figure 4 shows a schematic representation of the real-time
implementation along a timeline. Once the boat is close
enough to the next vertex (closer than
^
d
t+1
v
h;set
), the new
planning iteration is started. While a new path is computed
no measurements can be added to the model. We buffer them
and add them once the planning procedure is completed.
B. Simulation experiments
We ran simulations on a data set that was previously
acquired in the lake. As dense ground truth, we considered
a GP posterior mean, conditioned on the real measurements.
In simulation, we compared our algorithm to three other
sequential methods to plan a path on the same graph.
1) Random: As a baseline for comparison, we imple-
mented a random selection scheme, which randomly
selects one of the connected vertices of the next
column at each iteration.
2) Greedy F
t
: This planner uses mutual information over
all points as described in Equation 7. It does not use
a look ahead, meaning that it greedily plans one step
at a time.
3) Greedy

F
t
This method uses the mutual information
of only unclassiÞed points (Equation 8), but also plans
greedily. This is the LSE-DP planner with a horizon
of 1.
The planning horizon for the LSE-DP planner was set to 6.
Larger horizons did not show signiÞcant improvements in
our experiments. As the exact ground truth of the data was
available, we used theF
1
score to evaluate the quality of the
classiÞcation on a dense grid of 10Õ000 points. UnclassiÞed
points counted as wrongly classiÞed.
C. Field tests
The experiments were conducted on Lake Zurich during
August 2013. Figure 5 shows the location of the experiment
transect, which is 500 m long. We selected the length of
the transect such that the robot can cover it up to 12 times
consecutively. This enabled us to collect data on a uniform
grid before and after the experiment, providing a comparison
data set for the evaluation of the adaptively planned path.
Thus, the experiment procedure consisted of three parts:
(1) Coverage on an uniform grid, (2) the adaptive level set
estimation experiment using the LSE-DP algorithm, (3) a
second coverage run along the same trajectory as the Þrst
one. We assume that the temporal dynamics of P . rubescens
are slow enough to be neglected. Taking coverage data sets
before and after the adaptive run allowed us to validate this
assumption.
The experiments were executed fully autonomously by
the robot using the real-time strategy described above. In
total, we have carried out three experiments on different
500m
Experiment transect
Lake Zurich
Detailed map
Zurich
Fig. 5. Map of the testing area. The testing transect is indicated in orange.
days. Besides the initial conÞguration of the parameters,
no external input was given to the robot during the entire
run of the experiment. Table I gives an overview of the
parameters that were used during the experiments. The
length scale parameters of the P . rubescens distribution are
quite stable over the summer and the measurement noise
is mainly depending on the probe, which is the same for all
experiments. The constant mean valuem
gp
and the threshold
value h have to be set according to the current density of
P . rubescens cells. Appropriate values were chosen based on
previous experimental work [1]. The planning horizon was
chosen higher than in the simulation experiments described
above as the expected computation times allow this slightly
more conservative choice.
V. RESULTS
A. Simulation experiments
Figure 6 compares the performance of the different meth-
ods we implemented to plan sampling paths on the graph.
The left plot shows the median performance of each method
against the number of samples. On the right, the worst
case scenario is shown. Clearly and expectedly, the random
version performed worst. The fact that the random planner
also eventually achieves relatively good results after adding
many samples is due to the trellis structure of the graph,
which enforces it to traverse the entire transect. Furthermore,
the adaptive addition of vertices increases the chances of
randomly selecting one in the unclassiÞed region. Both
greedy planners achieve relatively good results on the long
run. Again the structure of the graph works in their favor.
TABLE I
OVERVIEW OF PARAMETERS
Parameter Value Description
Model
l
1
148.41 m Horizontal length scale of the GP kernel
l
2
1.57 m Vertical length scale of the GP kernel

f
4.06 RFU Signal noise of the GP kernel
 1.1 RFU Measurement noise of the GP kernel
mgp 4.4 RFU Mean function of the GP
Graph
 v
h;max
1.0 m/s Maximal boat speed
 v
h;set
0.6 m/s Target boat speed
 vv;max 0.1 m/s Maximal winch speed
s
h
55.5 m Horizontal resolution ofG
sv 1.77 m Vertical resolution ofG
Planning
ne 10 Number of samples per edge
nv 15 Number of adaptive vertices per column
h 8 RFU Threshold value for classiÞcation
h
dp
8 Planning horizon
2662
However, both greedy planners have speciÞc disadvantages
when compared to the forward looking planner (LSE-DP):
The Þrst greedy planner (greedy F
t
) takes all points into
consideration and thus quickly gains information about the
entire distribution evenly. With increasing numbers of sam-
ples, however, it does not focus on the boundary areas (by
design) and the performance plateaus. The second greedy
planner (greedy

F
t
) only focuses on unclassiÞed points. If
no point in the unclassiÞed set can be reached in one step,
the next point has to be chosen blindly. This leads to similar
behavior as the random planner and the worst case shows that
it, e.g., requires almost three times as many samples as the
LSE-DP algorithm for a score of 0.6. The LSE-DP planner
shows the best performance for two reasons: 1) its score
rises quickly, which indicates efÞcient classiÞcation of the
majority of the points, 2) it focuses best on the unclassiÞed
regions, resulting in the highest Þnal score.
B. Field experiments
In total, we have conducted three experiments and, for
each of them, we have conducted a coverage run before and
after the LSE-DP experiment. Figure 7 shows the results
from one of the experiments. The plot on the top shows
the posterior mean of the GP model inferred from the Þrst
coverage run. The cyanobacterial layer was very stratiÞed,
without a clear maximum along the horizontal direction.
This provided a rather simple instantiation of the problem,
since only two horizontal boundaries were present. However,
situations of thermal stratiÞcation are common in aquatic
ecosystems and our data sets are thus quite representative.
The other two experiments have similar distributions. The
second plot shows the classiÞcation resulting from the Þrst
coverage run without taking into account the variance-based
conÞdence bounds (hence all points are classiÞed). The last
plot shows the adaptively planned path with the resulting
classiÞcation. The second coverage run was done after the
adaptive run, but is not shown in Figure 7 as it is very similar.
The two coverage runs before and after the LSE-DP
experiment can be used to assess the temporal stability of
the Þeld. In order to compare the two coverage runs, we
evaluated the GP mean on a dense grid of 10Õ000 points
0 150 300 450
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
no. samples
F
1
 score
Median of 10 tests
0 150 300 450
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
no. samples
Worst case
LSE-DP
random
greedy Ft
greedy
ø
Ft
LSE-DP
random
greedy Ft
greedy
ø
Ft
Fig. 6. Comparison of simulation results for different planning methods.
Depth [m]
 
 
5
10
15
0
5
10
15
20
Depth [m]
5
10
15
Depth [m]
Distance [m]
0 50 100 150 200 250 300 350 400 450 500
5
10
15
U
t
H
t
L
t
RFU
Fig. 7. Results from the Þeld experiment on Lake Zurich. Top: Samples
of the Þrst coverage run with the mean of the GP posterior with the color
representing P . rubescens level in RFU. Middle: The resulting ground truth
classiÞcation with the path of the probe in gray. Bottom: Resulting path
from the LSE-DP experiment.
for each run separately. If there were no temporal changes,
the difference of the posterior means should be very small
(i.e., only depend on measurement noise). For the three
experiments, these differences yielded the following RMS
values relative to the maximal measurement value: 8.3%,
3.2% and 2.9%. This indicates temporally stable conditions
for experiment two and three. In the Þrst experiment the
error value is higher. To assess if this had an inßuence on
the location of the threshold value, we classiÞed the Þeld
based both on the Þrst and the second coverage run. TheF
1
score between the two classiÞcation results returned high
values for all three experiments (0.955, 0.968 and 0.976
respectively), which supports the assumption of temporally
stable conditions for all three experiments.
For comparing the performance of the adaptive LSE-
DP algorithm and the coverage runs, we applied a slightly
different metric: We looked at the variance of the points
having a mean value close to the threshold value. Thus,
we evaluated the GP posterior mean over a dense setS
d
of 10Õ000 points. From this, we extracted the set of points
which are close to the threshold:S
p
=fx2S
d
jh h
eval
<
(x) < h + h
eval
g with h
eval
= 1. On these points, we
then evaluated the GP predictive variance. This gives a more
detailed evaluation of the regions around the threshold value,
on which we want to focus.
Figure 8 shows the median (bold) and the 10% and 90%
quantiles of the variance ofS
p
evaluated for both methods
after each full pass over the transect. The uniform coverage
runs outperform LSE-DP in the beginning as they cover the
space more efÞciently. The adaptive planner however is able
to focus on the regions of interest more closely towards the
end of the runs. These results support two conclusions. First,
the uniform coverage runs decrease the uncertainty efÞciently
over the entire Þeld. Second, Figure 8 shows that the re-
duction in variance decreases, emphasizing the fact that the
uniform distribution of samples along the grid is not focusing
2663
1 2 3 4
0.2
0.5
1
2
Pass
Variance?
t
(S
p
)
Experiment 1
1 2 3 4
Pass
Experiment 2
1 2 3 4
0.2
0.5
1
2
Pass
Experiment 3
LSE-DP uniform
Fig. 8. The graph shows the median of the predicted variance around the
threshold and the thin lines the 10% and 90% quantiles, respectively. Note:
logarithmic y-axis.
on the regions of interest. Only by speciÞcally and adaptively
focusing on sampling the regions of interest enables LSE-DP
to decrease the variance further. Finally, LSE-DP decreases
the uncertainty around the boundary to 73%, 68% and 71%
for the three experiments when compared to the results of
the uniform coverage runs.
VI. CONCLUSION
In this paper, we addressed the problem of adaptively
estimating level set boundaries in a scalar Þeld using a
mobile sensing agent. For this, we presented the LSE-DP
algorithm, which implements a receding horizon planning
scheme in order to plan non-myopically and overcome the
well-known problems of greedy path planners. Furthermore,
we applied our approach to a real environmental application,
which consists of the monitoring of a toxic cyanobacteria in
a lake using a robotic boat. We implemented the algorithm
on the robot and demonstrated fully autonomous execution of
Þeld experiments on the lake, during which the planning soft-
ware ran fully integrated on the boat. The results from three
Þeld experiments over a total distance of 18 km demonstrated
that the LSE-DP planner successfully focuses exploration on
the desired boundaries and achieves higher conÞdence levels
than simple coverage methods in the same amount of time.
In the context of the application presented, our results will
allows biologists to rapidly focus their research efforts on a
subpart of the lake with the boat being able to identify in-situ
regions of interest or punctual events.
In the future we would like to generalize our approach to
higher dimensions and along with that loosen the constraints
on the planning graph. Furthermore it would be interesting
to incorporate temporal dynamics and conduct experiments
over longer time periods.
ACKNOWLEDGMENT
This work was funded by the Swiss National Science Fund
(grant number CR2212-130023). The authors would like to
thank Hannes Sommer and Matthias Mock for their support
during many hours of testing on the lake.
REFERENCES
[1] M.-
`
E. Garneau, T. Posch, G. Hitz, F. Pomerleau, C. Pradalier, R. Sieg-
wart, and J. Pernthaler, ÒShort-term displacement of Planktothrix
rubescens (cyanobacteria) in a pre-alpine lake observed using an au-
tonomous sampling platform,Ó Limnology and Oceanography, vol. 58,
no. 5, pp. 1892Ð1906, 2013.
[2] T. Posch, O. K¬ oster, M. M. Salcher, and J. Pernthaler, ÒHarmful
Þlamentous cyanobacteria favoured by reduced water turnover with
lake warming,Ó Nature Climate Change, vol. 2, pp. 809Ð813, July
2012.
[3] G. Hitz, F. Pomerleau, M.-
`
E. Garneau, C. Pradalier, T. Posch, J. Pern-
thaler, and R. Y . Siegwart, ÒAutonomous Inland Water Monitoring:
Design and Application of a Surface Vessel,Ó Robotics Automation
Magazine, IEEE, vol. 19, no. March, pp. 62Ð72, 2012.
[4] M. Dunbabin and L. Marques, ÒRobots for Environmental Monitoring:
SigniÞcant Advancements and Applications,Ó Robotics & Automation
Magazine, IEEE, vol. 19, no. 1, pp. 24Ð39, 2012.
[5] J. Gould, D. Roemmich, S. Wijffels, H. Freeland, M. Ignaszewsky,
X. Jianping, S. Pouliquen, Y . Desaubies, U. Send, K. Radhakrishnan,
K. Takeuchi, K. Kim, M. Danchenkov, P. Sutton, B. King, B. Owens,
and S. Riser, ÒArgo ProÞling Floats Bring New Era of In Situ Ocean
Observations,Ó Eos Trans. AGU, vol. 85, no. 19, pp. 190Ð191, 2004.
[6] A. Krause, A. Singh, and C. Guestrin, ÒNear-optimal Sensor Place-
ments in Gaussian Processes: Theory, EfÞcient Algorithms and Em-
pirical Studies,Ó The Journal of Machine Learning Research, vol. 9,
pp. 235Ð284, 2008.
[7] J. Binney, A. Krause, and G. Sukhatme, ÒInformative Path Planning
for an Autonomous Underwater Vehicle,Ó in IEEE International Con-
ference on Robotics and Automation (ICRA). IEEE, 2010, pp. 4791Ð
4796.
[8] R. N. Smith, M. Schwager, S. L. Smith, B. H. Jones, D. Rus, and G. S.
Sukhatme, ÒPersistent Ocean Monitoring with Underwater Gliders:
Adapting Sampling Resolution,Ó Journal of Field Robotics, vol. 28,
no. 5, pp. 714Ð741, 2011.
[9] G. Hollinger and S. Singh, ÒProofs and experiments in scalable,
near-optimal search by multiple robots,Ó in Proceedings of Robotics:
Science and Systems IV , Zurich, Switzerland, 2008.
[10] K. H. Low, J. Chen, J. M. Dolan, S. Chien, and D. R. Thompson, ÒDe-
centralized Active Robotic Exploration and Mapping for Probabilistic
Field ClassiÞcation in Environmental Sensing,Ó in Proceedings of the
11th International Conference on Autonomous Agents and Multiagent
Systems-Volume 1. International Foundation for Autonomous Agents
and Multiagent Systems, 2012, pp. 105Ð112.
[11] G. A. Hollinger, B. Englot, F. S. Hover, U. Mitra, and G. S. Sukhatme,
ÒActive Planning for Underwater Inspection and the BeneÞt of Adap-
tivity,Ó The International Journal of Robotics Research, vol. 32, no. 1,
pp. 3Ð18, Nov. 2012.
[12] A. Singh, R. Nowak, and P. Ramanathan, ÒActive Learning for Adap-
tive Mobile Sensing Networks,Ó in 2006 5th International Conference
on Information Processing in Sensor Networks, 2006, pp. 60Ð68.
[13] A. Gotovos, N. Casati, G. Hitz, and A. Krause, ÒActive Learning for
Level Set Estimation,Ó in International Joint Conference on ArtiÞcial
Intelligence, 2013.
[14] M. Batalin, M. Rahimi, Y . Yu, and D. Liu, ÒCall and Response:
Experiments in Sampling the Environment,Ó in Proceedings of the 2nd
International Conference on Embedded Networked Sensor Systems,
2004, pp. 25Ð38.
[15] A. Singh, A. Krause, and W. J. Kaiser, ÒNonmyopic Adaptive In-
formative Path Planning for Multiple Robots,Ó Center for Embedded
Networked Sensing (CENS) Technical Report, vol. 70, pp. 1843Ð1850,
2009.
[16] N. A. C. Cressie, Statistics for Spatial Data. Wiley, 1991.
[17] C. K. I. Williams and C. E. Rasmussen, Gaussian Processes for
Machine Learning. The MIT Press, Cambridge, MA, USA, 2006.
[18] E. W. Dijkstra, ÒA note on two problems in connexion with graphs,Ó
Numerische Mathematik, vol. 1, no. 1, pp. 269Ð271, 1959.
2664
