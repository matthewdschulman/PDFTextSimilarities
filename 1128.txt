Passively Safe Partial Motion Planning for Mobile Robots
with Limited Field-of-Views in Unknown Dynamic Environments
S. Bouraine
y
, Th. Fraichard
z
, O. Azouaoui
y
and Hassen Salhi
?
Abstract— This paper addresses the problem of planning the
motion of a mobile robot with a limited sensory ﬁeld-of-view
in an unknown dynamic environment. In such a situation,
the upper-bounded planning time prevents from computing
a complete motion to the goal, partial motion planning is
in order. Besides the presence of moving obstacles whose
future behaviour is unknown precludes absolute motion safety
(in the sense that no collision will ever take place whatever
happens) is impossible to guarantee. The stance taken herein
is to settle for a weaker level of motion safety called passive
motion safety: it guarantees that, if a collision takes place,
the robot will be at rest. The primary contribution of this
paper is PASSPMP, a partial motion planner enforcing passive
motion safety. PASSPMP periodically computes a passively safe
partial trajectory designed to drive the robot towards its goal
state. Passive motion safety is handled using a variant of the
Inevitable Collision State (ICS) concept called Braking ICS, i.e.
states such that, whatever the future braking trajectory of the
robot, a collision occurs before it is at rest. Simulation results
demonstrate how PASSPMP operates and handles limited
sensory ﬁeld-of-views, occlusions and moving obstacles with
unknown future behaviour. More importantly, PASSPMP is
provably passively safe.
I. INTRODUCTION
Nowadays, the development of autonomous mobile robots
is the key issue of several new applications from industry,
public transportation to spatial and underwater exploration.
Such applications take place in the real world where the term
real world implies that:
1) The environment is dynamic and uncertain, it features
ﬁxed and moving obstacles whose future behaviour is
unknown.
2) The robot has only a partial knowledge of its surround-
ings because of its sensory limitations.
In order to carry out its task successfully in such situations,
an autonomous mobile robot should be able to navigate
around while guaranteeing its safety and that of its envi-
ronment. As of now, the constraints imposed on navigation
in dynamic environments are clearly established. As per [1],
they can be summarized as follows:
In a dynamic environment, one has a limited time to make
a motion decision, one has to reason about the future
evolutionoftheenvironmentanddosowithanappropriate
lookahead
1
.
From a motion safety point of view now, the presence
of moving obstacles whose future behaviour is unknown
y
CDTA (DZ);
z
INRIA, CNRS-LIG and Grenoble Univ. (FR);
?
Blida
Univ. (DZ).
1
The lookahead, a.k.a. time horizon, is how far into the future the
reasoning is done.
precludes absolute motion safety (in the sense that no col-
lision will ever take place whatever happens) is impossible
to guarantee [2]. To address that issue, authors such as [3]
have advocated the introduction of weaker levels of motion
safety level arguing that it is better to guarantee less than
to guarantee nothing. It is precisely the position we took
in [4] where it was settled for a motion safety level called
passive motion safety that guarantees that, if a collision takes
place, the robot will be at rest. [4] introduced a navigation
scheme called PASSAVOID for mobile robots with limited
ﬁeld-of-views placed in unknown dynamic environments.
PASSAVOID is reactive in nature, it operates with a given
time step and its purpose is to compute the control that will
be applied to the robot at the next time step. [4] formally
establishes that PASSAVOID is provably passively safe.
This paper builds upon [4] and presents an extension of
PASSAVOID called PASSPMP. PASSPMP operates accord-
ing to the Partial Motion Planning (PMP) principle that was
introduced in [5]. PMP is motion planning sheme that fulﬁlls
the constraints imposed by dynamic environments (limited
decision time), and attempts to bridge the gap between
reactive approaches (that computes the control to apply at the
next time step) and deliberative motion planning approaches
(that seeks to compute a complete motion to the goal).
At each cycle, PMP expands a search tree rooted at the
current state of the robot and when the time available is over,
PMP extracts from the tree the best partial motion towards
the goal computed so far. The process is repeated until
the goal is reached. PASSPMP is based upon the Rapidly-
exploring Random Tree (RRT) algorithm [6]. PASSPMP
can handle limited ﬁeld-of-views, occlusions and unknown
future behavior of the obstacles. Because, it is PMP-based,
PASSPMP has more insights than PASSAVOID. However,
similarly to PASSAVOID, PASSPMP is provably passively
safe.
The paper is organized as follows. In Section II, an
overview of the most relevant works is presented. Section III
explains the passive motion safety concept that must be guar-
anteed by PASSPMP which is later described in Section IV.
Finally, the simulation results are given in Section V.
II. RELATED WORKS
Motion safety have been analyzed thanks to the Inevitable
Collision States (ICS) concept developed in [7]. An ICS is
a state for which, no matter what the future trajectory of the
robot is, a collision eventually occurs. The key to motion
safety is clearly to stay away from ICS. However character-
izing the ICS set corresponding to a given current situation is
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 3576
in general challenging since it requires information about the
future evolution of the environment with a possibly inﬁnite
lookahead. In light of the ICS concept, it appears that, al-
though the robotics literature is rich in works concerned with
collision avoidance and safe navigation, most of them do
not offer an explicit formulation of the safety guarantee they
provide or the conditions under which they must operate [8].
Among them, the most interesting are those that acknowledge
the difﬁculty of getting a meaningful characterization of the
ICS set in real-world situation. To cope with that issue, these
approaches relies upon a relaxation of the ICS concept: they
seek to guarantee that the robot can only be in states where
it is possible to execute an evasive trajectory, e.g. a braking
manoeuvre for a car or a circling manoeuvre for a plane.
Example of this kind of approaches can be found in [9], [5],
[10], [11].
In order to address the uncertainty that prevails in the
real-world, in particular the uncertainty concerning the future
behaviour of the moving obstacles, probabilistic version of
the ICS concept have been proposed, e.g. [12] and [13]. Such
approaches are interesting but they do not allow strict motion
safety guarantee, they allow instead to minimize the risk.
Concerning sensory limitations, there are only a few
research works taking them into account. For instance,
the occlusion problem, i.e. the existence of regions that
are hidden by other obstacles, is addressed in a coarse
manner in [14] and in a more principled manner in [15].
The occlusion and the limited ﬁeld-of-view problems are
addressed in [7] and [16]. [7] addresses the case of a mobile
robot moving in a static environment; its approach is general
and ICS-based. While [16] considers dynamic environments,
it does so primarily with a path-velocity decomposition
perspective [17].
PASSPMP, the contribution of this paper is an extension of
PASSAVOID [4]. PASSPMP deals with limited ﬁeld-of-views,
occlusions and unknown future behavior of the obstacles.
Because, it is PMP-based, PASSPMP is not purely reactive,
it has more insights. However, similarly to PASSAVOID,
PASSPMP is provably passively safe.
III. PASSIVE MOTION SAFETY
Generally, absolute motion safety is impossible to guar-
antee in dynamic environments given the unknown future
behavior of moving objects and with a robot having a limited
ﬁeld-of-view (presence of occlusions, unseen objects, etc.).
These harsh constraints impose an alternative solution which
is to settle for weaker level of motion safety by guaranteeing
at least, if a collision takes place the robot will be at rest.
This form of motion safety is dubbed passive motion safety.
Introducing this level of motion safety gives a relaxation
to the original ICS concept of [7] namely the braking ICS
concept introduced in [4]. A braking ICS (denoted ICS
b
) is
a state for which no matter what the future trajectory of the
robot is, a collision takes place before the robot is at rest.
With duality to passive motion safety concept, a state which
is braking ICS-free is passively safe (p-safe).
In [4], an efﬁcient Braking ICS-Checker (called
ICS
b
-CHECK) was designed, it checks whether a given state
trajectory is braking ICS or not (i.e. p-safe or not) for a given
model of the future. This algorithm is used in the passively
safe planner (PASSPMP) (presented in xIV) guaranteeing
the generation of p-safe partial trajectories.
However, Braking ICS is deﬁned given an appropriate
look-ahead (time horizon) because motion safety guaran-
tee requires to reason about the future evolution of the
environment. For absolute motion safety, the lookahead is
inﬁnite which is impossible to verify unless the environment
is a priori known. But for passive motion safety a ﬁnite
lookahead called time horizon should be set.
If T
h
is a valid lookahead, then computing ICS
b
requires
to consider the model of the future up to this time.
This notion of lookahead will step in PASSPMP cycles,
where an updated model of the future is required.
IV. PASSIVELY SAFE PLANNING
In this paper, the aim is to build a passively safe trajectory
from an initial state to a given goal, verifying both safety cri-
terion and best convergence towards the goal. The proposed
method uses a replanning process that interleaves planning
with execution so that the robot may compute partial plans
leading to a passively safe partial motion planner. This
planner is developed for a mobile robotA with a limited
ﬁeld-of-view placed in an unknown dynamic environment.
A’s motion is governed by differential equations of the form:
_ s =f(s;u) (1)
where s2S is the state ofA, _ s its time derivative and
u2U a control.S andU are respectively the state space
and the control space ofA.
This planner aims to driveA from its initial position until
it reaches the goal guaranteeing passive motion safety no
matter what happens in the environment. In other words, it
guarantees two conditions:
1) If a collision takes place, it is guaranteed thatA will
be at rest when it occurs (passive safety).
2) A chooses the optimal trajectory to reach the goal.
To summarize, our purpose is to design a passively safe
navigation scheme based on a PMP and guaranteeing passive
safety. To do so, a number of points must be veriﬁed:
 Kinematic and dynamic constraints of the robot.
 Reasoning about the future.
 React for a time horizon.
 Passive safety guarantee (based on ICS
b
-CHECK).
 DriveA to the goal.
A. Partial Motion Planning (PMP) Principle
Robot navigation requires the interleaving of sensing,
decision-making and execution. In an unknown and dynamic
environment, it is necessary to continuously sense the envi-
ronment and regularly update the world model upon which
navigational decisions are made. Likewise, the decision-
making module must be called frequently and has a ﬁnite
3577
Fig. 1: Timeline of the decision-making and execution pro-
cesses in a partial motion planner.
time to decide what to do next. In our case, this decision-
making module is based upon a partial motion planner.
Instead of global motion planners that compute a complete
trajectory to the goal, PMP computes partial trajectories.
The set of these trajectories drives the robot to the goal.
Irrespective of how the decision-making module works, the
bottom line is that a trajectory must be available at each
decision-making cycle.
The timeline of the decision-making process of A is
illustrated in Fig. 1. At time t
0
, A is in state s
0
, it is
currently executing a trajectory 
0
that will drive it to the
states
1
at timet
1
, the next cycle time. LetW(t
0
) denotes the
world model which is available at time t
0
. During the time
interval [t
0
;t
1
], the decision-making module has to compute
the trajectory 
1
that will be executed during the next cycle
time [t
1
;t
2
]. At time t
1
, the process is repeated based on
W(t
1
), the updated model of the environment, and so forth.
From a passive motion safety perspective, the braking ICS
concept brings to light two things: the ﬁrst one is that, it
is not sufﬁcient to consider that all the trajectories 
i
are
collision-free; they must be braking ICS-free meaning that,
at each time instant,A must always be in a state which is not
a braking ICS (if a collision occurs, the robot is at rest). The
second one is that, braking ICS-ness is always deﬁned wrt
the used world model (in particular the model of the future).
Regarding PMP process above, it should be noted that

1
is computed using the world modelW(t
0
). It can be
computed so as to be braking ICS-free but if at time t
1
(when the updated world modelW(t
1
) is available),s
2
turns
out to be a braking ICS wrtW(t
1
), collision occurs. This
remark highlights the fact that reasoning about the future
evolution of the environment is critical when it comes to
motion safety in dynamic environments. Therefore, reasoning
about a limited time horizon (lookahead) (T
h
) during which
safety is guaranteed, is required. In this case, the world model
W(t
0
) will be valid during the time interval [t
0
;t
1
[[[t
1
;T
h
]
(withT
h
>t
2
). Consequently, it is always guaranteed thats
2
is braking ICS-free. Introducing this notion of passive motion
safety in PMP process leads to the new version PASSPMP,
described in next section.
B. Passively Safe PMP (PASSPMP)
PASSPMP is a partial motion planner that operates within
Fig. 2: PASSPMP process.
a given time cycle 
cycle
. During this time, a p-safe par-
tial trajectory is computed. It veriﬁes two conditions: (1)
corresponding states must be p-safe (i.e. ICS
b
-free) and
(2) convergence towards the desired goal. This trajectory
has an execution time duration 
e
. However, only the part
corresponding to the duration 
cycle
is executed because at
the end of each cycle a new computed partial trajectory is
available (see Fig. 2). 
cycle
should be set carefully in a
way that passive safety still always guaranteed. The planning
cycle has to return a decision within a bounded time, which
depends upon the current model of the environment (model
of the future). It is the minimum time to collision named
decision time
d
. Thus, the time cycle must be always lower
than this decision time:

cycle
<
d
(2)
Assuming thatA is equipped with range sensors such as laser
telemeters or range cameras, it can only perceive a subset of
the workspaceWS; this subset isA’s ﬁeld-of-view; its shape
is arbitrary and its range is 360

. It represents the region of
WS which is free of objects at the sensing time while the
remaining regions ofWS represent the space where there
might be objects that can be ﬁxed or moving, seen or unseen.
Motion safety requires reasoning about the future motion
of the objects in the environment. As it is assumed thatA
cannot distinguish between ﬁxed and moving objects (every
object observed is treated as a potentially moving object)
and that it has no information about their future behavior,
the model of the future used herein is conservative: given an
upper-bound on the velocity of the objects, every point in
the region outside the ﬁeld-of-view is modeled as a disc that
grows as time passes, i.e. a cone in spacetime.
However, as time passes the region ofWS occupied by
this growing discs grows too. This is why, the model of the
future may be valid up to a ﬁnite time; hence an appropriate
time horizon (T
h
) should be set.
The braking ICS concept considers braking trajectories ~ u
b
3578
of ﬁnite durationt
b
, witht
b
the braking time of ~ u
b
(braking
trajectory deﬁnition is given in [4]). t
b
is the ratio of the
robot’s linear velocity and its maximum linear acceleration.
For an arbitrary subsetE of the whole set of possible braking
trajectories, a ﬁnite time horizon T
h
exists:
T
h
= max
~ u
b
2E
ft
b
g (3)
For motion safety guarantee, it sufﬁces to consider the
model of the future up to time T
h
. This time denotes how
far into the future, objects behavior has been modeled and
predicted.
As the executed trajectory during the current PASSPMP’s
cycle is based on the previous PASSPMP’s cycle result, the
decision time 
d
cannot exceed the time horizon (otherwise
A would run out of a valid plan for the next execution
cycle). However, there is no lower bound for the decision
time, it depends on the complexity of the motion planning
exploration itself. In fact, we set:

d
<<T
h
(4)
Besides, to guarantee that the executed trajectory is still
valid, the following condition must be veriﬁed:

d
+
e
T
h
(5)
where 
e
is the execution time. As a conclusion, PASSPMP
cycle is set as a ﬁxed period of time in order to regularly get
an update of the environment. Given equations 2 and 5, and
knowing that the world modelW is valid during the time
interval [t
k
;t
k+1
][ [t
k+1
;T
h
] (with T
h
> t
k+2
and T
h
>
2
cycle
), the following condition could be set to guarantee
passive motion safety:

cycle
<min(
d
;
1
2
T
h
) (6)
This condition guarantees that the time horizon is still valid
for both trajectory planning and execution.
All the above conditions are important for safety guarantee
in the PASSPMP process. However, guarantying passive
motion safety requires proving that a collision will never
occur while A is moving. Thus, it must be proved that,
at each time cycle PASSPMP would always ﬁnd a partial
trajectory that is p-safe. To that end, some properties are
required and henceforth introduced in what follow. Let ﬁrst
deﬁne what is a p-safe state.
Def. 1 (P-Safe State): A state s
0
is passively safe or p-
safe (it is not a braking ICS) if it exists at least one braking
trajectory ~ u
b
starting at s
0
which is collision-free untilA
stops.
Property 1 (P-Safe trajectory): For a given state trajec-
tory  betweens
0
ands
j
, if (1) the state trajectory between
s
0
and s
j
is collision-free (with respect to the conservative
model of the future) and (2) s
j
is p-safe, then the states
belonging to  are p-safe, therefore,  is p-safe.
Proof: At ﬁrst, we deﬁne a state s
i
, with 0 < i < j
belonging to a state trajectory betweens
0
ands
j
, Let assume
that: (1)s
2
is p-safe, i.e. it exists at least one braking trajec-
tory starting ats
2
which is collision-free untilA has stopped.
(2)s
1
is not p-safe,i.e. whatever existing braking trajectories,
collision occurs (no collision-free braking trajectory).
However, as the state trajectory between s
0
and s
j
is
collision-free and there exists a braking trajectory for the
state s
2
, starting from s
1
, A can brake down without a
collision occurs. Therefore, s
1
is p-safe: contradiction with
(2).
Property 2 (Passive Safety Guarantee): If the state s
0
is
p-safe then there exists at least one p-safe state trajectory
that drivesA through states that are also p-safe.
Proof: According to deﬁnition 1, if s
0
is p-safe then
there exists at least one braking trajectory ~ u
b
(between s
0
ands
j
) which is collision-free untilA stops. At the states
j
,
A is at rest then s
j
is p-safe. Applying property 1, since
the braking trajectory ~ u
b
is collision-free and s
j
is p-safe,
~ u
b
is henceforth p-safe and every state of this trajectory is
also p-safe. Let ~ u
b
is a special case of possible trajectories,
then it is proved that there exists a p-safe trajectory.
Property 2 allows designing a version of PASSPMP that is
passively safe i.e. at each planning cycle, it is guaranteed
that PASSPMP can plan a p-safe partial trajectory to be
executed in next cycle. It is an iterative process, repeated
untilA reaches its goal.
Algorithm 1 describes PASSPMP behavior in a k cycle.
Algorithm 1 PASSPMP.
Input: Model of the future W(t
k
;T
h
), goal s
g
, partial
trajectory 
k
to execute.
Output: The selected partial trajectory 
k+1
to execute in
cycle k + 1.
1: TREE=EXPLORE STATE TIME(W(t
k
;T
h
),s
k+1
); //
Explore the state time space ofA, t2 [t
k+1
;t
k+2
]
2: 
k+1
=SELECT BEST PTRAJ(TREE,s
g
); //Select the
best partial trajectory.
Algorithm 1 takes as input the model of the future
W(t
k
;T
h
) which is available at time t
k
and valid up to
time T
h
(i.e. sufﬁcient to plan the partial trajectory 
k+1
during the current cycle k and to execute it during the
next cycle k + 1). The algorithm takes also as input the
goal to reach, and the partial trajectory computed in the
previous cyclek 1 to be executed during the current cycle.
PASSPMP algorithm operates by ﬁrst exploring the state
time space ofA (witht2 [t
k+1
;t
k+2
]) through the function
EXPLORE STATE TIME (line #1 of the algorithm). To do
so, a diffusion technique is used, by extending a tree rooted
at the state s(t
k+1
) (with t
k+1
= t
k
+
cycle
). For reason
of simplicity and facility of adaptation to a partial concept,
the adopted technique is inspired from RRT proposed in
[6]. As passive safety must be a criterion in trajectories
selection, the state time space is explored using what we
called p-safe RRT (which is detailed below). During this
3579
step, the set of partial trajectories are computed and then
deﬁned with respect to passive safety guarantee (based on
ICS
b
-CHECK algorithm [4]). In step #2 of the algorithm,
the function SELECT BEST PTRAJ selects the best partial
trajectory verifying passive safety criterion and convergence
towards the goal.
The algorithm is repeated iteratively until reaching the
goal (s
g
).
1) p-safe RRT: In order to explore different possible
trajectories, a tree is grown in the state time space of
A using RRT [6], where nodes represent robot states
that are related with trajectory primitives. In PASSPMP
concept, the expansion is done passively safe, hence the
new version of RRT algorithm namely p-safe RRT algo-
rithm (given in algorithm 2). This algorithm describes the
function EXPLORE STATE TIME of PASSPMP algorithm
(algorithm 1). It aims to expand the tree given the model
of the future (future behavior of moving objects) and an
initialized tree rooted at the initial state of the cycle to
plan (s
k+1
). An exhaustive search based expansion method
is used. Each node is expanded according to a selected
control space sampling set (line #7) using the function EX-
PANSION WITH SAFETY CHECK (line #5). This function
extends a node (state) s
i
with a control u
j
generating a
new trajectory primitive that is checked for passive safety.
Based on property 2, it is guaranteed that if s
k+1
is p-
safe, there exists always a p-safe partial trajectory. As s
k+1
belongs to previous p-safe partial trajectory (from previous
PASSPMP cycle), s
k+1
is p-safe thus there exists always
a p-safe partial trajectory untilA reaches its goal. Using
property 1, it is guaranteed that a trajectory primitive

new
= fs
i
;:::;s
new
g is p-safe if 
new
is collision-
free and s
new
is p-safe. The state is checked to be p-safe
or not using BRAKING ICS CHECK function (line #21 of
algorithm 2), which is based on ICS
b
-CHECK algorithm
[4]. If property 1 is veriﬁed, the corresponding trajectory
primitive (
new
) and expanded node (s
new
) are added to
the tree (lines #24 and #25 of algorithm 2). In case of
no p-safe trajectory primitive is found for a given node
s
i
, the function GENERATE BRAKING TRAJ looks for a
collision-free braking trajectory to guarantee that the robot
will be at rest if a collision could occur. As the node s
i
is p-safe it is guaranteed that it exists at least one braking
trajectory ~ u starting ats
i
which is collision-free untilA has
stopped (verifying passive motion safety property established
in [4]).
2) Trajectory selection: In algorithm 1 (PASSPMP algo-
rithm), the function SELECT BEST PTRAJ selects from the
expanded tree (using algorithm 2) the best partial trajectory
during the planning cycles. This selection is based on two
conditions: (1) The passive motion safety of the partial
trajectory. (2) Convergence towards the goal: a weighted cost
function is computed based on a distance metric and time
cost. Thus, the selected partial trajectory could be passively
safe at ﬁrst. Using algorithm 2, a p-safe partial trajectory
is a concatenation of p-safe trajectory primitives. Doing so,
many partial trajectory possibilities are available. To settle
Algorithm 2 p-safe RRT algorithm.
Input: Model of the futureW(t
k
;T
h
), s
k+1
(from 
k
),

cycle
(with 
cycle
<min(
d
;T
h
=2)), initialize the tree:
TREE =fs
0
;:::;s
m
g[f
0
;:::;
m 1
g
(corresponding set of nodes and set of trajectory primitives).
Output: TREE.
1: while t<
cycle
do
2: //set of tree nodes
3: for i=0 to m do
4: //Select the control space sampling set U
5: SampleU;U =fu
1
:::u
n
g
6: Forall u
j
2U do
7: (s
new
;
new
) EXPAN-
SION WITH SAFETY CHECK(s
i
;u
j
;W; TREE);
8: end
9: if s
new
=; then
10: GENERATE BRAKING TRAJ();
11: end if
12: end for
13: return TREE
14: end while
15:
16: Procedure EXPANSION WITH SAFETY CHECK
(s
i
,u
j
,W; TREE)
17: //Check p-safety
18: 
new
 GENERATE TRAJ PRIM(s
i
;u
j
)
19: //
new
=fs
i
;:::;s
f
g
20: s
new
=s
f
;
21: if BRAKING ICS CHECK(s
new
,W) = False then
22: //s
new
is p-safe
23: if 
new
is collision-free then
24: TREE = TREE[s
new
;
25: TREE = TREE[
new
;
26: return s
new
,
new
27: end if
28: end if
29: EndProcedure
which p-safe partial trajectory (between s
k+1
and s
k+2
)
could be selected, a weighted cost function is computed. It
is expressed as follows:
f
g
(s
k+2
) =w
d
jjs
k+2
 s
g
jj +w
t
T

(7)
The function f
g
determines the best partial trajectory 
k+1
i.e. the optimal in distance and in time with respect to
the goal. It depends on the Euclidean distance between the
trajectory ﬁnal state (s
k+2
) and the goal state (s
g
) associated
to a distance weighting factor w
d
(minimizing distance to
the goal). Besides, this function depends on the trajectory
cumulative time (T

) associated to a time cost weighting
factor w
t
(minimizing time to the goal).
V. SIMULATION RESULTS
To demonstrate and validate PASSPMP’s passive motion
safety, it has been implemented and tested in simulation on
3580
a scenario handling moving obstacles with unknown future
behavior, for a mobile robot with a limited ﬁeld-of-view. The
partial motion can be described as a concatenation of several
geometrical primitives.
The model ofA is that of a standard car-like vehicle with
two ﬁxed rear wheels and two orientable front wheels. A
state ofA is a 5-tuple s = (x;y;;v;) with (x;y) the
coordinates of the rear axle midpoint,  the orientation of
A, v the linear velocity ofA, and  the orientation of the
front wheels (steering angle). A control ofA is a couple
u = (u

;u

) with u

the linear acceleration of the rear
wheels and u

the steering angle velocity. Let L denote
the wheelbase ofA. The motion ofA is governed by the
following differential equations:
2
6
6
6
6
4
_ x
_ y
_

_ v
_

3
7
7
7
7
5
=
2
6
6
6
6
4
v cos
v sin
v tan=L
0
0
3
7
7
7
7
5
+
2
6
6
6
6
4
0
0
0
1
0
3
7
7
7
7
5
u

+
2
6
6
6
6
4
0
0
0
0
1
3
7
7
7
7
5
u

(8)
withjvjv
max
;jj
max
;ju

ju
max
andju

ju
max
.
Simulation scenario features 22 objects moving arbitrarily
in a 2D workspace. Their motion is unaffected by the other
objects.
Fig. 3a shows an example of p-safe RRT construction
for the ﬁrst PASSPMP cycle. The tree is extended through
the set of controls deﬁned by a constant maximum lin-
ear acceleration u

= u
max
and a constant steering
angle velocity ju

j  u
max
(namely, the control sets:
[u

; u

]; [u

; 0]; [u

;u

]). It is checked for passive motion
safety using ICS
b
-CHECK algorithm (line #7 of algorithm
2). As illustrated in Fig. 3a, trajectory primitives represented
in blue are p-safe, while those represented in cyan are not
p-safe. The tree is extended in a way that each node is
extended with at least one p-safe trajectory primitive. In
case of no p-safe trajectory primitive is found, the node is
extended with a collision free braking trajectory (lines #9
and #10 of algorithm 2) to guarantee that the robot stops
before collision occurs (passive motion safety guarantee).
Hence, among a set of possible braking trajectories, 21 in
this example, (represented in black), the selected braking
trajectory is the one that is collision-free and closest to the
goal (represented in magenta). During a planning cycle, the
best partial trajectory is selected given the two conditions:
(1) Passive motion safety of the partial trajectory and (2)
the optimal both in distance and in time with respect to
the goal (line #2 of algorithm 1). In case of the grown
tree of Fig. 3a, the selected partial trajectory is represented
in green (see Fig. 3b). To reach the goal in a passively
safe manner, PASSPMP drives the robot following a set
of concatenated partial trajectories (computed at different
cycles). Fig. 4 shows grown trees along PASSPMP cycles
untilA reaches the goal.
The obtained results are also illustrated in a short ﬁlm
provided as a multimedia attachment to this paper. The
corresponding velocity evolution ofA is depicted in Fig.
5, whereA exhibits the following behavior:
(a)
(b)
Fig. 3: p-safe RRT at work: (a) p-safe RRT construction dur-
ing one PASSPMP cycle (b) corresponding selected partial
trajectory (in green). The robotA is the disc at the center,
the moving discs in blue are objects and the red mark is the
goal to reach byA
.
Fig. 4: p-safe RRTs corresponding to different PASSPMP
cycles (left) and the overall selected trajectory represented
in green (right).
3581
1) A increases its velocity until it reaches the maximum
value. PASSPMP keepsA moving in p-safe manner
(no collision occurs).
2) at the end of the ﬁrst cycle, even ifA could move
without risk of collision, it gradually reduces its ve-
locity (until v = 14ms
 1
). This is due to the limited
ﬁeld-of-view ofA: as unseen objects are considered
(the presence possibility of an object forcesA to brake
down until it stops in order to keepA in p-safe state
(if collision occursA will be at rest).
3) at next cycle, a new plan is considered using a new
update of the world model. A stops reducing its
velocity and rises it again until the maximum value and
maintains it.Once again it brake down (passive motion
guarantee) untilv' 3ms
 1
(always due to the limited
ﬁeld-of-view consideration).
4) during the last cycle,A reaches the goal. It selects a
collision-free braking trajectory that drivesA to the
closest state to the goal with a zero velocity (A stops)
(see Fig. 4).
Fig. 5: Velocity proﬁle ofA.
In the course of several runs, these experiments have
demonstrated the capability of PASSPMP to drive the robot
to a predeﬁned goal when enforcing passive motion safety.
VI. CONCLUSION AND FUTURE WORK
This paper has addressed the problem of planning the
motion of a mobile robot with a limited sensory ﬁeld-of-
view in an unknown dynamic environment. A passively safe
motion planner called PASSPMP has been presented: it is
a partial motion planner enforcing passive motion safety.
PASSPMP periodically computes a passively safe partial
trajectory designed to drive the robot towards its goal state.
Passive motion safety is enforced thanks to a variant of the
Inevitable Collision State (ICS) concept called Braking ICS,
i.e. states such that, whatever the future braking trajectory of
the robot, a collision occurs before it is at rest. Simulation
results have demonstrated how PASSPMP operates and han-
dles limited sensory ﬁeld-of-views, occlusions and moving
obstacles with unknown future behaviour. PASSPMP works
better than PASSAVOID, its purely reactive counterpart that
was presented in [4] however the analysis of the convergence
towards the goal of PASSAVOID remains to be done. It could
also be interesting to explore more sophisticated levels of
motion safety such as the passive friendly motion safety
mentioned in [3]: it guarantees that, if a collision takes place,
the robot will be at rest and the colliding object could have
the time to stop or avoid the collision (if it wants to).
REFERENCES
[1] T. Fraichard and T. Howard, “Iterative motion planning and safety
issue,” in Handbook of Intelligent Vehicles, A. Eskandarian, Ed.
Springer, 2012, pp. 1433–1458.
[2] T. Fraichard, “Will the driver seat ever be empty?” INRIA” Research
Report, 2014.
[3] K. Macek, D. Vasquez-Govea, T. Fraichard, and Siegwart, “Towards
safe vehicle navigation in dynamic urban scenarios,” Automatika,
vol. 50, no. 3-4, 2009.
[4] S. Bouraine, T. Fraichard, and H. Salhi, “Provably safe navigation for
mobile robots with limited ﬁeld-of-views in dynamic environments,”
Autonomous Robots, vol. 32, no. 3, pp. 267–283, 2012, [www].
[5] S. Petti and T. Fraichard, “Safe motion planning in dynamic environ-
ments,” Proc. of the IEEE-RSJ Int. Conf. on Intelligent Robots and
Systems, 2005.
[6] S. LaValle and J. Kuffner, “Randomized kinodynamic planning.”
InternationalJournalofRoboticsResearch, vol. 20, pp. 378–400, May
2001.
[7] T. Fraichard and H. Asama, “Inevitable collision states. a step towards
safer robots?” Advanced Robotics, vol. 18, no. 10, 2004.
[8] T. Fraichard, “A short paper about motion safety,” in IEEE Int. Conf.
Robotics and Automation, Roma (IT), Apr. 2007.
[9] D. Hsu, R. Kindel, J.-C. Latombe, and S. Rock, “Randomized kinody-
namic motion planning with moving obstacles,” Int. Journal Robotics
Research, vol. 21, no. 3, Mar. 2002.
[10] K. Bekris and L. Kavraki, “Greedy but safe replanning under kino-
dynamic constraints,” in IEEE Int. Conf. Robotics and Automation,
Rome (IT), Apr. 2007.
[11] M. Seder and I. Petrovic, “Dynamic window based approach to mobile
robot motion control in the presence of moving obstacles,” in IEEE
Int. Conf. Robotics and Automation, Roma (IT), Apr. 2007.
[12] D. Althoff, M. Althoff, D. Wollherr, and M. Buss, “Probabilistic
collision state checker for crowded environments,” in IEEE Int. Conf.
on Robotics and Automation, Anchorage (US), May 2010.
[13] A. Bautin, L. Martinez-Gomez, and T. Fraichard, “Inevitable collision
states: a probabilistic perspective,” in IEEE Int. Conf. on Robotics and
Automation, 2010.
[14] M. Sadou, V . Polotski, and P. Cohen, “Occlusion in obstacle detection
for safe navigation,” in IEEE Intelligent Vehicles Symp., Parma (IT),
June 2004.
[15] W. Chung, S. Kim, M. Choi, J. Choi, H. Kim, C. Moon, and
J. Song, “Safe navigation of a mobile robot considering visibility of
environment,” IEEE Trans. Industrial Electronics, vol. 56, no. 10, Oct.
2009.
[16] K. Madhava Krishna, R. Alami, and T. Simeon, “Safe proactive plans
and their execution,”RoboticsandAutonomousSystems, vol. 54, no. 3,
Mar. 2006.
[17] K. Kant and S. Zucker, “Toward efﬁcient trajectory planning: the path-
velocity decomposition,” Int. Journal Robotics Research, vol. 5, no. 3,
Fall 1986.
3582
