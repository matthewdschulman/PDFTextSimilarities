An Admittance Control Scheme for Haptic Interfaces Based on
Cable-Driven Parallel Mechanisms
Alexis Fortin-Cö ot« e, Philippe Cardou and Cl« ement Gosselin
AbstractÑ This paper presents a cable-driven parallel mech-
anism as a haptic interface and its underlying control method.
This human-sized, three-degree-of-freedom mechanism has a
tetrahedral architecture, four cables and evolves in three-
dimensional space. A brief review of the kinematics of the
mechanism is presented. Also, an admittance control law
coupled with a closed-loop velocity controller is proposed. The
control method is then reÞned by introducing adaptations for
smooth surfaces and sharp edges. This control method is then
validated by experimental results. Furthermore, the geometry
of the mechanism is identiÞed by a method that does not require
any other sensor than the motor encoders.
I. INTRODUCTION
With virtual reality becoming more and more prominent
with CA VE-style environments and wearable commercial
devices like the occulus rift [1], arises a need to physically
interact with these virtual worlds. Some devices providing
force feedback and haptic rendering are already available to
consumers, e.g., the PHANToM [2] and Falcon (by Novint
inc). Both of these devices use rigid-link robots to transmit a
force to the user. Another kind of device is the Maglev 200
(by Butterßy Haptics, LLC), which, as its name implies, uses
magnetic Þelds to transmit haptic rendering to the user. All
these solutions work for their respective domains but suffer
from a common drawback: their limited workspace.
This is where a cable-driven parallel mechanism (CDPM)
as that illustrated in Fig. 1 can provide an advantage relative
to conventional mechanisms. CDPMs are known to possess
a large workspace and a low inertia, two traits of a good
haptic feedback mechanism. CDPMs are currently used in
commercial applications like the Skycam [3] and as a control
module for a radio telescope [4], for example.
The advantages mentioned above have also led researchers
to use them as haptic interfaces. Several research initiatives
addressed the development of haptic CDPMs, beginning
as early as 1989 [5]. Most reports concentrate on the
architecture and components of the CDPMs. Among the
pioneering designs, we Þnd the SPIDAR [6], a spatial haptic
device that generates forces on the userÕs Þnger, but little is
shown of the control laws that must have been used. Also,
Gallina [9] presented the Feriba-3: a planar three-degree-of-
freedom haptic interface sliding on compressed air to limit
*This work was supported by the Natural Sciences and Engineering
Research Council of Canada (NSERC) and by the Canada Research Chair
program.
The authors are with the Laboratoire de robotique, D« epartement de g« enie
m« ecanique, Universit« e Laval, Qu« ebec, Canada, G1V 0A6
alexis.fortin-cote.1@ulaval.ca and
philippe.cardou@gmc.ulaval.ca and
gosselin@gmc.ulaval.ca
Handle
F/T
sensor
Fig. 1: Photograph of the CDPM used in this work.
friction. More work, [7], [8], followed up on those initials
research, but did not concentrate either on the control law.
Nevertheless, we could infer that they relied on an impedance
control scheme, meaning that the authors had to mitigate
the effects of friction to obtain a good rendering. Williams
[10] worked on a planar device and also used an impedance
control law without a force sensor. Morizono et al. [11]
used an impedance scheme with force feedback on each
string to control the wrench applied by a sport simulating
device. In this paper, we rely on an admittance control
scheme, as it seems better suited to render contacts with hard
surfaces. Such an approach to haptic rendering is explained
by Carignan and Cleary [12], but not for a CDPM. Gosselin
et al. [13] worked on an admittance control scheme for a
planar CDPM, but used closed-loop position feedback as
opposed to velocity feedback, which is used here.
Furthermore, it is desired to take advantage of the re-
conÞguration capabilities of CDPMs in order to adapt their
workspace to different virtual environments. This requires
that the mechanism be able to determine its geometry efÞ-
ciently, i.e., that it calibrates itself. Miermeister and Pott [14]
expose a method of for the calibration of these devices with
force sensors. Borgstrom et al. [15] use a self-calibration
method without force sensor to determine the initial lengths
of the cables but not the position of the anchor points. This
paper presents a method of calibration without force sensor
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 819
and able to determine the initial lengths of the cables and
position of the anchor points. This self-calibration method,
which was brießy presented in [16], is further detailed in
Section III. Experimental results are presented to demon-
strate the effectiveness of this method.
The mechanism studied, shown in Fig. 1, is a three-
degree-of-freedom mechanism used for positioning a point
in 3D space. It consists of a rigid platform, for the user to
manipulate, held by a set of four cables whose lengths are
controlled by reels that are afÞxed to a rigid frame. The
platform shape is that of a regular tetrahedron, which allows
each cable to be attached at a different vertex. A face of the
tetrahedron is directed towards the user so as to increase
access to the handle and to limit interferences between
user and cables. The reels are also positioned to form a
regular tetrahedron having a similar shape and orientation
as the platform. This four-cable conÞguration allows point
positioning in three-dimensional space. The orientation of
the moving platform is not restrained but remains fairly
constant; the end-effector being much smaller than the Þxed
frame. The platform itself consists of a handle mounted on
a force sensor, which is attached to the platform frame. The
handle is positioned at the centroid of the tetrahedron, which
prevents the forces applied by the user on the platform from
generating large moments. This centroid is the point where
forces applied by the cables intersect when the platform is
centred in its workspace. The forces applied by the user are
measured using a force sensor and are used for control. A
measure of these forces is crucial, as it is the input to the
admittance control scheme. This method of control has been
chosen over an impedance control because it is less sensitive
to friction and other perturbations.
This paper is structured as follows: the kinematics of a
generic CDPM are presented in Section II; Its calibration
is explained in Section III; the haptics control scheme is
detailed in Section IV; and Þnally, experimental results are
presented in sec. V.
II. KINEMATICS
Consider a rigid platform, which is to be manipulated by
the user, moving in three-dimensional space and constrained
by m cables attached by reels to the Þxed frame, as shown
schematically in Fig. 2. The points of attachment to the
reels are deÞned by vectors a
i
with respect to reference
point O, while the corresponding attachment points on the
platform are deÞned by vectors r
i
expressed relative to the
position of the platform reference point P . The position of
the latter point is given by vector p. The orientation of the
rigid platform is considered constant. Further experiments
proved that this simpliÞcation is acceptable for the proposed
application, as a change of 15

in orientation induces an error
in the positionp of less than 10 mm which is acceptable in a
context of haptic rendering where user cannot easily perceive
this error. It is important to note that cable elasticity and
mass are considered negligible and are not accounted for
in this model. Under the maximum tension, the cable axial
deformation is less than 0:5%, and the cable mass is very
O A
1
a
i
A
m
p
P
R
1
r
i

i


A
i
R
i
R
m
Fig. 2: Geometric model of a generic cable driven parallel
mechanism.
low at 1:5 g/m. Thus, the assumption of rigid and massless
cables is considered reasonable.
Geometric constraints prescribe the length 
i
of the i
th
cables as

2
i
= (p a
i
+r
i
)
T
(p a
i
+r
i
): (1)
By differentiation and rearrangement of (1), the correspond-
ing velocity equation is written as

i
_ 
i
= (p a
i
+r
i
)
T
_ p: (2)
This leads, for m cables, to the following Þrst-order kine-
matic relationship
_  =J _ p (3)
where
_  =
2
6
4
_ 
1
.
.
.
_ 
m
3
7
5 and J =
2
6
6
6
6
6
4
(p a
1
+r
1
)
T

1
.
.
.
(p a
m
+r
m
)
T

m
3
7
7
7
7
7
5
[m3]
(4)
is the Jacobian matrix, which will be used in the control
scheme of Section IV.
III. CALIBRATION
The identiÞcation of the modelÕs parameters is crucial
to its accuracy and, in turn, to the quality of the haptic
rendering. The parameters that need identiÞcation are the
position of each Þxed cable anchor point a
i
and the initial
length of each cable 
i;0
due to the use of incremental
encoders. The position r
i
of the moving attachment points
are known accurately, since the end effector was built using
fast prototyping. Hence, these parameters are treated as
constant in the calibration procedure.
Since a cable-driven parallel mechanism possesses a large
workspace, standard measurement methods are cumbersome
820
or give inaccurate results. The ideal calibration method
does not require any other sensor than those used for the
haptic control of the CDPM, namely, the motor encoders
and the force sensor. The calibration technique used for
this mechanism uses only the encoder measurements and is
performed in two steps. The Þrst step is an approximation
of the positions of A
i
;i = 1;:::;m; by reading the value
of the encoders when the platform is located at each of the
anchoring pointsA
i
. This method gives two estimates of the
distances between pairs of anchoring points, which can then
be averaged to yield an initial estimate of their positions.
These initial estimates are reÞned in step two.
The second step of the calibration method consist in
exploiting the measurement redundancy of the mechanism.
An over-determined system of equations can be generated
if the assumption of rigid and massless cables is valid. To
this end, the platform is moved across the workspace by the
user with cables under constant tension, thus generating n
cable-length measurements for each of them cables. For the
j
th
calibration position, it is possible to rearrange (1) and
replace 
i;j
by

i;j
= 
i;j
+
i;0
; (5)
where 
i;j
is the measured length and 
i;0
is the initial
length of the cable at initialization of the encoder. It is then
possible to generate a system ofnm equations, each of which
can be written as
0 = (p
j
 a
i
+r
i
)
T
(p
j
 a
i
+r
i
)  (
i;j
+
i;0
)
2
; (6)
with i = 1;:::;m, and j = 1;:::;n, where m is the
number of cables and n is the number of positions used for
the calibration. Note that vectorsr
i
are considered constant,
since they are small compared to the length of the cables and
since the orientation of the platform remains approximately
constant. In order to avoid having to deal with an under
determined system of equations, the number of equations
should be greater than or equal to the number of unknowns.
Here, m equations are obtained for each position of the
moving platform, for a total ofmn. The unknowns appearing
in the equations are a
i
, 
i;0
, i = 1;:::;m; and p
j
, j =
1;:::;n; for a total of 4m + 3n unknowns. Moreover, it is
important to note, that six components of thea
i
vectors need
to be prescribed, so as to constrain the mechanism in space.
This yields a revised total of 4m+3n 6 unknowns and the
condition to avoid an under determined system becomes
n>
4m  6
m  3
: (7)
Since, in our case, m = 4, we must measure a minimum of
10 distinct moving platform positions.
A solution can be obtained by formulating the nonlinear
least-squares problem and using as an initial guess the
outcome of the Þrst calibration step. Mathematically, this
problem takes the following form
minimize
m
X
i=1
n
X
j=1
(u
i;j
)
2
(8)
overa
i
;
i;0
;i = 1;:::;m;
where
u
i;j
=kp
j
 a
i
+r
i
k
2
2
 (
i;j
+
i;0
)
2
: (9)
The solution to this nonlinear least-square problem is ob-
tained via MatlabÕs implementation of the interior-reßective
Newton method. This method is invoked by the lsqnonlin
function of the Matlab optimization toolbox.
An algebraic Jacobian H, not to be confused with the
general Jacobian matrix of (3), can be calculated by differ-
entiation of
u = [u
T
1
 u
T
n
]
T
; (10)
with
u
j
= [u
1;j
 u
m;j
]
T
; (11)
and
v =

a
T
1
 a
T
m

0;1
 
0;m
p
T
1
 p
T
n

T
; (12)
where u 2 R
mn
, u
j
2 R
m
, and v 2 R
(4m+3n)
. The
expression of this Jacobian matrix is then
@u
@v
=H =
2
6
6
6
6
6
4
@u
1;1
@a
1
T

@u
1;1
@
0;1

@u
1;1
@p
n
T
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
@u
n;m
@a
1
T

@u
n;m
@
0;1

@u
n;m
@p
n
T
3
7
7
7
7
7
5
;
(13)
where the components can be written as
@u
i;j
@a
k
=
(
 2p
j
+ 2a
i
  2r
i
if i =k;
0
3
otherwise.
@u
i;j
@
0;k
=
(
 2(
i;j
+
i;0
) if i =k;
0
3
otherwise.
@u
i;j
@p
k
=
(
2p
j
  2a
i
+ 2r
i
if j =k;
0
3
otherwise.
(14)
This Jacobian H is given as an argument to the Matlab
function to increase the calculation speed of the algorithm.
A conditioning of approximately 10
3
is obtained forn> 15,
which is deemed acceptable. Notice that the end-effector
positions used for the calibration were distributed approx-
imately evenly across the workspace. Using positions that
are not sufÞciently far apart would lead to a higher condition
number of the Jacobian.
By implementing this method, the mechanism is self-
calibrated and resulting identiÞed parameters are the position
of each Þxed cable anchor point a
i
shown on Table I and
initial length of each cable 
i;0
shown on Table II.
TABLE I: Position of each
cable anchor point A
i
x (m) y (m) z (m)
A
1
0 1.827 0
A
2
0 0 0
A
3
1.886 0.936 1.713
A
4
0 0.866 1.994
TABLE II: Initial length
of each cable 
i;0
x (m)

1;0
1.241

2;0
0.977

3;0
1.528

4;0
1.242
821
As an indication of the accuracy of the calibration, a plot
of the value of a model parameter as a function of the number
of points used in the calibration is shown in Fig. 3.
A minimum of n = 10 points is necessary to perform
the calibration as per (7), for m = 4. It can be seen that
the function plateaus for a number of points n of 30 . For
n 30, the observed standard deviation is approximately
0:01 m for this parameter, and can reach up to 0:03 m for
others. Fig. 4 shows the quadratic mean of the residuals of
(8), which also reßects the impact of the number of pointsn
on the solution accuracy and also plateaus around n = 30.
It is also pointed out that the residual error for n = 10 is
not zero, which may seem erroneous at Þrst glance. This
is correct, however, and indicates that there is no exact
solution even when the system contains as many unknowns
as equations. Given a mechanism roughly the size of a 2 m
cube, we obtain approximately one to two percent error on
the positioning of the anchor points.
10 20 30 40 50
1:86
1:88
1:9
1:92
1:94
Number of calibration points n
x coordinate of A
3
(m)
Fig. 3: Coordinate y of an anchor point as a function of the
number of points used in the calibration.
10 20 30 40 50
0:5
1
1:5
2
2:5
10
 3
Number of calibrations points n
Root Mean Squares (m)
Fig. 4: Quadratic mean of the residual error to the least
squares problem for the mechanism as a function of the
number of points used in the calibration.
IV. CONTROL
Two classes of control schemes can be used in the control
of haptic devices as described in [17]. Impedance control is
the most widely used of these two classes, because it does
not require a force sensor. An impedance control law takes
a displacement as input and outputs a force. The second
class of control schemes are called admittance controllers.
They use the opposite principle, taking forces as inputs, and
supplying displacements as outputs. Admittance control was
chosen here since the additional force feedback alleviates the
inconveniences caused by friction, which has a great impact
on the quality of an impedance control.
A. Control Scheme
Furthermore, a velocity controller is used instead of a
position controller because the resulting haptic rendering has
proven superior in previous experiments. While a closed-loop
control over the velocity of the actuator does not replicate
exactly the intended model, it is less sensitive to external
parasitic forces than a position controller. The opposite can
be said of a closed-loop position control. It replicates the
exact intended behaviour of the model but any physical per-
turbation generates erratic movements due to the controller
trying to catch up with the model. An unexpected collision
into a physical object, exceeding the actuator capabilities or
leaving the workspace are examples of physical perturbations
that greatly degrade haptic rendering if closed-loop position
control is used and such situations may be very difÞcult
to avoid. All these perturbations still have an effect when
velocity control is used, but are less problematic because they
do not result in unstable movements of the user platform.
Humans seem far more sensitive to instability errors than to
velocity errors.
A force control feedback is another approach to haptic
control that could have been used. We discarded it because its
mass and damper virtual model need acceleration estimates,
which are too noisy when derived from encoder measure-
ments.
The general control scheme used for this mechanism is
shown in Fig. 5. Forces measured by the sensor and applied
by the virtual environment are driving the physical model.
This mechanical model of the virtual environment prescribes
a Cartesian velocity for the platform to follow the virtual
object. The Jacobian matrix J transforms this Cartesian
velocity into joint velocity which is given as a command to
the low-level controller G
c
, which is a closed-loop controller
on articular velocity as displayed by the feedback of _  in Fig.
5. The forward kinematics are used to feedback the Cartesian
position to the Jacobian and the virtual environment. It is
noted that, unlike in many other control schemes devised for
cable driven mechanisms, the controller proposed here does
not require the management of internal cable tensions.
f
Robot
_ x
_ 
d 
s
 p
J
F/T
sensor
Model G
c
Forward
Kinematics
Virtual
env.
+
+
_ 
Fig. 5: Block diagram of the control scheme.
822
The chosen admittance model is that of a mass and
damper, i.e.,
f =M x +C _ x (15)
where f is the resultant force applied on the object by the
environment and is further described in Section IV-B. The
terms of mass and damping take the form
M =m
p
1
[3x3]
and C =c1
[3x3]
; (16)
where1
[3x3]
is the 33 identity matrix. This gives a realistic
model where the mass and damping are the same in all
directions.
The admittance model inputs a force f and outputs a
velocity _ x, which is computed as follows. The acceleration
is determined from (15) to be
 x(t) =M
 1
(f C _ x(t)): (17)
The velocity at the next time step is then computed as
_ x(t + t) = _ x(t) +
Z
t+t
t
 x(u)du; (18)
yielding
_ x(t + t) = _ x(t) +
Z
t+t
t
M
 1
(f C _ x(u))du: (19)
The Cartesian velocity computed by the admittance model
is then used to control the mechanism. The Jacobian matrix
J calculated from the Cartesian position p of the platform
is used to compute the desired joint velocities _ 
d
, as per (3)
to obtain :
_ 
d
=J
 
_ x(t) +
Z
t+t
t
M
 1
(f C _ x(u))du
!
: (20)
The low-level controller G
c
use to command the actua-
tors is, in this case, a closed-loop; high-gain; proportional
velocity controller, namely
 =K
p
( _ 
d
  _ ); (21)
where _ 
d
is the vector of desired joint velocities and _  is
the vector of actual joint velocities.
The control signals to the actuators are then computed
from (20) and (21) as
 =K
p
 
J _ x(t) +J
Z
t+t
t
M
 1
(f C _ x(u))du  _ 
!
:
(22)
This control law can specify negative tension (compression)
to the actuator, which is not feasible by a cable-driven par-
allel mechanism. To circumvent this limitation, a saturation
is placed on  in order to keep a minimum tension in the
cable, namely

s
=
(
 if  >
min

min
if 
min
; (23)
where
min
is the minimum admissible tension in the cables
and is adjusted experimentally.
B. Virtual Environment
The virtual environment is the part of the control which
generates the forces acting on the virtual object represented
by the userÕs moving platform in the real world. According
to our model of the virtual environment, the object evolves
in either of three modes. The Þrst mode occurs when the
object is moved freely by the user in the workspace. The
second and third modes occur respectively when the object
is in contact with a smooth surface and a smooth edge in
the virtual environment. Each of these situations has its own
component of the resultant force f, i.e.,
f =f
s
+f
g
+f
c
(24)
where f
s
, f
g
and f
c
are respectively the force reported by
the sensor, the non-contact external forces and the contact
forces.
1) Free Space Motion: Forces acting on the object while
it is freely moving are forces induced by the user and non-
contact external forces like gravity. Those are represented
in (24) by the terms f
s
and f
g
, respectively. The force f
s
is
that measured by a force sensor. For this approach to work,
low inertias of the sensor and handle are essential, so that
the sensor does not pick up inertial forces. If this is not the
case, a dynamic model of the handle would be necessary to
account for their effects. External forces are forces that act in
a constant direction in the virtual environment and that can
be deÞned by a static vector f
g
. A low damping coefÞcient
c is normally given to the model to insure system stability,
unless a speciÞc scenario requires it otherwise. The massm
p
of the model has to correspond to that of the moving object
in the scenario of the virtual environment.
2) Contact with a Smooth Surface: To generate a contact
forcef
c
, a contact situation must be deÞned. For point motion
in 3D space, a point of contact and a normal direction are
necessary to deÞne a contact without friction.
Consider a smooth surface deÞned by g(p) = 0, where
g(p) < 0 represents the interior of the object and n a unit
vector normal to its surface. The contact force is deÞned by
two aspects : the normaln to the plane and the distance from
P to the surface of the virtual object. The contact occurs
when g(p) < 0. The resulting force f
c
is calculated as a
proportion of the penetration distance in the direction normal
to the plane, that is.
f
c
=
(
0 if g(p) 0;
 K
c
ng(p) if g(p)< 0:
(25)
whereK
c
is a positive gain deÞning the stiffness of the wall
and which usually takes a high value for rigid contacts.
As discussed in [18], this method could easily create
instability and energy leaks due to quantization effects for a
high gain K
c
. A damping coefÞcient needs to be added to
limit this effect. The damping is added only in the direction
normal to the contacted surface and only while g(p) < 0,
so as to keep a consistent rendering in the other directions.
This damping is added to the damping coefÞcient of (16),
823
which becomes
C =c1
[33]
+nn
T
c
w
(26)
where c
w
is a damping gain. This approach has the second
beneÞt of allowing to adjust the degree of kinetic restitution
of collisions, since it is equal to c +c
w
.
3) Contact with Sharp Edges: When an object is de-
scribed by a patchwork of smooth surfaces connected by
sharp edges, contacts at the edges are not properly deÞned
by the model of Section IV-B.2 and its direct application
can result in poor haptic immersion. This occurs because
the sole normal n of the closest surface is used. This effect
is apparent when contacts are made with a virtual cube. The
normal to each face is deÞned as pointing outward of the
cube. In this manner, a contact with the cube occurs when
all the distance terms are smaller than or equal to zero. The
contact force is deÞned in the same manner as in (25). A
degradation of the haptic feedback may arise for this kind
of situation, as depicted by the trajectory shown in Fig. 6(a).
As the distance to the vertical face becomes smaller than the
distance to the horizontal face, the contact forcef
c
suddenly
changes direction. This instantaneous rotation of 90

of f
c
is perceived by the user as an artiÞcial push away from
the vertical face. This unrealistic behaviour should thus be
avoided.
To correct this undesirable effect, we propose to adjust
the direction of the normal n. Instead of taking the normal
to the plane closest to point P , each normal to the cube is
taken into account and weighted according to the inverse of
the distance to its corresponding plane, that is
 =
6
X
k=1
n
k
jd
k
j
p
; (27)
where the exponent p deÞnes the smoothness of the edges.
The adjusted normal is then normalised,
n =

kk
2
; (28)
to be used in (25) to generate f
c
. A trajectory similar to
that of Fig. 6(b) can then be obtained, which matches more
closely what a user would expect when touching a sharp
edge.
p
f
c
f
s
d
f
s
f
s
f
s
f
c
f
c
(a) Without adjusted normal
p
f
c
f
s
f
c
f
s
f
s
f
c
(b) With adjusted normal
Fig. 6: Trajectories around a sharp corner from left to right.
V. EXPERIMENTAL RESULTS
Experiments were conducted on the mechanism of Fig.
1 with the admittance control scheme described above. A
series of scenarios are presented to show the capabilities of
this haptic feedback device.
First, as a characterization of the device bandwidth, it
was subjected to a sinusoidal velocity command of increas-
ing frequency, without any human intervention. The input
command was well followed until 10 Hz, at which point
oscillations caused by unconstrained end-effector rotations
become noticeable. These effects are minimised when a
person is holding the platform, but remain the limiting factor
in the admissible bandwidth.
Also, a trajectory in a virtual environment containing
different objects representing challenges for haptic rendering
is accomplished. It contains a portion of free motion, a box
for contacts with planes and sharp edges, and a sphere for
contacts with smooth surfaces. All surfaces are rigid, which
mean that their virtual stiffness is as high as possible without
instabilities. The trajectory as reconstructed from the encoder
measurements is presented in Fig. 7.
The quality of a haptic rendering is hard to quantify.
Qualitatively, it can be mentioned that the rendering provided
by the mechanism is excellent. A low massm
p
and damping
coefÞcientc allow the platform to move with minimal forces.
The contacts are sharp and convincing, without vibration on
the surfaces. A degradation of the rendering occurs only
when pressing so hard on a surface that the limits of the
actuators are reached. In such a case, the platform starts to
penetrate the virtual surface. A video attached to this article
presents the mechanism being manipulated along a trajectory
similar to that presented in Fig. 7.
The behaviour of the haptic-feedback device was also
compared against that of the real word in a simple experi-
ment. This experiment consists in reproducing a ball bounc-
ing on a hard surface. In a virtual environment artiÞcially
subjected to gravity, the object was dropped on a virtual
horizontal plane. The contact between the object and the hor-
izontal plane is modeled as a spring and damper. The object
0:6
0:8
1
1:2
0:6
0:8
1
1:2
0:6
0:8
1
1:2
1:4
x (m)
y (m)
z (m)
Fig. 7: Trajectory of userÕs platform in a virtual environment
(lengths in metres).
824
mass, the contact stiffness and the contact damping were
adjusted to resemble those of a bouncing ball. The object
trajectory was recorded through the encoder measurements.
The height of the object is traced against time in Fig. 8. In
a separate experiment, the height of each bounce of a real
freely-bouncing ball were recorded and are also traced in
Fig. 8.
0 0:5 1 1:5
 0:05
0:00
0:05
0:10
0:15
Time [s]
Height [m]
Height of the user platform
Maximum height of the ball
Fig. 8: Height of the user platform while bouncing in a virtual
environment in comparison to the bouncing height of a ball
in the real world.
As shown on this graph, the mechanism closely follows
the real-world ball for the Þrst bounce, but diverges slowly
from the real trajectory in subsequent bounces. This result
is expected because the control scheme does not guarantee
a perfect replication of the physics of the real world, but
focuses on smooth and stable rendering. Nevertheless, the
mechanism follows the trajectory of a real object closely
enough to avoid disrupting the immersion of the user. A
video of this experiment shows both objects at the same time
and demonstrates this life-like behaviour.
VI. CONCLUSIONS
A control law based on an admittance scheme and closed-
loop velocity control was presented and proven to provide
a realistic haptic rendering on the three-degree-of-freedom
cable-driven mechanism presented herein. Also, a simple
self-calibration method based on measurement redundancy
was proven effective in an experiment providing a relative
error from one to two percent on the mechanism geometry.
Future work will include adjusting the low-level controller
G
c
to allow a wider dynamic bandwidth by, for example,
including a feed-forward term taking into account inertial
forces. Other improvements include the possibility of in-
teracting with moving and movable objects in the virtual
environment, as well as adding four cables to increase the
number of degrees of freedom to six. Having six degrees of
freedom will allow the platform to generate torque, extending
the system to more complex virtual objects and collisions.
The last step will consist in placing the mechanism inside a
CA VE environment, to immerse the user into a full 3D both
visual and haptic feedbacks.
ACKNOWLEDGMENT
The authors would like to thank Boris Mayer-St-Onge,
Thierry Lalibert« e and Simon Foucault for their help in
building the mechanism presented in this paper.
REFERENCES
[1] (2013, Sep.) Occulus VR
TM
. [Online]. Available:
http://http://www.oculusvr.com/
[2] T. H. Massie and K. J. Salisbury, ÒPHANToM haptic interface:
a device for probing virtual objects,Ó in Proceedings of the 1994
International Mechanical Engineering Congress and Exposition, ser.
Dynamic Systems and Control Division, vol. 55-1. Massachusetts Inst
of Technology, Cambridge, United States: ASME, 1994, pp. 295Ð299.
[3] L. L. Cone, ÒSkycam: an aerial robotic camera system,ÓBYTE, vol. 10,
pp. 122Ð132, 1985.
[4] G. Meunier, B. Boulet, and M. Nahon, ÒControl of an overactuated
cable-driven parallel mechanism for a radio telescope application,Ó
IEEE Transactions on Control Systems Technology, vol. 17, no. 5, pp.
1043Ð1054, 2009.
[5] R. Lindemann and D. Tesar, ÒConstruction and Demonstration of a
9-String 6-DOF Force Reßecting Joystick for Telerobotics,Ó in NASA
International Conference on Space Telerobotics, 1989, pp. 55Ð64.
[6] M. Ishii and M. Sato, ÒA 3D interface device with force feedback: a
virtual work space for pick-and-place tasks,Ó in Proceedings of IEEE
Virtual Reality Annual International Symposium. Seattle, WA, USA:
IEEE, 1993, pp. 331Ð5.
[7] R. Xiao, J. Huang, and P. Wu, ÒLarge space force feedback system
based on string,Ó in Proceedings of 2011 International Conference
on Computer Science and Network Technology, vol. vol.4. Harbin,
China: IEEE, Dec. 2011, pp. 2705Ð2708.
[8] Z. Chen, Y . Zhang, D. Wang, C. Li, and Y . Zhang, ÒiFeel6-BH1500:
a large-scale 6-DOF haptic device,Ó in 2012 IEEE International
Conference on Virtual Environments Human-Computer Interfaces and
Measurement Systems (VECIMS). Tianjin, China: IEEE, 2012, pp.
121Ð125.
[9] P. Gallina, G. Rosati, and A. Rossi, Ò3-d.o.f. Wire Driven Planar Haptic
Interface,Ó Journal of Intelligent and Robotic Systems, vol. 32, no. 1,
pp. 23Ð36, 2001.
[10] R. L. Williams II, ÒCable-Suspended Haptic Interface,Ó International
Journal of Virtual Reality, vol. 3, pp. 13Ð21, 1998.
[11] T. Morizono, K. Kurahashi, and S. Kawamura, ÒRealization of a virtual
sports training system with parallel wire mechanism,Ó in Proceedings
of International Conference on Robotics and Automation, vol. 4, no.
April. Albuquerque, NM, USA: IEEE, 1997, pp. 3025Ð3030.
[12] C. Carignan and K. Cleary, ÒClosed-loop force control for haptic
simulation of virtual environments,Ó Haptics-e, vol. 1, no. 2, pp. 1Ð14,
2000.
[13] C. Gosselin, R. Poulin, and D. Laurendeau, ÒA Planar Parallel 3-DOF
Cable-Driven Haptic Interface,Ó in 12th World Multi-Conference on
Systemics, Cybernetics and Informatics, vol. 3, Orlando, FL, USA,
2008, pp. 266Ð271.
[14] P. Miermeister and A. Pott, ÒAuto calibration method for cable-
driven parallel robots using force sensors,Ó Latest Advances in Robot
Kinematics, pp. 269Ð276, 2012.
[15] P. H. Borgstrom, B. L. Jordan, B. J. Borgstrom, M. J. Stealey, G. S.
Sukhatme, M. A. Batalin, and W. J. Kaiser, ÒNIMS-PL: A Cable-
Driven Robot With Self-Calibration Capabilities,Ó IEEE Transactions
on Robotics, vol. 25, no. 5, pp. 1005Ð1015, 2009.
[16] J. Alexandre Dit Sandretto, D. Daney, M. Gouttefarde, and C. Baradat,
ÒCalibration of a fully-constrained parallel cable-driven robot,Ó INRIA,
Tech. Rep. RR-7879, 2012.
[17] M. Otis, V . Duchaine, G. Billette, S. Perreault, C. Gosselin, and
D. Laurendeau, ÒCartesian Control of a Cable-Driven Haptic Mecha-
nism,Ó in Advances in Haptics, Mehrdad Hosseini Zadeh, Ed. Intech,
2010, ch. 4, pp. 75Ð103.
[18] R. B. Gillespie and M. R. Cutkosky, ÒStable user-speciÞc haptic ren-
dering of the virtual wall,Ó in Proceedings of the ASME International
Mechanical Engineering Congress and Exhibition, vol. 58, 1996, pp.
397Ð406.
825
