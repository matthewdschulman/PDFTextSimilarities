An End-to-End Approach to Making Self-Folded 3D Surface Shapes
by Uniform Heating
Byoungkwon An

, Shuhei Miyashita

, Michael T. Tolley

, Daniel M. Aukes

, Laura Meeker

,
Erik D. Demaine

, Martin L. Demaine

, Robert J. Wood

and Daniela Rus

Abstract— This paper presents an end-to-end approach for
creating 3D shapes by self-folding planar sheets activated by
uniform heating. These shapes can be used as the mechanical
bodies of robots. The input to this process is a 3D geometry (e.g.
an OBJ ﬁle). The output is a physical object with the speciﬁed
geometry. We describe an algorithm pipeline that (1) identiﬁes
the overall geometry of the input, (2) computes a crease pattern
that causes the sheet to self-fold into the desired 3D geometry
when activated by uniform heating, (3) automatically generates
the design of a 2D sheet with the desired pattern and (4)
automatically generates the design ﬁles required to fabricate
the 2D structure. We demonstrate these algorithms by applying
them to complex 3D shapes. We demonstrate the fabrication
of a self-folding object with over 50 faces from automatically
generated design ﬁles.
I. INTRODUCTION
In this paper, we develop an approach for the auto-
matic creation of self-folded objects given a 3D geometric
speciﬁcation using print-and-fold processes. We have pre-
viously demonstrated the ability to accurately control the
fold angle during uniform heating [1], [2]. In prior work,
we considered deﬁned shape memory laminate geometries
capable of achieving target fold angles and demonstrated
the self-folding of cylinders and regular polyhedra. In this
paper, we generalize these results by showing that we can
automatically generate the crease patterns and manufacturing
ﬁles necessary to self-fold an arbitrary 3D geometry.
We examine this problem in two steps. First, we develop
a suite of algorithms that start with the desired 3D geometry
and automatically generate (1) the geometry of its corre-
sponding 2D sheet, (2) the crease structure required to realize
the 3D folded shape from the 2D sheet, (3) the mechanical
design of a heat-activated self-folding device using the previ-
ously described edge folding angle control strategy [1], [2].
In the second step, we automatically generate the fabrication
ﬁles required to produce and fabricate the device.
Just as an origami crease pattern contains the informa-
tion required to produce a folded origami object, a self-
folding sheet design contains information for automatically
fabricating an object when subjected to uniform heating. We
Support for this work was provided in part by NSF grants EFRI-1240383
and CCF-1138967. We are grateful for it. We thank John Romanishin for
insightful discussions on this research

B. An, S. Miyashita, L. Meeker, E. D. Demaine, M. L. Demaine
and D. Rus are with the Computer Science and Artiﬁcial Intelligence
Laboratory, Massachusetts Institute of Technology, Cambridge, MA 02139,
USA dran@csail.mit.edu

M. T. Tolley, D. M. Aukes and R. J. Wood are with the School of
Engineering and Applied Sciences and the Wyss Institute for Biologically
Inspired Engineering, Harvard University, Cambridge, MA 02138
Egg	  ﬁg/heatsheet/bunny_ex1	  
0:00	  
1:15	  
1:26	  
3:45	  
0:50	  
5:00	  
2:30	  
6:26	  
Fig. 1. Self-folding Stanford Bunny. (Top-left) Input 3D graphic model.
(Top-right) 3D self-folded structure. (Bottom) Frames from experiment of
self-folding by uniform heating. The time elapsed since exposure to uniform
heating is indicated in the lower-right corner of each frame (in minutes and
seconds).
deﬁne these designs as a set of machine codes and develop a
design algorithm for compiling an input 3D surface structure
into its correlated mechanical design (Fig. 2). The design is
composed of the graphic image of each layer. By printing
(or cutting) and composing the layers of the output design,
we build a self-folding sheet with embedded control program.
Fig. 1 shows a self-folding bunny made from a 3D computer
graphic model.
We describe and analyze the self-folding models and the
design algorithm in Sec. II, III. We explore the implemen-
tation of the algorithm and the actuation model in Sec.
IV. Finally we demonstrate the experiments with four self-
folding 3D structures in Sec. V. We discuss the conclusion
and future works in Sec. VI.
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 1466
heatsheet/pts_model6
Model of Printable Self?Folding Sheet
Fig. 3. Visualized self-folding crease pattern representing bunny and egg.
The solid lines are cuts and the dash lines are edges (hinges). Each edge
contains a fold angle.
heatsheet/actuator_model
Actuator model
w
t
w
b
w
t
w
b
w
t
w
b
(a)
(b)
(c)
Fig. 4. Sandwiched actuator model. (Left) before activate. (right) after
shrinking. The arrows show the shrinking directions.
Actuator mapping function: 
fig/heatsheet/act
(Top View)
(Side View)
(Bottom View)
w
t
w
b
w
t
b
w
b
l
Bridge
w
t
w
b
w
t
w
b
(a) (b)
Fig. 5. Two types of actuators. (a) Basic-type actuator. (b) Bridge-type
actuator.
by the geometry of the rigid material located at the edge. The
fold angle is encoded in the design of each actuator. When
uniform heat is applied to the sheet, all actuators fold their
edges to their predeﬁned fold angles simultaneously. Our
previous work [1], [2] describes some designs that achieve
this goal.
B. Sandwiched Actuation Model for Self-Folding
The actuator is composed of three layers (Fig. 4). The top
and bottom layers of the actuator are heat resistant materials
(e.g. paper or Mylar). The middle layer is a SMP (e.g.
prestrained polystyrene or polyvinyl chloride shrink ﬁlm).
Since all layers are strongly attached to each other, when
the actuator is exposed to a uniform energy source, such as
heat, light or water, a section of the uncovered middle layer
shrinks, allowing the hinge to fold.
The spaces w
t
, w
b
of the top and bottom layers determine
folding angles and directions (Fig. 4). For example, if the gap
of an actuator (a) is wider than the gap of another actuator
(b), (a) folds to a greater extent. If the gap of the bottom
layer is wider than the gap of the top layer, The actuator
bends in the other direction (Fig. 4(c))
Fig. 5 shows two types of actuator design. The basic-type
actuator has simple gaps on each top and bottom layer (Fig.
5(a), [2]). The bridge-type actuator has a simple gap on one
side and a gap with a bridge on the other side (Fig. 5(b),
[1]). Bridges hold object faces together during fabrication
and reduce the number of release cuts required. The types
of actuator design of self-folding sheets are determined by a
selected actuator design function in Sec. IV-B.
III. SELF-FOLDING SHEET DESIGN COMPILER
The design compiling algorithm converts a shape repre-
sented as a 3D mesh
1
shape or a 3D origami design
2
structure
into a self-folding sheet design. Fig. 2 shows the steps of
the algorithm and the development process for self-folding
sheets: (1) unfolding a given 3D structure, (2) computing the
fold angles, (3) constructing a 2D sheet crease pattern, and
(4) constructing a 2D sheet design. Fabrication ﬁles for the
sheet design are then output by the algorithm.
A. Unfolding the 3D Shape
The objective of this algorithm is to compute the geometry
of a 2D sheet that can be folded into the given 3D shape.
Several algorithms exist to unfold 3D meshes or 3D origami
designs [18], [28], [29]. Given a mesh, the compiling algo-
rithm constructs a net
3
of the mesh on a plane without any
collisions.
In this paper, a mesh is M = (V;F) where V is a ﬁnite
set of the vertices and F is a ﬁnite set of the faces. A net
is N =(V
0
;E
0
;F
0
;T), where V
0
is a ﬁnite set of the vertices,
E
0
is a ﬁnite set of the edges e
0
=fa;bg, a;b are in V
0
,
F
0
is a ﬁnite set of the faces, T is a ﬁnite set of (e
0
;t),
and t is a mark. e(e
0
)2 E(M) is an original edge of e
0
2 E
0
.
f( f
0
)2 F(M) is an original face of f
0
2 F
0
. Since all vertices
of a net are originally from a mesh, during the unfolding
process, these tracking functions can be easily constructed.
Although all meshes, including meshes having holes,
are unfolded on a plane, some meshes must be unfolded
as a net with multiple disconnected groups of faces [30].
However, by tracking the origin of each edge, information
for the connections between disconnected face groups can
be accessed.
B. Computing Fold Angles
The goal of this step is to compute the fold angles
associated with all edges of a given mesh.
In origami theory [17], an edge (hinge) is a line segment
between two faces. A fold angle of the edge is the supple-
ment of the dihedral angle between two faces (Fig. 6 left).
The sign of the fold angle is determined by the hinge: either
a mountain fold or a valley fold (Fig. 6 right).
Theorem 1: Given a mesh, a ﬁnite set U of all fold angles
of the mesh are computed in O(n
2
 m) time and O(n
2
)
space, where n vertices and m faces are in the mesh.
1
A polygon mesh is a collection of faces that deﬁnes a polyhedral object.
2
A origami design is a folded state of a paper structure encoded with a
crease pattern and folded angles [5]
3
A net of a mesh is an arrangement of edge-jointed faces in a plane.
1468
? valley
mountain Fig. 6. (Left) The folding angle at a crease is the supplement of the dihedral
angle. (Right) A crease can be folded as either a mountain fold or a valley
fold.
Proof: For each edge, if the edge is not cut, there
are two neighboring faces sharing the edge (Alg. 1 Step 1).
By using the dot product and cross product of their normal
vectors, the algorithm calculates the fold angle (Step b, c).
Since there are at most n
2
edges, the algorithm computes
and stores all angles in O(n
2
 m) time and O(n
2
) space.
Computing Fold Angles
1) Given a mesh M = (V;F), where all the normal
vectors of the faces point outside and the vertices
of each face (v
1
;v
2
;:::;v
k
) are positioned counter-
clockwise from top view.
2) For each edge e=fa;bg2 E(M) where e is not cut.
a) Find two faces f
1
; f
2
where f
1
contains direc-
tional edge (a;b) and f
2
contains directional
edge (b;a).
b) Get u = acos(
n
1
n
2
jn
1
jjn
2
j
), where n
1
, n
2
are the
normal vectors of f
1
, f
2
, respectively.
c) If (a;b) and n
1
 n
2
point to different direc-
tions, assign ‘-’ to u; otherwise assign ‘+’ to
u.
d) Insert (e;u) into a ﬁnite set U.
3) Output U.
Algorithm 1: Algorithm to computing fold angles
C. Constructing a Self-Folding Crease Pattern
The goal of this step is to take the 2D crease structure
and the fold angles of a mesh as input and generate a crease
structure that will self-fold the desired angles. Each edge in
the original crease structure is thus mapped to a new crease
structure capable of folding into the desired angle.
In this section, we show that given the crease structure
and the fold angles of a mesh, the algorithm constructs a
correct self-folding crease pattern (Thm. 2). Lem. 1 shows
construction of a self-folding crease pattern, and Lem. 2
shows correctness of this crease pattern.
Lemma 1: Given a mesh M, its unfolding net N and its
ﬁnite fold angle set U(M) (Sec. III-A, Thm. 1), Alg. 2
constructs a self-folding crease pattern in O(n
2
) times and
space.
Proof: Given M, N = (V
0
;E
0
;F
0
;T); and U(M), for
each edge e
0
2 E
0
, Alg. 2 ﬁnds fold angle u of its original
edge e(e
0
) in M, and collects u as a folding information T
0
.
By replacing T containing crease information (cut or hinge)
to T
0
containing desired angle information, Alg. 2 builds and
outputs a self-folding crease pattern (V
0
;E
0
;F
0
;T
0
) in O(n
2
)
time and space.
Self-Folding Crease Pattern Construction
1) Given a mesh M, its net N = (V
0
;E
0
;F
0
;T) and a
ﬁnite set U(M) of (e;u) where e2 E(M) and u is
a fold angle.
2) For each e
0
2 E
0
, If (e(e
0
);u)2 U, then insert (e
0
;u)
into T
0
, where u is a fold angle.
3) For each e
0
2 E
0
, where e
0
is a cut, then insert
(e
0
;hcuti) into T
0
.
4) Output self-folding crease pattern (V
0
;E
0
;F
0
;T
0
) .
Algorithm 2: Algorithm to construct a self-folding crease
pattern.
Lemma 2: Given a mesh M, if a self-folding crease pattern
N is generated by Alg. 2, M
0
(N) is equal to M, where M
0
(N)
is the folded state of N
Proof: Let L =f f
0
1
; f
0
2
;:::; f
0
k
g, where9e(e
0
) =9e(e
00
),
e
0
is an edge of f
0
i
, e
00
is an edge of f
0
j
, j< i, and L= F
0
. Let
L
p
bef f
0
1
; f
0
2
;:::; f
0
p
g L. Let M
0
t
be M(N
t
). Let F(M
0
t
) be
f f
00
1
; f
00
2
;:::; f
00
t
g where each f
00
i
is a face of the folded state
of f
0
i
.
For each t 1, P(t) is M
0
t
= M
t
where L
t
= F(N
t
).
Basis: P(1): M
0
1
= M
1
because f
1
= f
00
1
.
Induction step: For each k 1, we assume that P(k) is true
and we show that it is true for t = k+ 1.
The hypothesis states that M
0
k
= M
k
, and f
k+1
, f
00
k+1
are the
same shape. By the deﬁnition of L
k+1
(= F
k+1
), f
0
k+1
must
be connected to f
0
s
2 L
k
and f( f
0
k+1
) is connected to f( f
0
s
).
Let u
0
be the fold angle of e
0
between f
00
s
and f
00
k+1
. Then
u= u
0
where u is the fold angle of e(e
0
). Thus, f
k+1
= f
00
k+1
and F(M
0
k+1
)= F(M
k+1
). Therefore M
0
k+1
= M
k+1
and P(t)
is true.
Theorem 2: Given M, N, and U(M), Alg. 2 generates
correct a self-folding crease pattern in O(n
2
) time and space,
where n is the number of the vertices.
Proof: Lemma 1 shows Alg. 2 builds a self-folding
crease pattern in O(n
2
) time and space. Lemma 2 shows this
crease pattern is correct. Therefore, Thm. 2 is true.
D. Constructing a Self-Folding Sheet Design for Fabrication
Files
This step constructs a self-folding sheet design by drawing
all actuators of the sheet. Like an actuator composed of three
layers, a self-folding sheet which is a cluster of the actuators
is also composed of three layers. Fig. 7 shows an example
design of a simple self-folding sheet.
An actuator design is ((w
t
;w
c
;w
b
);b
l
;b
w
)), where w
t
, w
c
and w
b
are the gaps on the top, middle and bottom sheets,
respectively, and b
l
and b
w
are the length and the width of
the bridge (Fig. 5 (b)). If a variable of a design is , then
the algorithm skips the drawing of its layer. For example,
if w
c
is , the algorithm skips the drawing of the middle
layer gap. If b
l
and b
w
are , the actuator design does not
have a bridge. ((w
t
;;w
b
), (;)) and ((w
t
;;w
b
);(b
l
;b
w
)),
respectively, represent the actuators in Fig. 5 (a) and (b).
1469
Example of folding to achieve a bigger folding angle
heatsheet/bigangle1
Example of folding to achieve a bigger folding angle
heatsheet/bigangle2
Example of folding to achieve a bigger folding angle
heatsheet/bigangle3
Fig. 7. Three examples of simple self-folding sheets embedding one, two
and three actuators. The arrows show the shrinking directions.
Constructing Self-Folding Sheet Design
1) For each (e;a)2 T , where a given self-folding
crease pattern is (V;E;F;T) and a is a fold angle
(a62hcuti).
a) d f(a), where f is a given design mapping
function and d is an actuator design.
b) If (e;hcuti)62 T :
i) Draw d on e (Alg. 4).
c) If (e;hcuti)2 T :
i) w
max
 max(w
t
(d);w
b
(d)).
ii) Draw ((w
t
(d);w
max
;w
b
(d));(;)) on e.
iii) T T f(e;hcuti)g.
2) For each (e;hcuti)2 T , draw ((0;0;0);(;)) on e.
3) Output all actuator designs on the three layers as a
self-folding sheet design.
Algorithm 3: Algorithm to construct a self-folding sheet
design
Let f : A! D denote a design mapping function, where
A is a set of angles between 180

and +180

and D is a
set of actuator designs ((w
t
;w
c
;w
b
), (b
l
;b
w
)). Given a fold
angle, we can draw the design of the three-layered actuator
on three planes.
Theorem 3: A self-folding crease pattern has a valid self-
folding sheet design, computable in O(n
2
) time and space,
where n is the number of the vertices.
Proof: A mesh has two types of edges: cuts and hinges.
A net unfolded from a mesh also contains cuts and hinges but
some cuts are originally from the hinges of the mesh. Alg.
3 draws the valid actuators for these edges. Step b draws
actuators for the hinges in the net. Step c draws actuators
4
Where a = (x
a
;y
a
) and b = (x
b
;y
b
), if x
a
6= x
b
then q = atan(
y
b
 y a
x
b
 x a
)
and if x
a
= x
b
then q = 180

5
c=(a+ b) 0:5
Drawing Actuator
1) Given an edgefa, bg, calculate the rotation angle
4
q and the center point
5
c.
2) Given an actuator design, draw the q-rotated actu-
ator design on c.
Algorithm 4: Algorithm to draw an actuator
Human 
fig/heatsheet/actFunc10
0.25 mm 0.75 mm 1.25 mm 1.75 mm
Fig. 8. Graph of an implemented actuator design function for the pin
alignment process. The inset images show the test strips used to characterize
the fold angle as a function of the size of the gap on the inner structural
sheet.
for the cuts in the net which are originally the hinges in the
mesh. Step 2 draws actuators for the cuts which were cuts
in the mesh. Alg. 4 correctly draws each actuator on each
layer of the self-folding sheet design. Each Step 1 and 2 of
Alg. 3 runs in O(n
2
) time and space.
IV. ALGORITHM IMPLEMENTATION
A. Software for Compiling the Printable 2D Design
We implemented the design algorithm (Fig. 2) in Java.
The input ﬁle formats are Wavefront .obj for a 3D mesh and
AutoCAD .dxf for a 3D origami design [5]. The output ﬁles
are .dxf format.
To support various manufacturing processes of the self-
folding sheet, the software supports script ﬁles to de-
ﬁne the template of the fabrication ﬁles (outputs). Since
we constructed self-folding sheets with two manufacturing
processes, we built two template scripts for the folding
alignment manufacturing process [1] and the pin alignment
manufacturing process [2].
B. Actuator Design Function
As started in Sec. III-D, given a fold angle, an actuator
design mapping function f outputs an actuator design.
Deﬁnition 1: A design mapping function is f : A! D,
where:
1. A is a set of the angles ( 180

 a 180

),
2. D is a set of the actuator designs d =(w;b),
3. S is a ﬁnite set of the fold angle samples (a;d),
4. (0;((0;;0);b))2 S,
5. if (a;d)2 S, then f(a) = d, and
6. if (a;d)62 S, then
f(a) = (w(d
1
) +
a a
1
a
2
 a
1
 (w(d
2
)  w(d
1
)), b(d
1
)), where
a
1
< a < a
2
, (a
1
;d
1
)2 S, (a
2
;d
2
)2 S, a
1
< a
3
< a
2
and
(a
3
;d
3
)62 S.
1470
Human 
fig/heatsheet/humanVideo
0:00 2:36 3:47
3:57 4:35 4:58
Fig. 12. Frames from experiment of the self-folding humanoid shape by
uniform heating. The sheet was built with the folding alignment process.
The time elapsed since exposure to uniform heating is indicated in the
higher-right corner of each frame (in minutes and seconds).
egg_video	  
	  
	  
0:00	   0:50	   1:00	  
2:37	  
1:15	  
1:30	  
2:37	   1:15	   1:30	  
0:00	   0:50	   1:00	  
Fig. 13. Frames from experiment of the self-folding egg shape by uniform
heating. The sheet was built with the folding alignment process. The time
elapsed since exposure to uniform heating is indicated in the lower-right
corner of each frame (in minutes and seconds).
the humanoid, house and bunny shapes were hung on the
bars in the oven to reduce the effect of gravity on the self-
folding process. Figs. 1, 12 and 13 show the frames of
the experimental videos of the self-folding of the bunny,
humanoid and egg shapes, respectively.
C. Results and Discussion
Through our pipeline, we successfully constructed four
self-folded structures. Tab. III shows the size of each shape
before and after transformation.
Additionally, our approach designed and folded these
structures rapidly (Tab. IV, each computing time is the
average time of 10 runs). The computing time of each model
was less than 0.5 seconds on a laptop. The self-folding time
was also relatively short. All shapes folded themselves in
under 7 minutes. Since the egg was folded on the preheated
ceramic plate, it folded itself in 3 minutes.
The most time consuming step of the experimental design
and fabrication of self-folding structures was the physical
construction of the self-folding sheets. Since the design and
folding steps are automated, these steps were ﬁnished in less
than 7 minutes (Tab. IV). However, although we have clearly
deﬁned fabrication processes, because they still required
TABLE II
FABRICATION AND MATERIAL OF SELF-FOLDING SHEETS
Humanoid & House Egg & Bunny
Fabrication Process Folding Pin
Folding Temp. 55

C– 65

C 110

C– 120

C
Top&Bottom Layers Mylar Paper
Middle Layer PVC PP
TABLE III
SIZE OF SELF-FOLDED SHAPES
Humanoid House
Sheet Size (mm) 86 112 114 69
Object Size (mm) 71 76 27 46 38 29
Egg Bunny
Sheet Size (mm) 191 171 137 82
Object Size (mm) 31 34 26 49 43 38
TABLE IV
COMPUTING AND SELF-FOLDING TIMES
Humanoid House
Computing Time 478.17 ms 392.17 ms
Folding Time 4m 58s 4m 57s
Egg Bunny
Computing Time 478.2 ms 464.5 ms
Folding Time 2m 37s 6m 26s
CPU Intel Core i3-2350M (2.30GHz)
RAM 4 GB
Storage 500GB 5400rpm 2.5” HDD
(TOSHIBA MK5076GSX)
Graphics Intel HD Graphics 3000
some manual labor (CO2 laser machining, alignment, layer
lamination, release cutting), took 2 - 3 hours to construct
each self-folding sheet.
The egg shape was successfully foleded on the plate
(Fig. 13). Fig. 14 shows three eggs that were repeatedly
constructed. The eggs (left, middle) were baked at 115

C,
while the egg (right) was baked at 130

C. Although the front
sides look almost identical, the back sides of the eggs have
slight differences according to the temperature.
Since the bunny shape was heavy and complex, it did not
have enough force to completely fold its lower extremities
against gravity. We hung the bunny on the bar in the oven
(Fig. 1). This improved the performance and the bunny was
successfully folded (Fig. 15). However, more work is need
to achieve repeatability.
While the house shape was underfolded, the humanoid
shape was overfolded at the leg area. The reason for the
overfolding in the humanoid’s legs, but not the arms, is that
the length of the edges along the legs was longer than along
the arms but the size of the associated bridges was constant.
VI. CONCLUSION AND FUTURE WORKS
In this paper, we explored and analyzed an end-to-end
approach to making self-folding sheets activated by uniform-
heat. We introduced a design pipeline which automatically
generates folding information, then compiles this information
into fabrication ﬁles. We proposed the self-folding sheet
design algorithm and proved its correctness. We also demon-
1472
An	  End-??to-??End	  Approach	  to	  Making	  Self-??Folded	  3D	  Surface	  Shapes	   by	  Uniform	  Hea?ng 	   Byoungkwon	  An,	  Shuhei	  Miyashita,	  Mike	  Tolley,	  Daniel	  	  Aukes	  and	  	   Laura	  Meeker	  
130ºC 
Video:  
170ºC 130ºC 115ºC 115ºC 
0mm 0mm 0mm 0mm 0.72mm 
Heat: 
SMP 
Margin: 
http://youtu.be/fMCut9ZTh2o 
Size: x1.0 x1.5 x1.5 x1.0 x1.0 
Front 
Side 
Back 
Side 
Old Current 
Fig. 14. Front (top) and back (bottom) sides of three self-folded eggs.
(left, middle, right).
An	  End-??to-??End	  Approach	  to	  Making	  Self-??Folded	  3D	  Surface	  Shapes	  
by	  Uniform	  Hea@ng	   Byoungkwon	  An,	  Shuhei	  Miyashita,	  Mike	  Tolley,	  Daniel	  	  Aukes	  and	  	  
Laura	  Meeker	  
Video:  
Old visions 
Current version 
Front 
Side 
Back 
Side 
http://youtu.be/35d8oSYFSOY 
Fig. 15. Front and back sides of the self-folded bunny.
strated the implementation of this pipeline and characterized
the actuator design function to convert the theoretical design
to a physical self-folding sheet. Finally, we demonstrated this
approach experimentally by generating self-folding sheets for
the fabrication of four target shapes. The pipeline correctly
designed and built the sheets. The experiments were success-
ful, and the sheets were folded themselves in relatively short
times when exposed to uniform heating.
Some practical challenges remain to be addressed in the
physical fabrication of self-folding sheets. Delamination of
the SMP layers from the structural layers occurred near the
edges of our self-folding sheets for the egg and bunny shapes.
This may be mitigated by sealing the edges of the sheet or
with improved adhesion.
Other challenges are the evaluation of self-folding sheets.
Although the back side of the bunny shape in Fig. 15
shows the completion of the shape, it was hard to evalu-
ate or analyze the completeness of the self-folded model.
The development of benchmark and evaluation methods for
self-folding sheets would support a systematic approach to
improve the self-folding.
During self-folding, the collisions of the faces were a
problem. Since we did not have a simulator or optimizer,
to avoid the collisions, particularly for the bunny unfold-
ing, we rearranged some faces. One solution would be the
development of the self-folding simulator to minimize the
collision while the pipeline generates the design. Another
solution would be an upgraded design algorithm to allow the
self-folding sheet to fold itself with multiple folding steps.
REFERENCES
[1] S. Miyashita, C. Onal, and D. Rus. Self-pop-up cylindrical structure by
global heating. In IEEE/RSJ International Conference on Intelligent
Robots and Systems (IROS) (to appear). IEEE, 2013.
[2] M. Tolley, S. Felton, S. Miyashita, L. Xu, B. Shin, M. Zhou, D. Rus,
and R. Wood. Self-folding shape memory laminates for automated
fabrication. In IEEE/RSJ International Conference on Intelligent
Robots and Systems (IROS) (to appear). IEEE, 2013.
[3] E. Hawkes, B. An, N. Benbernou, H. Tanaka, S. Kim, E. Demaine,
D. Rus, and R. Wood. Programmable matter by folding. Proceedings
of the National Academy of Sciences, 107(28):12441–12445, 2010.
[4] B. An and D. Rus. Designing and programming self-folding sheet.
Robotics and Autonomous Systems (to appear), 2013.
[5] B. An, N. Benbernou, E. Demaine, and D. Rus. Planning to fold
multiple objects from a single self-folding sheet. Robotica, Special
Issue on Robotic Self-X Systems, 29(1):87–102, January 2011.
[6] S. Felton, M. Tolley, B. Shin, C. Onal, E. Demaine, D. Rus, and
R. Wood. Self-folding with shape memory composites. Soft Matter,
9:7688–7694, 2013.
[7] S. Felton, M. Tolley, C. Onal, D. Rus, and R. Wood. Robot self-
assembly by folding: A printed inchworm robot. In IEEE International
Conference on Robotics and Automation (ICRA). IEEE, 2013.
[8] J. Paik, E. Hawkes, and R. Wood. A novel low-proﬁle shape
memory alloy torsional actuator. Smart Materials and Structures,
19(12):125014.
[9] J. Paik and R. Wood. A bidirectional shape memory alloy folding
actuator. Smart Materials and Structures, 21(6):065013, 2012.
[10] E. Smela, O. Ingans, and I. Lundstrm. Controlled folding of
micrometer-size structures. Science, 268(5218):1735–1738, 1995.
[11] E. Smela. A microfabricated movable electrochromic “pixel” based
on polypyrrole. Advanced Materials, 11(16):1343–1345, 1999.
[12] J. Paik, R. Kramer, and R. Wood. Stretchable circuits and sensors for
robotic origami. In IEEE/RSJ International Conference on Intelligent
Robots and Systems (IROS), pages 414–420, 2011.
[13] Y . Liu, J. Boyles, J. Genzer, and M. Dickey. Self-folding of polymer
sheets using local light absorption. Soft Matter, 8:1764–1769, 2012.
[14] K. Yasu and M. Inami. Popapy: instant paper craft made up in a
microwave oven. In The 9th international conference on Advances in
Computer Entertainment, 2012.
[15] N. Bassik, G. Sttern, and D. Gracias. Microassembly based on hands
free origami with bidirectional curvature. Applied Physics Letters,
95:1764–1769, 2012.
[16] P Rothemund. Folding dna to create nanoscale shapes and patterns.
Nature, 440(7082):297–302, 2006.
[17] E. Demaine and J. O’Rourke. Geometric Folding Algorithms: Link-
ages, Origami, Polyhedra. Cambridge University Press, July 2007.
[18] T. Tachi. Origamizing polyhedral surfaces. IEEE Transactions on
Visualization and Computer Graphics, 16(2):298–311, 2010.
[19] N. Benbernou, E. Demaine, M. Demaine, and A. Ovadya. A uni-
versal crease pattern for folding orthogonal shapes. arXiv:0909.5388,
September 2009.
[20] E. Demaine, S. Devadoss, J. Mitchell, and J. O’Rourke. Continuous
foldability of polygonal paper. In the 16th Canadian Conference on
Computational Geometry (CCCG’04), pages 64–67, August 2004.
[21] E. Demaine, M. Demaine, and J Ku. Folding any orthogonal maze.
In Proc. ﬁfth international meeting of origami science, mathematics,
and education, pages 449–55, 2011.
[22] E. Demaine, S
´
. Fekete, and R. Lang. Circle packing for origami design
is hard. In Origami
5
: Proceedings of the 5th International Conference
on Origami in Science, Mathematics and Education (OSME 2010),
pages 609–626. A K Peters, Singapore, July 13–17 2010.
[23] C. Onal, R. Wood, and D. Rus. An origami-inspired approach to
worm robots. IEEE/ASME Transactions on Mechatronics, 18(2):430–
438, 2013.
[24] D. Soltero, B. Julian, C. Onal, and D. Rus. A lightweight modular
12-dof print-and-fold hexapod. In IEEE/RSJ International Conference
on Intelligent Robots and Systems (IROS) (to appear). IEEE, 2013.
[25] S. Brittain, O. Schueller, H. Wu, S. Whitesides, and G. Whitesides.
Microorigami: Fabrication of small, three-dimensional, metallic struc-
tures. Journal of Physical Chemistry B, 105(2):347–350, 2001.
[26] M. Yim, Wei-Min Shen, B. Salemi, D. Rus, M. Moll, H. Lipson,
E. Klavins, and G. S. Chirikjian. Modular self-reconﬁgurable robot
systems [grand challenges of robotics]. Robotics & Automation
Magazine, IEEE, 14(1):43–52, 2007.
[27] R. Nagpal. Programmable self-assembly using biologically-inspired
multiagent control. In International Conference on Autonomous Agents
and Multiagent Systems, pages 418–425, July 2002.
[28] S. Takahashi and C. Lin H. Yen H. Wu, S. Saw. Optimized
topological surgery for unfolding 3d meshes. Computer Graphics
Forum, 30:2077–2086, 2011.
[29] T. Tachi. Simulation of rigid origami. In Origami
4
: Proceedings of
40SME, pages 175–187, 2009.
[30] M. Bern, E. Demaine, D. Eppstein, E. Kuo, A. Mantler, and
J. Snoeyink. Ununfoldable polyhedra with convex faces. Compu-
tational Geometry: Theory and Applications, 24(2):51–62, February
2003. Special issue of selected papers from the 4th CGC Workshop
on Computational Geometry, 1999.
[31] Meshlab. WebSite: http://meshlab.sourceforge.net/.
1473
