  
? 
AbstractÑA multi-cluster tool with both single and dual-arm 
individual cluster tools is called a hybrid multi-cluster tool. To 
operate it, one needs to coordinate different types of robots for 
accessing the shared buffering modules. Aiming at finding a 
one-wafer periodic schedule such that the lower bound of cycle 
time can be reached, this work studies its scheduling when its 
bottleneck individual tool is process-bound. With a timed Petri 
net model, the scheduling problem is reduced to determine the 
waiting time of robots. Then, the conditions are presented, 
under which a one-wafer periodic schedule exists such that the 
lower bound of cycle time can be reached. Based on them, an 
efficient algorithm is given to check whether such a one-wafer 
periodic schedule exists. If so, it is found via simple calculation. 
An example is given to show its effectiveness. 
I. INTRODUCTION 
Cluster tools have been widely used in semiconductor 
manufacturing. Extensive studies have been done in modeling 
and performance evaluation in [8- 10, 13, 16, 19, 22-24]. They 
reveal that a cluster tool mainly operates under a steady state 
in two different regions: transport and process-bound one. The 
robot moving time from one process module (PM) to another 
can be treated as a constant and is much shorter than wafer 
processing time [6]. Hence, given constant robot task and PM 
processing time, a backward schedule is optimal for 
single-arm cluster tools [6, 7] and a swap strategy is effective 
for dual-arm cluster tools [10]. 
As a semiconductor manufacturing process becomes more 
and more complex, multi-cluster tools are invented to 
accommodate industrial needs [1]. They are composed of a 
number of single-cluster tools in a linear or treelike topology. 
A tool formed by K ? 2 tools is called K-cluster tool. In it, two 
adjacent tools are linked by a buffering module (BM) with one 
or two spaces in a non-cyclic fashion [2, 3, 17]. It may be 
composed of both single and dual-arm cluster tools and thus 
called a hybrid K-cluster tool. 
 
* This work was supported in part by the National Natural Science 
Foundation of China under Grants 60974098, 61034004, and 61374148. 
F. J. Yang, and Y. Qiao are with the Department of Industrial Engineering, 
School of Electro-Mechanical Engineering, Guangdong University of 
Technology, Guangzhou 510006, China (e-mail: fjyanggdut@163.com and 
yqiao@mail2.gdut.edu.cn). 
N. Q. Wu is with the Faculty of Information Technology, Macau 
University of Science and Technology, Macau and also the Department of 
Industrial Engineering, School of Electro-Mechanical Engineering, 
Guangdong University of Technology, Guangzhou 510006, China (e-mail:  
nqwu@must.edu.mo). 
M. C. Zhou is with The Key Laboratory of Embedded System and Service 
Computing, Ministry of Education, Tongji University, Shanghai 201804, 
China and also the Department of Electrical and Computer Engineering, New 
Jersey Institute of Technology, Newark, NJ 07102-1982 USA (e-mail: 
zhou@njit.edu). 
For K-cluster tools, Jevtic [5] proposes a heuristic rule to 
schedule it. Nevertheless, it is difficult to evaluate its 
performance. In [4], their scheduling problem is modeled by 
an event graph and network model. Then, an approach is 
proposed to find a periodic schedule. However, the method is 
based on simulation rather than analytical study [2]. With 
robot moving time ignored, a decomposition method is 
presented in [17]. By considering robot moving time, the work 
[2, 3] presents a polynomial algorithm to find an optimal 
multi-wafer cyclic schedule. 
A cyclic schedule with the minimal cycle time is desired 
for operating a K-cluster tool. The cycle time of a K-cluster 
tool is closely related to the fundamental period (FP) of each 
individual cluster tool. Let FP
i
 be the FP of the i-th individual 
tool and ? = max{FP
1
, FP
2
, É, FP
K 
} be the lower bound of 
cycle time of a hybrid K-cluster tool. Up to now, no study has 
answered under what condition a periodic schedule, especially 
a one-wafer cyclic schedule, can be found such that ? can be 
reached for a hybrid K-cluster tool. This work intends to 
address this important issue in both theory and practice. 
This work focuses on the scheduling problem of a linear 
hybrid K-cluster tool in which single-cluster tools are linked 
by BMs that can hold one wafer at a time without any 
processing function. A Petri net (PN) model is developed to 
describe a hybrid K-cluster tool with special attention being 
paid to the buffering modules. Based on it, this work derives 
the conditions under which the lower bound of cycle time can 
be reached. It then gives an efficient algorithm to check 
whether there is a one-wafer cyclic schedule for a hybrid tool 
such that its lower bound of cycle time can be reached. If so, 
this work finds such a schedule by simple calculation. 
The remainder of the paper is organized as follows. The 
next section develops the PN model for the system. Based on 
it, Section III analyzes the dynamic behavior of individual 
cluster tools. Section IV presents the conditions under which 
there is a one-wafer periodic schedule such that the lower 
bound of cycle time can be reached and a resulting scheduling 
algorithm. Section V uses an example to show it. Finally, 
Section VI concludes this paper. 
II. PETRI NET MODELING 
Without loss of generality, we make the following 
assumptions as done in [2, 3]: 1) a PM can process one wafer 
at a time; 2) no parallel module, or each step configures only 
one PM for wafer processing; 3) the wafers processed have the 
same recipe and visit a PM no more than once; and 4) the task 
time of robots is deterministic. Also, it is assumed that, there is 
at least one PM (not including the BM) in each individual 
cluster tool except that the tail (define later) one has at least 
two PMs. 
Optimal One-Wafer Cyclic Scheduling Analysis of Hybrid 
Multi-Cluster Tools With One-Space Buffering Module* 
FaJun Yang, NaiQi Wu, Senior Member, IEEE, Yan Qiao, and MengChu Zhou, Fellow, IEEE 
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 3279
  
Let N
n 
= {1, 2, É, n} and ?
n
 = {0} ? N
n
. For a hybrid 
K-cluster tool, let C
i
 and R
i
, i ? N
K
, denote the i-th cluster tool 
and the robot in it, respectively, where C
1
 is the ÒheadÓ tool 
with two loadlocks in it and C
K
 is the ÒtailÓ one. The BM 
shared by C
i
 and C
i+1
 is seen as the outgoing module for C
i
 and 
the incoming one for C
i+1
, respectively. Step j in C
i
 is denoted 
as PS
ij
. Then, the outgoing BM for C
i
 is denoted as PS
i(b[i])
, and 
the incoming BM for C
i+1
 is denoted as PS
(i+1)0
. As the 
loadlocks for C
1
 can be seen as an incoming module and it is 
denoted as PS
10
. Let n[i] + 1 be the number of steps in C
i
. Then, 
the steps in C
i
 are denoted as PS
i0
, PS
i1
, É, PS
i(b[i])
, 
PS
i(b[i]+1)
, É, PS
i(n[i])
 with PS
i0 
and PS
i(b[i]) 
being the incoming 
and outgoing ones, respectively. 
A. Petri Nets for Hybrid K-Cluster Tools 
To model a linear hybrid K-cluster tool, we extend the 
resource-oriented PN developed in [11, 15]. Its basic concept 
is based on [18, 20, 21]. It is a kind of directed graphs 
containing places and transitions defined as PN = (P, T, I, O, 
M, ?), where P is a finite set of places; T is a finite set of 
transitions with P ? T ? ? and P ? T = ?; I : P ? T ? N = {0, 
1, 2, É} is an input function; O: P ? T ? N is an output 
function; M : P ? N is a marking representing the number of 
tokens in places with M
0
 being the initial marking; and ?: P ? 
{1, 2, 3, É} is a capacity function where ?(p) represents the 
largest number of tokens that p can hold at any time. 
The preset of transition t is the set of all input places to t, 
namely, 
?
t = {p: p?P and I(p, t) > 0}. Its postset is the set of 
all output places from t, namely, t
?
 = {p: p?P and O(p, t) > 0}. 
Similarly, 
?
p = {t?T: O(p, t) > 0} and p
?
 = {t?T: I(p, t) > 0}. 
The transition enabling and firing rules can be found in [11, 
15]. 
PS
i0
p
ij 
z
ij
y
i0
x
i0
d
ij
q
ij 
t
ij 
 u
ij 
PS
i1
PS
ij
PS
i(n[i])
p
i0
q
i0
z
i0
d
i0
t
i0
u
i0
z
i1
d
i1
p
i1
q
i1
t
i1
u
i1
x
i1
y
i1
r
i
y
ij
x
ij
y
i(n[i])
x
i(n[i])
z
i(n[i])
d
i(n[i])
p
i(n[i])
u
i(n[i])
t
i(n[i])
q
i(n[i])
 
Fig. 2.1. The PN model for a single-arm cluster tool C
i
, i ? N
K
. 
We first present the PN model for a single-arm tool C
i
, i ? 
N
K
. Step j in C
i
, j ? ?
n[i]
, is modeled as follows. Timed place 
p
ij
 is used to model wafer processing Step PS
ij
 with ?(p
ij
) = 1. 
Timed place q
ij
 with ?(q
ij
) = 1 is introduced to model R
i
Õs 
waiting before unloading a token from p
ij
. Non-timed places z
ij
 
and d
ij
 are added to model that R
i 
holds a token for loading into 
p
ij
 and moving to step j + 1 (or step 0 if j = n[i]), respectively. 
Timed transitions t
ij
 and u
ij
 are used to model that R
i
 loads a 
token into p
ij
 and unloads a token from p
ij
, respectively. Then, 
by adding arcs (z
ij
, t
ij
), (t
ij
, p
ij
), (p
ij
, u
ij
), (q
ij
, u
ij
), and (u
ij
, d
ij
), the 
PN model for Step PS
ij
 in a single-arm tool C
i
 is obtained as 
shown in Fig. 2.1. With the PN model for a step, the wafer 
flow in C
i
 can be modeled as follows. Timed transition x
ij
 
together with arcs (d
ij
, x
ij
) and (x
ij
, z
i(j+1)
) is used to model the 
event that R
i
 moves from Steps j to j + 1 (or Step 0 if j = n[i], 
and arc (x
ij
, z
i(j+1)
) should be replaced by (x
ij
, z
i0
)) with a wafer 
held. Robot R
i
 is modeled by place r
i
 with ?(r
i
) = 1, indicating 
that it has only one arm. A token in it represents that the arm is 
available. Timed transition y
ij
 together with arcs (r
i
, y
ij
) and (y
ij
, 
q
ij
) is used to model that R
i
 moves from Steps j + 2 to j (or from 
Step 0 if j = n[i] - 1, or from Step 1 if j = n[i]) without carrying 
a wafer. Finally, arc (t
ij
, r
i
) is added to represent that, by firing 
t
ij
, the robot arm is released. In this way, the PN model for a 
single-arm tool C
i
 is obtained as shown in Fig. 2.1. 
PS
i0
PS
i1
PS
ij
 
PS
i(n[i])
P
i0
P
i1
P
ij 
P
i(n[i])
r
i
u
i0
u
i1
u
ij
u
i(n[i])
t
i0
t
i1
t
ij 
t
i(n[i])
x
i1
x
ij 
x
i0
x
i(n[i])
z
i0
q
i0
d
i0
z
i1
q
i1
d
i1
z
ij
q
ij
d
ij
z
i(n[i])
q
i(n[i])
d
i(n[i])
2
2
2
2
2
2
2
2
 
Fig. 2.2. The PN model for a dual-arm cluster tool C
i
, i ? N
K
. 
If C
i
, i ? N
K
, is a dual-arm one, for Step j, j ? ?
n[i]
, timed 
place p
ij
 is used to model wafer processing at Step PS
ij
 with 
?(p
ij
) = 1. Timed place z
ij
 with ?(z
ij
) = 1 models R
i
Õs waiting 
before unloading a token from p
ij
. As  a swap strategy is 
adopted in a dual-arm tool, we use timed place q
ij
 with ?(q
ij
) = 
2 to model the robot waiting during swap at p
ij
. Non-timed 
place d
ij
 with ?(d
ij
) = 1 is used to model the state that a swap 
ends. Timed transitions u
ij
 and t
ij
 are used to model that R
i
 
unloads a token from p
ij
 and loads a token into p
ij
, respectively. 
Then, by adding arcs (z
ij
, u
ij
), (u
ij
, q
ij
), (q
ij
, t
ij
), (t
ij
, d
ij
), (t
ij
, p
ij
), 
and (p
ij
, u
ij
), the PN model for Step PS
ij
 is obtained as shown in 
Fig. 2.2. Then, we can obtain the PN model for a dual-arm tool 
in a similar way like single-arm tool as shown in Fig. 2.2. 
For a BM that links C
i
 and C
i+1
, i ? N
K-1
, there are four 
cases: 1) both C
i
 and C
i+1 
are dual-arm tools (D-D in short); 2) 
C
i
 is a single-arm tool and C
i+1 
is a dual-arm one (S-D); 3) C
i
 is 
a dual-arm tool and C
i+1 
is a single-arm one (D-S); and 4) both 
C
i
 and C
i+1 
are single-arm tools (S-S). Let the BM shared by C
i
 
and C
i+1 
be PM
i(b[i])
 as an outgoing module for C
i
 and PM
(i+1)0
 
as an incoming module for C
i+1
. Places p
i(b[i])
 and
 
p
(i+1)0
 with 
p
ib[i] 
= p
(i+1)0
 and ?(p
i(b[i])
) = ?(p
(i+1)0
) = 1 are used to model it. 
The models of the four cases are shown in Fig. 2.3. Notice that 
p
i(b[i]) 
and p
(i+1)0 
represent the same BM, therefore, when we 
refer to Step b[i] in C
i
 we use p
i(b[i])
, while to Step 0 in C
i+1
 we 
use p
(i+1)0
. 
With the PN structure developed, by putting a type of 
token W
0
 representing a virtual wafer, the initial marking M
0
 
of the PN model is set as follows. First, set M
0
(p
10
) = N to 
indicate that there are always wafers to be processed and the 
loadlocks can hold all these wafers. 
3280
  
If C
1 
is a single-arm tool, we set M
0
(p
1j
) = 1, j ? N
n[1]
 and j 
? b[1], M
0
(p
1(b[1])
) = 0; M
0
(z
1j
) = M
0
(d
1j
) = M
0
(r
1
) = 0, j ? ?
n[1]
; 
M
0
(q
1j
) = 0, j ? ?
n[1]
, and j ? b[1] - 1, and M
0
(q
1(b[1]-1)
) = 1, 
meaning that R
1 
is waiting at Step PS
1(b[1]-1)
 for unloading a 
wafer there. If C
1 
is a dual-arm cluster tool, set M
0
(p
1j
) = 1, j ? 
N
n[1]
; M
0
(q
1j
) = M
0
(d
1j
) = 0, j ? ?
n[1]
; M
0
(r
1
) =1 and M
0
(z
1j
) = 0, 
j ? ?
n[1]
, and j ? b[1], and M
0
(z
1(b[1])
) = 1, implying that R
1 
is 
waiting at Step PS
1(b[1])
 for unloading a wafer there. 
For C
i
, i ? N
K  
- {1}, if it is a single-arm tool, set M
0
(z
ij
) = 
M
0
(d
ij
) = M
0
(r
i
) = 0, j ? ?
n[i]
; M
0
(p
ij
) = 1 and M
0
(p
i1
) = 0, j ? 
N
n[i]
 - {1}; M
0
(q
ij
) = 0, j ? N
n[i]
, and M
0
(q
i0
) = 1, meaning that 
R
i 
is waiting at Step PS
i0
 for unloading a wafer there. If it is a 
dual-arm tool, set M
0
(p
ij
) = 1, j ? N
n[i]
; M
0
(q
ij
) = M
0
(d
ij
) = 0, j ? 
?
n[i]
, M
0
(r
i
) = 1; M
0
(z
ij
) = 0, j ? N
n[i]
; and M
0
(z
i0
) = 1, implying 
that R
i 
is waiting at Step PS
i0
 for unloading a wafer there. 
In the PN model for a BM, place p
i(b[i]) 
(p
(i+1)0
) has two 
output transitions. For example, in Fig 2.3(c), both u
i(b[i])
 and 
u
(i+1)0
 are the output transitions of p
i(b[i]) 
(p
(i+1)0
). To avoid 
conflict, colors are introduced into the model. We define the 
color for transitions and tokens as follows. 
Definition 2.1: Define the color of a transition t
i
 as C(t
i
) = 
{c
i
}. If a token in p ? 
?
t
i
 enables t
i
, then the token has the color 
of t
i
, i.e., c
i
. 
By Definition 2.1, the colors of u
(i+1)0
 and u
i(b[i])
 in Fig 2.3 
are c
(i+1)0
 and c
i(b[i])
, respectively. If a token enters p
i(b[i]) 
by 
firing t
i(b[i])
, it has color c
(i+1)0
 since it enables u
(i+1)0
; while a 
token enters p
i(b[i]) 
by firing t
(i+1)0
, it has color c
i(b[i])
. In this way, 
the conflicts are completely resolved. However, the PN model 
is deadlock-prone. To solve this problem, we make the PN be 
a controlled PN. The control policy is defined as follows. 
Definition 2.2: In a PN for single-arm tool C
i
 , at marking 
M, y
ij
, i ? N
K
, j ? ?
n[i] 
- {n[i], b[i] - 1}, is control-enabled if 
M(p
i(j+1)
) = 0; y
i(b[i]-1)
 is control-enabled if transition t
i(b[i]+1)
, i ? 
N
K-1
, has just been executed; y
i(n[i])
 is control-enabled if 
transition t
i1
, i ? N
K
, has just been executed. 
B. Modeling Activity Time 
In the developed PN model, both transitions and places 
represent activities that take time. If time ? is associated with 
transition t, it means that firing t takes ? time units. If it is 
associated with place p, a token in p must stay there for at least 
? time units before it can enable its output transition. The 
symbols and time durations for different places and transitions 
of C
i
, i ? N
K
, are listed in Table I. 
TABLE I. Time duration associated with transitions and places in C
i
 
Symbol Transition 
or place 
Action Time  Tool type 
?
i
 t
ij 
? T R
i
 loads/unloads a 
wafer into/from 
Step j, j ? ?
n[i]
 
?
i
 Single-arm 
one 
?
i
 u
ij 
and t
ij 
? 
T 
Swap operation at 
Step j, j ? ?
n[i]
 
?
i
 dual-arm 
one 
?
i
 x
ij 
? T R
i
 moves from a 
step to another with 
a wafer held 
?
i
 Single and 
dual-arm 
ones  
?
i
 y
ij
? T R
i
 moves from a 
step to another 
without holding a 
wafer  
?
i
 Single-arm 
one 
?
ij
 p
ij 
? P A waferÕs 
processing in p
ij
, j? 
?
n[i]
 
?
ij
 Single and 
dual-arm 
ones 
?
ij
 p
ij 
? P A waferÕs 
processing and 
waiting in p
ij
, j? 
?
n[i]
 
? ?
ij
 Single and 
dual-arm 
ones 
?
ij
 q
ij 
? P R
i
 waits before 
unloading a wafer 
from Step j, j? ?
n[i]
 
[0, ?) Single-arm 
one 
?
ij
 z
ij
? P R
i
 waits at p
ij
, j? 
?
n[i]
 
[0,?) Dual-arm 
one 
?
ij1
 q
ij
? P R
i
 waits during 
swap at p
ij
, j? ?
n[i]
 
0 Dual-arm 
one 
 d
ij 
? P No robot activity is 
associated 
0 Single and 
dual-arm 
ones 
 z
ij 
? P No robot activity is 
associated 
0 Single-arm 
one 
III. DYNAMIC BEHAVIOR OF INDIVIDUAL CLUSTER TOOLS 
With the PN model, from [12], for single-arm tool C
i
, i ? 
N
K
, the time taken for completing a wafer at step j in C
i
 is ?
ij
 = 
?
ij
 + 4?
i
 + 3?
i
 + ?
i(j-1)
, j? N
n[i]
, and ?
i0
 = ?
i0
 + 4?
i
 + 3?
i
 + ?
i(n[i]) 
= 4?
i
 + 3?
i
 + ?
i(n[i])
. If R
i
Õs waiting time is removed, the time 
taken for completing a wafer at Step j is 
?
ij 
= ?
ij
 + 4?
i
 + 3?
i
, j? N
n[i]
                                 (3.1) 
and      ?
i0 
= 4?
i
 + 3?
i
      
    
                                             (3.2) 
With ?
ij
 being the wafer sojourn time in a PM,  the cycle 
time at Step j in C
i
 is 
?
ij 
= ?
ij
 + 4?
i
 + 3?
i
 + ?
i(j-1)
, j? N
n[i]                                 
(3.3) 
 
Fig. 2.3. The PN model for the buffering module between C
i
 and C
i+1
 that are (a) D-D, (b) S-D, (c) D- S, and (d) S-S cases. 
3281
  
and         ?
i0 
= ?
i0
 + 4?
i
 + 3?
i
 + ?
i(n[i])
    
                                    
(3.4) 
The robot cycle time for a single-arm tool is 
?
i
 = 2(n[i] + 1)(?
i
 + ?
i
) +
[]
0
ni
j ij
?
? ?
= ?
i1 
+ ?
i2           
(3.5) 
where ?
i1
 = 2(n[i] + 1)(?
i
 + ?
i
)
 
is the robot cycle time without 
waiting and is a constant, ?
i2
 =
[]
0
ni
j ij
?
? ?
is the robot waiting 
time in a cycle. 
For dual-arm cluster tool C
i
, i ? N
K
, according to [14], the 
time needed for completing a wafer at Step j in C
i
 is 
?
ij 
= ?
ij 
+ ?
i
, j? ?
n[i]
      
                                                      
(3.6) 
The cycle time at Step j in C
i
 is 
?
ij 
= ?
ij 
+ ?
i
, j? ?
n[i]                                                                  
(3.7) 
The robot cycle time for dual-arm cluster tool C
i
 is 
?
i
 =
[]
0
ni
j ij
?
? ?
+ (n[i] + 1)(?
i
 + ?
i
) = ?
i2 
+  ?
i1  
    (3.8) 
where ?
i2
 =
[]
0
ni
j ij
?
? ?
and ?
i1
 = (n[i] + 1)(?
i
 + ?
i
) are the 
robot waiting and robot task time, respectively. 
For each C
i
, as the manufacturing process is serial. 
Therefore, in the steady state, for each step, the cycle time 
must be same and should be equal to the robot cycle time. 
Thus, C
i
 should be scheduled such that 
?
i
 = ?
i0 
= ?
i1
 = É = ?
i(n[i]) 
=
  
?
i                                      
(3.9) 
IV. SCHEDULING HYBRID K-CLUSTER TOOL 
A. Schedule Properties 
It follows from (3.9) that, to schedule an individual tool in 
a hybrid tool, the key is to determine its cycle time ?
i
. Let ?
i
 = 
max {?
i0
, ?
i1
, É, ?
i(n[i]) 
, ?
i1
} be the fundamental period (FP) of 
C
i
, and ? = max{?
1
, ?
2
, É, ?
K
}. Assume that C
h
, 1 ?h? K, is 
the bottleneck, or ? = ?
h
. As discussed above, we assume that 
C
h
 is process-bound in this paper and such a tool is called 
process-dominant hybrid K-cluster tool. In the following 
discussion, because of the space limitation, we present the 
obtained results by omitting their proof. We have the 
following results. 
Proposition 4.1: For a process-dominant hybrid K-cluster 
tool with C
h
 being the bottleneck, if tool C
i 
is scheduled such 
that its cycle time is ?
i
, i ? N
K
, further, if there exists a cyclic 
schedule with cycle time ?, then, 
?
i 
= ?  ? ?
 
, ?i ? N
K                          
                        (4.1) 
It follows from Propositions 4.1 that we have the following 
result immediately for a one-wafer cyclic schedule such that 
the lower bound of cycle time is reached. 
Theorem 4.1: To find a periodic schedule reaching the 
lower bound of cycle time, the cycle time of all individual 
tools in a process-dominant hybrid K-cluster tool is ?. 
?
i 
= ? = ?,  
 
? i ? N
K                                                           
(4.2) 
By Theorem 4.1, it means that each individual cluster tool 
C
i
 in a hybrid K-cluster should be scheduled such that ?
i
 ? ?. 
In developing the scheduling method, we assume that after R
i
 
loads a wafer into p
i(b[i])
, i ? N
K-1
, R
i+1
 unloads the wafer from 
p
(i+1)0
 (p
i(b[i])
) immediately, for one can always schedule the 
system in this way. According to the scheduling method for an 
individual cluster tool, to optimally schedule a process- 
dominant hybrid K-cluster tool is to determine ?
ij
Õs for i ? N
K
 
and j ? ?
n[i]
 such that the multiple robots can be optimally 
coordinated. If the system is scheduled such that the cycle time 
of each tool is ? and, at any marking M, a) when R
i
, i ? N
K
, is 
scheduled to load (firing t
i(b[i])
) a wafer into p
i(b[i])
 (p
(i+1)0
), 
M(p
(i+1)0
) = 0 (M(p
i(b[i])
) = 0) and, b) while R
i
 is scheduled to 
unload (firing u
i(b[i])
) a wafer from p
(i+1)0
 (p
i(b[i])
), M(p
(i+1)0
) = 1 
(M(p
i(b[i])
) = 1). Then, a one-wafer cyclic schedule with ? as its 
cycle time is obtained. Notice that there is no outgoing buffer 
in C
K
, i.e., p
Kb[K]
 does not exist, and for the loadlocks, M(p
10
) = 
N is always met. To obtain such a schedule, we should present 
condition(s) under which each BM that links C
i
 and C
i+1
, i ? 
N
K-1
, is operated by coordinating R
i
 and R
i+1
 such that the cycle 
time of a hybrid K-cluster reaches its lower bound. We have 
the following results. 
Lemma 4.1: For a process-dominant K-cluster tool, if the 
pair of C
i
 and C
i+1
, i ? N
K-1
, is D-D or S-D case, there is always 
a cyclic schedule for both C
i
 and C
i+1
 such that their cycle time 
reaches the lower bound. 
It follows from Lemmas 4.1 that for D-D and S-D, there is 
always a cyclic schedule for both C
i
 and C
i+1
 such that their 
cycle time reaches the lower bound. Thus, to know if a 
process-dominant hybrid K-cluster tool can reach the lower 
bound, we need examine D-S and S-S cases only. As for them, 
there is no guarantee that there are schedules for both C
i
 and 
C
i+1
 such that the lower bound of cycle time can be reached. 
Next, we identify the conditions under which both C
i
 and C
i+1
 
can be scheduled to reach the lower bound of cycle time. 
Theorem 4.2: For a process-dominant hybrid K-cluster tool, 
to obtain a one-wafer cyclic schedule such that the lower 
bound of cycle time is reached, if and only if, for C
i 
and C
i+1
, i 
? N
K-1
, the following conditions are satisfied by determining 
?
ij
Õs and ?
(i+1)l
Õs, j? ?
n[i]
 and l ? ?
n[i+1]
. 
?
ij 
= ?
(i+1)l
 = ? , j? ?
n[i]
 and l ? ?
n[i+1]                         
(4.3) 
If the pair of C
i 
and C
i+1
 is D-S case 
? - ?
i
 ? 4?
i+1 
+ 3?
i+1 
+ ?
(i+1)(n[i+1])
                        (4.4) 
If the pair of C
i 
and C
i+1
 is S-S case 
? - (4?
i 
+ 3?
i 
+ ?
i(b[i]-1)
) ? 4?
i+1 
+ 3?
i+1 
+ ?
(i+1)(n[i+1])
    (4.5) 
Theorem 4.2 presents the conditions under which a 
one-wafer cyclic schedule with its cycle time being the lower 
bound can be obtained. Next, we find such a schedule if there 
is one for a given hybrid K-cluster tool. 
B. Scheduling Hybrid K-Cluster Tool 
From Theorem 4.2, it is known that, for a pair of C
i
 and 
C
i+1
, i ? N
K-1
, linked by a BM in a hybrid K-cluster tool, if, for 
any case, the corresponding conditions given in Theorem 4.2 
are satisfied, the system can always be scheduled such that the 
lower-bound of cycle time is reached. Notice that the 
conditions given in Theorem 4.2 are functions of ?
ij
Õs for a 
single-arm tool only and it has nothing to do with a dual-arm 
cluster tool. Thus, the key in scheduling a hybrid tool is to 
schedule all the single-arm cluster tools by determining proper 
?
ij
Õs. For dual-arm tool C
i
, we can simply set ?
i0 
= ?
i2 
= ? - ?
i1
 
and ?
ij
 = 0, i ? N
n[i]
. However, if C
i
 is a single-arm tool, to 
make the conditions given in Theorem 4.2 satisfied if it is 
3282
  
possible, we need to determine ?
ij
Õs such that ?
i(b[i]-1)
 and ?
i(n[i])
 
are as small as possible. Thus, if C
K
 is a single-arm tool, we set 
?
Kj 
= min{? - (4?
K 
+ 3?
K 
+ ?
K(j+1)
), ? - ?
K1
 -
1
0
j
Kj
j
?
?
?
?
}, j ? 
?
n[K]
 - {n[K]}, such that ?
Kj
 can be as large as possible. At last, 
?
K(n[K])
 = ? -?
K1
 - 
[ ] 1
0
nK
Kj
j
?
?
?
?
. Then, we need to check 
whether ? - ?
K-1
 ? 4?
K 
+ 3?
K 
+ ?
K(n[K])
 holds or not if the pair 
of C
K-1
 and C
K
 is D-S case. If yes, the system cannot reach the 
lower bound of cycle time, otherwise, we set ?
(K-1)j
 = 0, j ? 
N
n[K-1]
, and ?
(K-1)0 
= ?
(K-1)2 
= ? - ?
(K-1)1
. If the pair of C
K-1
 and 
C
K
 is S-S case, we need to check whether ? - (4?
K-1 
+ 3?
K-1 
+ 
?
(K-1)(b[K-1]-1)
) ? 4?
K 
+ 3?
K 
+ ?
K(n[K])
 holds or not. If yes, the 
system cannot reach the lower bound of cycle time, otherwise, 
we set ?
(K-1)(b[K-1]-1)
 = min{? - (4?
(K-1) 
+ 3?
(K-1) 
) - (4?
K 
+ 3?
K 
+ 
?
K(n[K]
), ? - ?
(K-1)1
} as large as possible, and set ?
(K-1)j
 = 
min{? - (4?
K-1 
+ 3?
K-1 
+ ?
(K-1)(j+1)
), ? - ?
(K-1)1
 - ?
(K-1)(b[K-1]-1)
 -
1
( 1)
0
j
Kj
j
?
?
?
?
?
} as large as possible, j ? ?
n[K-1]
 - {n[K-1], 
b[K-1]-1}, at last, ?
(K-1)(n[K-1])
 = ? -
[ 1] 1
( 1)
0
nK
Kj
j
?
??
?
?
?
- ?
(K-1)1
. 
Then, set the robot waiting time for C
K-2
. By this way, we can 
determine the robot waiting time for C
K-2
, C
K-3
, É, and C
1
 
sequentially. In summary, we can schedule a process- 
dominant hybrid K-cluster tool by scheduling the individual 
cluster tool one by one as presented next. 
Algorithm 4.1: Procedure for scheduling a process- 
dominant hybrid K-cluster tool 
1. Calculate ?
i
 and ?
i1
, i ? N
K
, and let ? = max{?
1
, ?
2
, É, 
?
K
}. 
2. Determine ?
Kj
, j ? ?
n[K]
, as follows 
1) i = K, if C
i
 is a single-arm tool. 
a) For j = 0, 1, É n[i] - 1 do 
b) ?
ij 
= min{? - (4?
i 
+ 3?
i 
+ ?
i(j+1)
), ? - ?
i1
 -
1
0
j
ij
j
?
?
?
?
}; 
c) ?
i(n[i]) 
= ? -?
i1 
-
[ ] 1
0
ni
ij
j
?
?
?
?
, i ? i - 1; 
d) If C
i
 is a single-arm tool, go to Step 3, else, go to Step 
4. 
2) i = K, if C
i
 is a dual-arm tool. 
a) For j = 1, 2, É n[i] do 
b) ?
ij
 = 0, ?
i0 
= ?
i2 
= ? - ?
i1
, i ? i - 1; 
c) If C
i
 is a single-arm tool, go to Step 6, else, go to Step 
5. 
3. a)  If ? - (4?
i 
+ 3?
i 
) - (4?
i+1 
+ 3?
i+1 
+ ?
(i+1)(n[i+1]
) ? 0, the 
system cannot reach the lower bound of cycle time, 
and go to Step 7; 
b) Otherwise, ?
i(b[i]-1)
 = min{? - (4?
i 
+ 3?
i 
) - (4?
i+1 
+ 
3?
i+1 
+ ?
(i+1)(n[i+1]
), ? - ?
i1
}; 
c) For j ? ?
n[i]
 - {n[i], b[i]-1}, do 
d) ?
ij
 = min{? - (4?
i 
+ 3?
i 
+ ?
i(j+1)
), ? - ?
i1
 - ?
(i(b[i]-1)
 -
1
0
j
ij
j
?
?
?
?
}; 
e) ?
i(n[i])
 = ? - ?
i1 
-
[ ] 1
0
ni
ij
j
?
?
?
?
, i ? i - 1; 
f) If i = 0, go to Step ?. Otherwise, go to Step g; 
g) If C
i
 is a single-arm cluster tool, back to Step 3, else, 
go to Step 4. 
4. a) If ? - ?
i
 - (4?
i+1 
+ 3?
i+1 
+ ?
(i+1)(n[i+1]
) ? 0, the system 
cannot reach the lower bound, and go to Step 7; 
b) Otherwise, for j = 1, 2, É, n[i] do 
c) ?
ij
 = 0, ?
i0 
= ?
i2 
= ? - ?
i1
, i ? i - 1; 
d) If i = 0, then go to Step 7. Otherwise, go to Step e; 
e) If C
i
 is a single-arm tool, go to Step 6, else, go to 
Step 5. 
5. a)   For j = 1, 2, É, n[i] do 
b) ?
ij
 = 0, ?
i0 
= ?
i2 
= ? - ?
i1
, i ? i - 1; 
c) If i = 0, then go to Step ?. Otherwise, go to Step d; 
d) If C
i
 is a single-arm tool, go to Step ?, else, back to 
Step v. 
6. a)   ?
i(b[i]-1)
 = min{? - (4?
i 
+ 3?
i
) -?
i+1
, ? - ?
i1
}; 
b) For j ? ?
n[i]
 - {n[i], b[i]-1}, do 
c) ?
ij
 = min{? - (4?
i 
+ 3?
i 
+ ?
i(j+1)
), ? - ?
i1
 - ?
i(b[i]-1)
 - 
1
0
j
ij
j
?
?
?
?
}; 
d) ?
i(n[i])
 = ? - ?
i1 
-
[ ] 1
0
ni
ij
j
?
?
?
?
, i ? i - 1; 
e) If i = 0, go to Step 7. Otherwise, go to Step f; 
f) If C
i
 is a single-arm tool, go back to Step 3, else, 
back to Step 4. 
7. End 
By Algorithm 4.1, for a hybrid K-cluster tool, we can 
check if there is a one-wafer cyclic schedule such that its 
lower-bound of cycle time is reached. This is stated as the 
following theorem. 
Theorem 4.3: By Algorithm 4.1, a one-wafer cyclic 
schedule is obtained for a process-dominant hybrid K-cluster 
such that its cycle time reaches the lower-bound if it exists. 
Theorem 4.4: The complexity of Algorithm 4.1 is constant. 
V. ILLUSTRATIVE EXAMPLE 
For a hybrid 3-cluster tool, R
1
 and R
2
 are single-arm tools 
and R
3
 is a dual-arm one. The activity time is as follows: for 
C
1
, ?
10 
= 0 (the loadlocks), ?
11 
= 40s, ?
12 
= 0 (a BM), ?
13 
= 41s, 
?
14 
= 10s, ?
1 
= 5s, and ?
1 
= 1s; for C
2
, ?
20 
= 0, ?
21 
= 78s, ?
22 
= 
0, ?
23 
= 60s, ?
24 
= 15s, ?
2 
= 7s, and ?
2 
= 1s; and for C
3
, ?
30 
= 0, 
?
31 
= 64s, ?
32 
= 48s, ?
33 
= 85s, ?
34 
= 90s, ?
3 
= 10s, and ?
3 
= 1s. 
For C
1
, we have ?
10 
= ?
10 
+ 4?
1 
+ 3?
1 
= 23s, ?
11 
= 63s, ?
12 
= 
23s, ?
13 
= 64s, ?
14 
= 33s, and ?
11 
= 2(n[1] + 1) ? (?
1 
+ ?
1
) = 60s. 
Hence, ?
1 
= 64s. For C
2
, we have ?
20
 = 31s, ?
21 
= 109s, ?
22 
= 
31s, ?
23 
= 91s, ?
24 
= 46s, and ?
21
 = 80s. Hence, ?
2 
= 109s, and 
C
2
 is process-bound. For C
3
, we have ?
30 
= 10s, ?
31 
= 74s, ?
32 
= 
58s, ?
33 
= 95s, ?
34 
= 100s, and ?
31 
= 55s. Hence, ?
3 
= 100s. 
Because ?
2 
= 109s ? ?
3 
= 100s ? ?
1 
= 64s and C
2
 is 
process-bound, this hybrid 3-cluster tool is process-dominant 
with ? = 109s. Then, according to the method presented in 
this paper, set ?
1
 = ?
2
 = ?
3
 = ? = 109s. 
By Algorithm 4.1, with C
3
 being a dual-arm one, set ?
3j
 = 
0, j ? N
n[3]
, and ?
30 
= ?
32 
= ? - ?
31
 = 109 - 55 = 54s. For C
2
, it 
3283
  
is a single-arm one and ? - (4?
2 
+ 3?
2
) - ?
3
 = 109 - 31 - 10 = 68 
? 0. Thus, according to Algorithm 4.1, we have ?
2(b[2]-1)
 = ?
21
 
= min{? - (4?
2 
+ 3?
2 
) - ?
3
, ? - 2(n[2] + 1)(?
2 
+ ?
2
)} = 29 and 
?
2j
 = 0, j ? ?
n[2]
 and j ? 1. Then, for C
1
, it is also a single-arm 
one and ? - (4?
1 
+ 3?
1
) - (4?
2 
+ 3?
2 
+ ?
2(n[2]
) = 109 - 23 - 31 = 
55 ? 0. Thus, by using Algorithm 4.1, we have ?
1(b[1]-1)
 = ?
11
 = 
min{? - (4?
1 
+ 3?
1 
) - (4?
2 
+ 3?
2 
+ ?
2(n[2]
), ? - 2(n[1] + 1)(?
1 
+ 
?
1
)} = 49 and ?
1j
 = 0, j ? ?
n[1] 
and j ? 1. In this way, a 
one-wafer cyclic schedule that reaches the lower bound of 
cycle time is obtained. 
VI. CONCLUSION 
Up to now, there is no research report on the optimal 
scheduling of process-dominant hybrid K-cluster tools. This 
paper for the first time presents the conditions under which a 
one-wafer cyclic schedule to reach its lower bound of cycle 
time exists. Furthermore, it gives an efficient algorithm to 
find such a schedule. With such a schedule, a hybrid K-cluster 
tool is clearly operated optimally, thereby guaranteeing the 
highest throughput. This work uses a PN model to describe 
the dynamic behavior of a hybrid K-cluster tool with special 
attention being paid to the buffering modules. It is our future 
work to obtain its minimal cycle time and optimal one-wafer 
cyclic schedule when a hybrid K-cluster tool cannot reach its 
lower bound. 
REFERENCES 
[1] W. K. Chan, J. G. Yi, and S. W. Ding, ÒOn the optimality of one-unit 
cycle scheduling of multi-cluster tools with single-blade robots,Ó in 
Proc. IEEE Int. Conf. Auto. Sci. Eng., 392Ð397, Scottsdale, AZ, USA, 
2007. 
[2] W. K. Chan, J. G. Yi, and S. W. Ding, ÒOptimal Scheduling of 
Multi-cluster Tools with Constant Robot Moving Times, Part I: 
Two-Cluster Analysis,Ó IEEE Transactions on Automation Science and 
Engineering, vol. 8, pp. 5-16, 2011. 
[3] W. K. Chan, J. G. Yi, S. W. Ding, and D. Z. Song, ÒOptimal Scheduling 
of Multi-cluster Tools with Constant Robot Moving Times, Part II: 
Tree-Like Topology Configurations,Ó IEEE Trans. on Automation 
Science and Engineering, vol. 8, pp. 17-28, 2011. 
[4] S. W. Ding, J. G. Yi, and M. T. Zhang, ÒMulticluster Tools Scheduling: 
an Integrated Event Graph and Network Model Approach,Ó IEEE 
Transactions on Semiconductor Manufacturing, vol. 19, pp. 339 - 351, 
2006. 
[5] D. Jevtic and S. Venkatesh, ÒMethod and Apparatus for Scheduling 
Wafer Processing within a Multiple Chamber Semiconductor Wafer 
Processing Tool Having a Multiple Blade Robot,Ó in U.S. Patent. vol. 
6,224,638, 2001. 
[6] J.-H. Kim, T.-E. Lee, H.-Y. Lee, and D.-B. Park, Scheduling analysis of 
timed-constrained dual-armed cluster tools, IEEE Transactions on 
Semiconductor Manufacturing, vol. 16, no. 3, 521-534, 2003. 
[7] M.-J. Lopez and S.-C. Wood, Systems of multiple cluster tools - 
configuration, reliability, and performance, IEEE Transactions on 
Semiconductor Manufacturing, vol. 16, no. 2, 170-178, 2003. 
[8] T. L. Perkinson, R. S. Gyurcsik, and P. K. MacLarty, ÒSingle-wafer 
cluster tool performance: An analysis of the effects of redundant 
chambers and revisitations sequences on throughput,Ó IEEE 
Transactions on Semiconductor Manufacturing, vol. 9, 384-400, 1996. 
[9] T. L. Perkinson, P. K. MacLarty, R. S. Gyurcsik, and R. K. Cavin, III, 
ÒSingle-wafer cluster tool performance: An analysis of throughput,Ó 
IEEE Trans. on Semiconductor Manufacturing, vol. 7, 369-373, 1994. 
[10] S. Venkatesh, R. Davenport, P. Foxhoven, and J. Nulman, A steady 
state throughput analysis of cluster tools: Dual-blade versus 
single-blade robots, IEEE Trans. Semi-conduct. Manuf., vol.10, pp. 
418Ð424, 1997. 
[11] N. Q. Wu, Necessary and sufficient conditions for deadlock-free 
operation in flexible manufacturing systems using a colored Petri net 
model, IEEE Trans. On Systems, Man, and Cybernetics, Part C, vol. 29, 
no. 2, 192-204, 1999. 
[12] N. Q. Wu, C. B. Chu, F. Chu, and M. C. Zhou, ÒA Petri net method for 
schedulability and scheduling problems in single-arm cluster tools with 
wafer residency time constraints,Ó IEEE Transactions on 
Semiconductor Manufacturing, vol. 21, pp. 224 - 237, 2008. 
[13] N. Q. Wu, F. Chu, C. Chu, and M. Zhou, ÒPetri Net-Based Scheduling 
of Single-Arm Cluster Tools With Reentrant Atomic Layer Deposition 
Processes,Ó IEEE Transactions on Automation Science and 
Engineering, vol. 8, pp. 42-55, 2011. 
[14] N. Q. Wu and M. Zhou, ÒAnalysis of wafer sojourn time in dual-arm 
cluster tools with residency time constraint and activity time variation,Ó 
IEEE Transactions on Semiconductor Manufacturing, vol. 23, pp. 
53-64, 2010. 
[15] N. Q. Wu and M. C. Zhou, ÒAvoiding deadlock and reducing starvation 
and blocking in automated manufacturing systems based on a Petri net 
model,Ó IEEE Transactions on Robotics and Automation, vol. 17, no. 5, 
658-669, 2001. 
[16] N. Q. Wu and M. C. Zhou, ÒModeling, analysis and control of dual-arm 
cluster tools with residency time constraint and activity time variation 
based on Petri nets,Ó IEEE Transactions on Automation Science and 
Engineering, vol. 9, no. 2, 446-454, 2012. 
[17] J. G. Yi, S. W. Ding, D. Z. Song, and M. T. Zhang, ÒSteady-State 
Throughput and Scheduling Analysis of Multi-Cluster Tools for 
Semiconductor Manufacturing: A Decomposition Approach,Ó IEEE 
Trans. on Automation Science and Engineering, vol. 5, pp. 321-336, 
2008. 
[18] M. C. Zhou and K. Venkatesh, Modeling, simulation and control of 
flexible manufacturing systems: Petri net approach, World Scientific, 
Singapore, 1998. 
[19] W. M. Zuberek, ÒTimed Petri nets in modeling and analysis of cluster 
tools,Ó IEEE Transactions on Robotics Automation, vol. 17, no. 5, pp. 
562-575, Oct. 2001. 
[20] S. G. Wang, C. Y. Wang, M. C. Zhou, and Z.W. Li, ÒA method to 
compute strict minimal siphons in S3PR based on loop resource 
subsets,Ó IEEE Trans. Systems, Man, & Cybernetics, Part A, vol. 42, no. 
1, 226Ð237, 2012. 
[21] S. G. Wang, C. Y. Wang, and M. C. Zhou, ÒDesign of Optimal 
Monitor-based Supervisors for a Class of Petri Nets with 
Uncontrollable Transitions,Ó IEEE Trans. Systems, Man, & 
Cybernetics: Systems, vol. 43, no. 5, 1248Ð1255, 2013. 
[22] Y. Qiao, N. Q. Wu, and M. C. Zhou, Real-Time Scheduling of 
Single-Arm Cluster Tools Subject to Residency Time Constraints and 
Bounded Activity Time Variation, IEEE Transactions on Automation 
Science and Engineering, vol. 9, no. 3, 564-577, 2012. 
[23] Y. Qiao, N. Q. Wu, and M. C. Zhou, Petri Net Modeling and Wafer 
Sojourn Time Analysis of Single-Arm Cluster Tools with Residency 
Time Constraint and Activity Time Variation, IEEE Transactions on 
Semiconductor Manufacturing, vol. 25, no. 3, 432-446, 2012. 
[24] Q. Zhu and Y. Qiao, ÒScheduling Single-Arm Multi-Cluster Tools with 
Lower Bound Cycle Time via Petri Nets,Ó Int. Journal of Intelligent 
and Control, 17, pp.  113- 123, 2013. 
 
3284
