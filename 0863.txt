Motion Planning under Uncertainty for On-Road Autonomous Driving
Wenda Xu, Jia Pan, Junqing Wei, and John M. Dolan
Abstract— We present a motion planning framework for
autonomous on-road driving considering both the uncertainty
caused by an autonomous vehicle and other trafﬁc participants.
The future motion of trafﬁc participants is predicted using
a local planner, and the uncertainty along the predicted
trajectory is computed based on Gaussian propagation. For
the autonomous vehicle, the uncertainty from localization and
control is estimated based on a Linear-Quadratic Gaussian
(LQG) framework. Compared with other safety assessment
methods, our framework allows the planner to avoid unsafe
situations more efﬁciently, thanks to the direct uncertainty
information feedback to the planner. We also demonstrate our
planner’s ability to generate safer trajectories compared to
planning only with a LQG framework.
I. INTRODUCTION
Autonomous vehicle technology has made considerable
progress over the past few years [1], [2], [3]. Its main purpose
is to improve driving safety by decreasing trafﬁc accidents,
which are mostly caused by human mistakes or distractions.
However, autonomous vehicle technology also poses new
challenges. One important problem is how to plan a safe
trajectory for a vehicle, given uncertain knowledge about the
surrounding environment and the vehicle’s own state.
Failure to consider such uncertainty may make au-
tonomous vehicles unsafe. For example, if a vehicle uses
a low-accuracy GPS for localization and the planning algo-
rithm does not take that into account, then the vehicle may
follow a dangerous path that may collide with obstacles.
Besides the uncertainty related to the autonomous vehicle
itself, including uncertainty in perception, localization and
control, the autonomous vehicle system also needs to resolve
the uncertainty caused by other trafﬁc participants. For exam-
ple, let us consider the scenario where a (non-autonomous)
vehicle is changing lanes just three meters in front of an
autonomous vehicle. If the planning algorithm can predict the
movement of that merging vehicle, the autonomous vehicle
is more likely to execute a safe and smooth trajectory rather
than performing sudden braking or even crashing into the
merging car. As a result, in order to improve the safety of the
autonomous vehicle system, the vehicle planning algorithm
needs to consider both kinds of uncertainties simultaneously.
This work was supported by NSF Grant CNS1035813
Wenda Xu and Junqing Wei are with the Department of Electrical and
Computer Engineering, Carnegie Mellon University, Pittsburgh, PA 15213,
USA fwendax,junqingwg@cmu.edu
Jia Pan is with with the Department of Electrical Engineering and
Computer Sciences, University of California at Berkeley, Berkeley, CA
94709, USA jia.pan@berkeley.edu
John M. Dolan is with the Department of Electrical and Computer
Engineering and Robotics Institute, Carnegie Mellon University, Pittsburgh,
PA 15213, USA jmd@cs.cmu.edu
In this paper, we propose a planning framework that is
able to consider both the uncertainty caused by autonomous
vehicles and other trafﬁc participants for better driving
safety. We ﬁrst generate candidate trajectories based on a
spatio-temporal lattice [4] and then search for an optimal
trajectory among them. When evaluating the quality of a
trajectory candidate, we consider the uncertainties caused
by both the autonomous vehicle itself and other trafﬁc
participants. For the autonomous vehicle itself, we use a
Linear-Quadratic Gaussian (LQG) framework [5] to estimate
the uncertainty when executing a given candidate trajectory,
given the noise characteristics of the localization and control.
Similar to [5], we incorporate the state measurements in the
future as stochastic variables and the result is a distribution
for the state of each candidate trajectory. For other trafﬁc
participants, we ﬁrst estimate the control inputs they will
choose using a local planner and then predict a distribution
for their future states using a Kalman ﬁlter, where the
estimated control inputs and future observations are used
as inputs. In the search phase, the quality of a candidate
trajectory is evaluated based on a cost function related to
the state distributions of both the candidate trajectory and
other trafﬁc participants. Using this new trajectory quality
evaluation framework, the planning algorithm can provide a
safer trajectory for an autonomous vehicle.
In this work, we assume an autonomous vehicle is moving
in a trafﬁc scene in which all other vehicles are driven by
humans. The autonomous vehicle knows its current state
distribution from its localization system, and other vehicles’
current state, e.g. position and speed, from the perception
system. A static map including all static obstacles is also
generated by the perception system. We also assume that the
controller on the autonomous vehicle is able to follow any
planned trajectory. The objective of this paper is to ﬁnd the
optimal trajectory minimizing the risk from perception and
motion uncertainty.
The rest of the paper is organized as follows. We survey
related work on planning under uncertainty for autonomous
vehicles in Section II. In Sections III and IV, we introduce
the approach to estimate the uncertainty of trafﬁc participants
and the autonomous vehicle, respectively. The planning al-
gorithm for both trafﬁc participants and autonomous vehicle
is presented in Section V. Results and conclusions are given
in Sections VI and VII.
II. RELATED WORK
Planning algorithms have been widely applied to car-like
robots. A lattice planner [6] for an autonomous vehicle has
been used in low-density, low-speed trafﬁc. McNaughton et
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 2507
al. [7] proposed a planner designed for highway driving.
It extends path planning to trajectory planning based on
a spatio-temporal lattice. Xu et al. [4] and Gu et al.[8]
improved the performance of the spatio-temporal lattice
planner by using posterior optimization and focused search,
respectively. These traditional planning methods assume full
knowledge of the perception and deterministic motion.
From the planning perspective, the uncertainty comes not
only from the localization and control of an autonomous
vehicle, but also from the sensing and prediction of obstacles
in the environment. A Partially Observable Markov Decision
Process (POMDP) [9] allows computing the control policy
over the space of the belief state, which is a probability
distribution over all the possible states. However, POMDP
is known to be computationally expensive and scales poorly
when the problem dimension increases. LQG-based motion
planning algorithms [5], [10] estimate the vehicle’s states
based on a Kalman ﬁlter, and capture the uncertainty dur-
ing execution using a Linear-Quadratic Regulator (LQR)
controller, which is then combined with a sampling-based
search algorithm to ﬁnd the optimal trajectory. Compared
to POMDP, LQG-based methods have lower computational
complexity and also scale better with the number of states.
However, these methods exclude the uncertainty due to the
movement of dynamic obstacles.
A veriﬁcation technique was proposed [11] to check safety
for an autonomous vehicle based on the reachable set. The
reachable set represents all the possible states that the vehicle
may visit given a planned trajectory and the initial state. If
the reachable set of an autonomous vehicle has no overlap
with the reachable set of obstacles, the planned trajectory
is marked as safe. In [12], the possible behaviors of trafﬁc
participants are also predicted and the reachable sets of
trafﬁc participants are computed based on a Markov chain.
The limitation of this safety veriﬁcation method is that it
relies on the planned trajectory rather than being embedded
in the planner. If a trajectory exported by the planner is
marked as unsafe by the safety veriﬁcation module, the
planner must perform replanning. Moreover, the planner has
no knowledge of why this trajectory is unsafe, and such
indirect feedback may not help the planner to ﬁnd a safe
trajectory. A point-based Markov Decision Process (QMDP)
framework is presented in [13] to consider all the uncertainty
at the behavior level. It helps the autonomous vehicle to avoid
potentially unsafe situations by making better decisions at the
behavior level. However, this approach cannot be directly
applied to vehicle planning due to its neglect of vehicle
kinematics.
A Monte Carlo sampling-based probabilistic framework
for reasoning about trafﬁc participants’ future motion is
proposed in [14]. Given the initial states of all objects
in the environment, this method simulates all the possible
movements for each object, and outputs a probability density
function for its future states. While the reachability analysis
approach contains more complete future states than the
Monte Carlo based-approach, the latter provides better results
when computing crash probabilities [15]. The Monte Carlo-
based approach is suitable for predicting the movement
of other vehicles, but is not suitable for computing the
uncertainty of the autonomous vehicle itself. This is because
it models the control inputs as stochastic variables, whereas
for autonomous vehicles, the control is known beforehand.
In summary, the contribution of this paper is that we pro-
pose a planner for an autonomous vehicle that can consider
not only the uncertainty from the autonomous vehicle itself,
but also the uncertainty of trafﬁc participants. Our results
are safer than our previous deterministic planner and other
planners that only consider the uncertainty from localization
and control.
III. UNCERTAINTY PREDICTION OF TRAFFIC
PARTICIPANT
A. Vehicle Model
In this paper, we only consider motor vehicles as trafﬁc
participant. The state of a car is denoted as x = [xy], and
the control input is deﬁned as u = [v], where x and y are
the position, is the orientation, is the curvature, andv is
the speed.
Given discretization time step t, the vehicle dynamics
are described by:
x
t
=A
t
x
t 1
+B
t
u
t 1
(1)
A
t
=
2
4
1 0  v
t 1
sin
t 1
t
0 1 v
t 1
cos
t 1
t
0 0 1
3
5
(2)
B
t
=
2
4
cos
t 1
t 0
sin
t 1
t 0
0 v
t 1
t
3
5
(3)
The future trajectories of trafﬁc participants are deter-
mined by their current state and future control input. Suppose
there are N
c
vehicles in the scene, and their control inputs
are denoted as u
i
, i 2 [1;N
c
]. For each car i, given its
initial state x
i
0
, its future trajectory can be computed by
applying control input u
i
t
(t2 [0;T ], where T represents
the prediction time interval) to the vehicle dynamics (1).
The current states of other cars can be measured by the
perception system of the autonomous vehicle. However, the
future control inputs of trafﬁc participants are unknown. In
this paper, we propose a local planner that predicts the future
motion of trafﬁc participants. For each trafﬁc participant,
motion primitives are ﬁrst designed based on typical human
driving behavior, and then they are evaluated using a cost
function. Finally, the optimal motion primitive is chosen as
the best estimation of this trafﬁc participant’s future motion.
The details are presented in Section V-B.
B. Gaussian Propagation
The vehicle dynamic model generally can be written or
linearized as a time-varying linear model, and the state is
generally partially observable. The discrete linear system is
given as:
2508
x
t
=A
t
x
t 1
+B
t
u
t 1
+ w
t
; w
t
N(0;W
t
) (4)
z
t
=C
t
x
t 1
+ v
t
; v
t
N(0;V
t
) (5)
where x
t
is the state vector, u
t
is the control input vector, z
t
is the measurement vector, w
t
is the process noise, and v
t
is
the measurement noise. The original Kalman ﬁlter equations
are given as follows:
The process update is:
^ x
 
t
=A
t
^ x
t 1
+B
t
u
t 1
(6)

 
t
=A
t

t 1
A
T
t
+W
t
(7)
The measurement update is:
L
t
= 
 
t
C
T
t
(C
t

 
t
C
T
t
+V
t
)
 1
(8)
^ x
t
= ^ x
 
t
+L
t
(z
t
 C
t
x
 
t
) (9)

t
= (I L
t
C
t
)
 
t
(10)
whereL
t
is the Kalman gain, ^ x
 
t
is the priori state estimate,
^ x
t
is the posteriori state estimate, 
t
is the posteriori estimate
error covariance.
In our case, the control input u
t
and measurement z
t
are
both unknown at the time of planning. u
t
is predicted as the
best motion primitive based on the cost function, and z
t
is
assumed as a Gaussian distribution. Given initial state x
0
and
control input u
t
, the state vector along the future trajectory
is computed as  x
t
. The ﬁnal estimate of x
t
is :
P (x
t
) =N( x
t
; 
t
) (11)
IV. UNCERTAINTY PROPAGATION FOR THE
AUTONOMOUS VEHICLE
The vehicle dynamic model for the autonomous vehicle
is the same as that of the trafﬁc participants, as deﬁned in
(4) and (5). Unlike the trafﬁc participants, we can directly
control the autonomous vehicle. For this time-varying linear
system, a LQR controller can be designed to track the
planned trajectory. Along the planned trajectory, the state
vector is denoted as  x
t
, the control input vector is denoted
as  u
t
, and the measurement vector is denoted as  z
t
. The
tracking problem can be converted to a regulator problem
by deﬁning:
~ x
t
= x
t
   x
t
(12)
~ u
t
= u
t
   u
t
(13)
~ z
t
= z
t
   z
t
(14)
where ~ x
t
, ~ u
t
, and ~ z
t
represent the deviation between the
planned trajectory and the trajectory during execution.
The tracking system can be formulated as:
~ x
t
=A
t
~ x
t 1
+B
t
~ u
t 1
+ ~ w
t
; ~ w
t
N(0;
~
W
t
) (15)
~ z
t
=C
t
~ x
t 1
+ ~ v
t
; ~ v
t
N(0;
~
V
t
) (16)
Given constant state and input weight matrices Q and R,
a cost function is deﬁned as:
J =
T
X
t=0
 
~ x
T
t
Q~ x
t
+ ~ u
T
t
R~ u
t

(17)
where the time span T is obtained during trajectory genera-
tion (see Section V-A). The optimal control policy minimiz-
ing the cost function is obtained by:
~ u
t
= K
t+1
~ x
t
(18)
where K
t
is computed iteratively backwards based on the
dynamic Riccati equation:
K
t
= (R +B
T
t
P
t
B
t
)
 1
B
T
t
P
t
A
t
(19)
P
t 1
=Q +A
T
t
P
t
A
t
 A
T
t
P
t
B
t
K
t
(20)
P
N
=Q (21)
The Kalman ﬁlter process equations for this trajectory
tracking system are the same as (6) – (10).
~

 
t
is the
covariance after the process update,
~

t
is the posteriori
covariance after the measurement update, and
~
L
t
is the
Kalman gain. According to [5], the ﬁnal distribution for the
state vector is:
P (x
t
) =N( x
t
;
~

t
+ 
t
) (22)
where

t
= (A
t
 B
t
K
t
)
t 1
(A
t
 B
t
K
t
)
T
+
~
L
t
C
t
~

 
t
(23)
V. TRAJECTORY PLANNING
A. Trajectory Generation
In this paper, the trajectory generation approach is adapted
from the previous paper of the authors [4].
Given a reference path, which generally is the center
line of a lane, the road coordinate is introduced as (`;d),
where ` and d are the longitudinal and lateral offset of the
reference path, respectively. A state (`;d) withd = 0 denotes
a point on the reference path. Endpoints are sampled in
both the longitudinal and lateral directions. We sample N
`
layers along the reference path, and N
d
points in each layer
perpendicular to the reference path. The state of a sampled
point (`;d) is deﬁned as:
x(`;d) =x(`; 0) +d cos((`; 0) +

2
) (24)
y(`;d) =y(`; 0) +d sin((`; 0) +

2
) (25)
(`;d) =(`; 0) (26)
(`;d) = ((`; 0)
 1
 d)
 1
(27)
Paths are generated by connecting endpoints in neighbour-
ing layers using cubic curvature polynomials. The curvature
of the path is a cubic polynomial of arc length.
(s) =
0
+
1
s +
2
s
2
+
3
s
3
(28)
The details of solving the parameters for (s) can be
found in [4]. The length of the path is denoted as s
f
. For
2509
each path segment, the speed proﬁle can be generated by
discretizing the speedv
f
and accelerationa
f
at the endpoint.
To reduce the search space, we assumea
f
= 0. The number
of discretized speeds is denoted as N
v
.
The speed proﬁle for each path is deﬁned as a cubic
polynomial of time:
v(t) =
0
+
1
t +
2
t
2
+
3
t
3
(29)
which is different from [4], because speed as a function
of time is easier for a controller to follow than speed as
a function of arc length.
For each trajectory, given the speed v
f
and acceleration
a
f
at the endpoint, the time span T can be obtained:
T =
8
<
:
 
c
b
; if a = 0
 b+
p
b
2
 4ac
2a
; if b
2
  4ac 0
?; if b
2
  4ac< 0
(30)
a = (a
0
 a
f
)/12 (31)
b = (v
0
+v
f
)/2 (32)
c = s
f
(33)
The parameters for (29) are then computed as follows:

0
=v
0
(34)

1
=a
0
(35)

2
=
1
T
2
(3(v
f
 v
0
)  (a
f
+ 2a
0
)T ) (36)

3
=
1
T
3
( 2(v
f
 v
0
) + (a
f
+a
0
)T ) (37)
We obtain state as a function of arc length
[x(s) y(s) (s) (s)] from the path generation method,
and obtain speed as a function of time v(t) from the speed
generation method. The arc length of time s(t) can be
computed by integration of v(t). The state as a function
of time [x(t) y(t) (t) (t)] follows from substituting s(t)
into state as a function of arc length [x(s) y(s) (s) (s)].
B. Prediction for Trafﬁc Participants
As mentioned in Section III-A, trafﬁc participants’ motion
is predicted by a local planner. For trafﬁc participants, we
choose N
`
= 1, which means we only consider one layer
in planning. The reason is that, the longer we predict, the
higher probability the prediction is unreliable. Moreover, it
helps to reduce the computation time.
When we predict the motion for a trafﬁc participant, other
vehicles’ motion also needs to be considered beforeahead,
which leads to a chicken-and-egg problem. In this paper,
we make a simpliﬁed assumption that when we predict
the motion for a trafﬁc participant, all the other vehicles
(including the autonomous vehicle) will keep moving with
current speeds and have no uncertainty on their positions.
We use the optimal trajectory from the local planner as
the prediction of a trafﬁc participant’s future motion. Once
the future trajectory is predicted, the distribution of the state
along this trajectory can be computed using a Kalman ﬁlter,
as described in Section III.
Algorithm 1: Dynamic Programming
1 foreach `
i
;i = 0 to N
`
do
2 foreach d
j
;j = 0 to N
d
do
3 foreach v
k
;k = 0 to N
v
do
4 Form a state s
p
 (`
i
;d
j
;v
k
)
5 foreach d
m
on `
i+1
;m = 0 to N
d
do
6 foreach v
n
;n = 0 to N
v
do
7 Form a state s
q
 (`
i+1
;d
m
;v
n
)
8 Form a trajectory  from s
p
to s
q
9 if c(s
q
)>c(s
p
) +c() then
10 c(s
q
) c(s
p
) +c()
11 Predecessor(s
q
) s
p
12 end
13 end
14 end
15 end
16 end
17 end
C. Planning for Autonomous Vehicle
For the autonomous vehicle, we sample N
`
(N
`
 3)
layers, N
d
vertices in each layer, and N
v
speeds at each
vertex. The computational complexity for a straightforward
exhaustive search isO((N
d
N
v
)
N
`
). Instead of an exhaustive
search, we use dynamic programming (Algorithm 1) to
explore the search space, which reduces the computational
order to O(N
`
(N
d
N
v
)
2
).
In the search process, the state is deﬁned as s = (`;d;v).
The cost of a state c(s) represents the accumulated costs of
the trajectories connecting the starting state with this state.
The cost of a trajectory c() is computed based on the
cost functions deﬁned in Section V-D. During the dynamic
programming, the minimal cost at each state is obtained.
For each trajectory during the search phase, the distri-
bution of the state along the trajectory can be computed
using a LQG framework, as described in Section IV. It
also has to consider the uncertainty from trafﬁc participants.
An algorithm computing collision probability between the
autonomous vehicle and a trafﬁc participant is presented
in Section V-D.3, considering uncertainty from both trafﬁc
participants and the autonomous vehicle.
D. Cost Function
The cost function in this work includes smoothness costs
c
s
, static obstacle costsc
so
, and dynamic obstacle costsc
do
.
c(u) =
T
X
t=0
(c
s
(u
t
) +c
so
(u
t
) +c
do
(u
t
)) (38)
1) Smoothness costs: The smoothness costs c
s
are com-
posed of the sum of acceleration, sum of curvature, distance
to the center of the lane, and difference from the desired
speed (deﬁned by the road speed limit).
2510
2) Static obstacle costs: A static map including all static
obstacles is produced by the perception system of the au-
tonomous vehicle [2]. Generally, a static map is represented
by occupancy grids, which indicate whether a grid is occu-
pied by static obstacles. We compute the Euclidean Distance
Transform (EDT) of the static map, and then we can query
the static obstacle costs from the EDT map.
3) Dynamic obstacle costs: The dynamic obstacles con-
sidered in this paper are only vehicles, whose shapes are
generally rectangles.
From the standpoint of a trafﬁc participant, the position
of every vehicle is deterministic. A collision between two
vehicles is detected using a polygon intersection algorithm.
From the standpoint of the autonomous vehicle, both its
state and other vehicles’ states are stochastic, which are
formalized using normal distributions. For a point robot with
normal distribution, the ellipse deﬁned by the covariance
matrix can provide an upper bound of the probability  that
the robot will collide with deterministic obstacles. In other
words, if the ellipse does not collide with any deterministic
obstacle, the collision probability is at most . However,
in our case, the shape of the robot is a rectangle. We
compute the Minkowski sum of the rectangle and the ellipse,
which is a rounded rectangle. We then choose the minimum
bounding rectangle as a conservative approximation of the
rounded rectangle. In this case, the new rectangle still has
the property that the collision probability is at most  if it
has no overlap with obstacles. Finally, we apply a polygon
intersection algorithm to the minimum bounding rectangles
to detect collisions.
VI. EXPERIMENTAL RESULTS
We ﬁrst test the algorithm in a simulated environment
with two lanes in the same direction. We compare the
results of planning with and without the prediction of trafﬁc
participants. The autonomous vehicle is driving in the left
lane, another car is driving in the right lane, and a third car
is parked by the roadside protruding into the right lane (see
Fig. 1a). The autonomous vehicle and the trafﬁc participant’s
initial state distributions are illustrated as grey ellipses in
Fig. 1a. The dashed rectangle denotes the minimum bounding
rectangle. The upper bound of the probability  is chosen
as 0:25. In Fig. 1b, the trafﬁc participant’s motion is pre-
dicted using the method proposed in this paper.
The result of planning only using the LQG framework and
without prediction of trafﬁc participants is shown in Fig. 1c.
The autonomous vehicle has no prediction for the trafﬁc
participant, and only assumes that the trafﬁc participant will
move at the current speed. Therefore, the autonomous vehicle
will plan to stay in the center of the lane. However, the trafﬁc
participant is likely to shift to the left to avoid the static car.
In this case, the trajectory planned by the autonomous vehicle
will collide with the trafﬁc participant.
The result of a deterministic planner (i.e., the planner
proposed in this paper but without considering uncertainty)
with prediction of trafﬁc participants is shown in Fig. 1d.
There is no collision between vehicle bodies (the blue
(a) Initial state
(b) Prediction of trafﬁc participant
(c) Planning with the LQG framework but without prediction
(d) Planning with prediction but without uncertainty
(e) Planning with uncertainty and prediction
(f) Planning with prediction while the obstacle blocks the right lane
Fig. 1: Comparisons among: (e) the framework proposed in
this paper, (c) planning only with the LQG framework, and
(d) planning without uncertainty.
outlined rectangle and the yellow ﬁlled rectangle), but there
are collisions between the minimum bounding rectangles.
In other words, the trajectory planned by this deterministic
planner is safe only if the perception and control of the
autonomous vehicle are perfect. An alternative approach to
make the deterministic planner safer is adding a constant
buffer around the vehicle. However, compared to our method,
which behaves like an adaptive buffer, a constant buffer may
cause the autonomous vehicle’s behavior to be either too
aggressive or too conservative.
Fig. 1e shows the result of the full algorithm proposed in
this paper. Our algorithm reasons about the most probable
behavior the trafﬁc participant will choose. Therefore, the
autonomous vehicle plans a trajectory to avoid a potentially
unsafe situation in the future. In Fig. 1f, the static car
2511
?
1 .
?
2 .
?
3 .
?
4 .
?
5 .
?
1 .
?
2 .
?
3 . ?
4 . ?
5 .
(a) Reachable set
(b) Planning under Gaussian uncertainty
(c) Planning under larger Gaussian uncertainty
Fig. 2: Comparisons among: (a) reachable set based method,
(b) the framework proposed in this paper, and (c) our method
with larger uncertainty
is completely blocking the right lane. In this case, the
autonomous vehicle forecasts that the trafﬁc participant will
stop behind the static car. Therefore, driving in the center of
the lane will be a safe choice for the autonomous vehicle.
We also compared our method with the reachable set-
based method [16]. As shown in Fig. 2, the autonomous
vehicle (blue) is trying to pass a static car (red) on a two-
lane roadway, while the oncoming trafﬁc is approaching.
In Fig. 2a, the best trajectory for the autonomous vehicle
is ﬁrst planned by a deterministic planner (i.e., the planner
proposed in this paper but without considering uncertainty),
and the reachable set is then computed along the trajectory.
The trajectory is marked as unsafe since the reachable sets of
the autonomous vehicle and the trafﬁc participant have inter-
section at snapshot 4 . In order to ﬁnd a feasible trajectory,
we have to replan a trajectory using the deterministic planner
and evaluate it again, because the reachable set-based method
provides no direct information to the planner. In addition, it
will stop searching once a safe, but not necessary optimal,
trajectory is found.
On the other hand, the planning framework proposed in
this paper directly gives a safe trajectory, as shown in Fig. 2b,
where grey ellipses indicate the magnitude of the uncertainty
of state. However, the reachable set-based method has the
advantage of providing a guarantee (i.e., 100% certainty) that
a collision will not occur, while our Gaussian-based method
gives a likelihood (e.g. 75%) bound that it will not. In Fig. 2c,
we assume the autonomous vehicle receives no measurement
on the trafﬁc participant’s x coordinate of its position. The
autonomous vehicle turns back to the right lane earlier than
its motion in Fig. 2b, since the trafﬁc participant has larger
uncertainty on its x coordinate.
VII. CONCLUSIONS
We have presented a framework of motion planning under
uncertainty for an autonomous vehicle. The uncertainty con-
sidered in this paper comes from localization and control
of an autonomous vehicle, and sensing and prediction of
trafﬁc participants. The planner has shown the ability to
deal with uncertainty from both the autonomous vehicle
itself and trafﬁc participants. It can produce safer trajectories
when compared to our previous deterministic planner and
planners that neglect the uncertainty caused by other trafﬁc
participants.
One possible improvement is to predict trafﬁc participants’
motion in a more stochastic way, e.g. Monte Carlo simula-
tion [14]. In addition, a better prediction may be achieved
based on intention, which is revealed in trajectory history
and present situation. Another possible improvement is to
estimate a more realistic distribution for GPS error than
Gaussian distribution, which will help computing a better
estimation of the localization uncertainty.
REFERENCES
[1] J. Wei, J. M. Dolan, and B. Litkouhi, “A behavioral planning frame-
work for autonomous driving,” in Intelligent Vehicles Symposium (IV),
IEEE, 2014.
[2] J. Wei, J. M. Snider, J. Kim, J. M. Dolan, R. Rajkumar, and B. Litk-
ouhi, “Towards a viable autonomous driving research platform,” in
Intelligent Vehicles Symposium (IV), IEEE, 2013.
[3] J. Levinson, J. Askeland, J. Becker, J. Dolson, D. Held, S. Kammel,
J. Z. Kolter, D. Langer, O. Pink, V . Pratt, et al., “Towards fully
autonomous driving: Systems and algorithms,” in Intelligent Vehicles
Symposium (IV), 2011 IEEE, pp. 163–168, IEEE, 2011.
[4] W. Xu, J. Wei, J. M. Dolan, H. Zhao, and H. Zha, “A real-time motion
planner with trajectory optimization for autonomous vehicles,” in
Robotics and Automation (ICRA), 2012 IEEE International Conference
on, pp. 2061–2067, IEEE, 2012.
[5] A. Bry and N. Roy, “Rapidly-exploring random belief trees for motion
planning under uncertainty,” in Robotics and Automation (ICRA), 2011
IEEE International Conference on, pp. 723–730, IEEE, 2011.
[6] C. Urmson, J. Anhalt, D. Bagnell, C. Baker, R. Bittner, M. Clark,
J. Dolan, D. Duggins, T. Galatali, C. Geyer, et al., “Autonomous
driving in urban environments: Boss and the urban challenge,” Journal
of Field Robotics, vol. 25, no. 8, pp. 425–466, 2008.
[7] M. McNaughton, C. Urmson, J. Dolan, and J. Lee, “Motion planning
for autonomous driving with a conformal spatiotemporal lattice,” in
Robotics and Automation (ICRA), IEEE International Conference on,
vol. 1, pp. 4889–4895, 2011.
[8] T. Gu and J. M. Dolan, “On-road motion planning for autonomous
vehicles,” in International Conference on Intelligent Robotics and
Applications (ICIRA), pp. 588–597, 2012.
[9] S. Thrun, W. Burgard, D. Fox, et al., Probabilistic robotics, vol. 1.
MIT press Cambridge, 2005.
[10] J. Van Den Berg, P. Abbeel, and K. Goldberg, “Lqg-mp: Optimized
path planning for robots with motion uncertainty and imperfect state
information,” The International Journal of Robotics Research, vol. 30,
no. 7, pp. 895–913, 2011.
[11] M. Althoff, O. Stursberg, and M. Buss, “Safety assessment of au-
tonomous cars using veriﬁcation techniques,” in American Control
Conference, 2007. ACC’07, pp. 4154–4159, IEEE, 2007.
[12] M. Althoff, O. Stursberg, and M. Buss, “Model-based probabilistic
collision detection in autonomous driving,” Intelligent Transportation
Systems, IEEE Transactions on, vol. 10, no. 2, pp. 299–310, 2009.
[13] J. Wei, J. M. Dolan, J. M. Snider, and B. Litkouhi, “A point-based mdp
for robust single-lane autonomous driving behavior under uncertain-
ties,” in Robotics and Automation (ICRA), 2011 IEEE International
Conference on, pp. 2586–2592, IEEE, 2011.
[14] A. Broadhurst, S. Baker, and T. Kanade, “Monte carlo road safety
reasoning,” in Intelligent Vehicles Symposium (IV), pp. 319–324, IEEE,
2005.
[15] M. Althoff and A. Mergel, “Comparison of markov chain abstrac-
tion and monte carlo simulation for the safety assessment of au-
tonomous cars,” Intelligent Transportation Systems, IEEE Transactions
on, vol. 12, no. 4, pp. 1237–1247, 2011.
[16] M. Althoff and J. M. Dolan, “Set-based computation of vehicle
behaviors for the online veriﬁcation of autonomous vehicles,” in
Intelligent Transportation Systems (ITSC), 2011 14th International
IEEE Conference on, pp. 1162–1167, IEEE, 2011.
2512
