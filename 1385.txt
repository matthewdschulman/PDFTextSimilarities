Feedback stabilizer-based trajectory planning of mobile robots with
kinematic constraints
Xuebo Zhang, Member, IEEE, Yuan Li and Yongchun Fang, Senior Member, IEEE, Baoquan Li
Abstract—Many theoretic approaches for feedback stabiliza-
tion control of nonholonomic mobile robots cannot be directly
applied to practical robots since various kinematic constraints
such as the velocity and acceleration limits are not considered
in existing methods. To deal with this issue, we aim to propose a
generic approach which ﬁrst uses an (arbitrary) feedback stabi-
lizer to generate the ‘path’ and then rebuilt the corresponding
‘trajectory’ along this ‘path’ to meet various kinematic con-
straints, which ultimately gives a practical satisfactory solution
for local trajectory planning. Speciﬁcally, a general framework
is established to transform feedback stabilizers into a feasible
and highly efﬁcient trajectory planner by using path generation
and optimal velocity planning techniques, considering both
kinematic and differential constraints. Extensive simulation
results are provided to validate the proposed approach.
I. INTRODUCTION
One of the most fundamental problem for nonholonomic
mobile robots (WMR) is the closed-loop stabilization con-
trol due to the well-known Brockette’s necessary condi-
tion, which states that nonholonomic systems cannot be
asymptotically stabilized by any time-invariant continuous
state feedback control law [1]. As a consequence, many
researchers devotes themselves to this challenging problem
and a lot of controllers are proposed in the literature [2]–[8].
Though great theoretical achievements have been made,
careful review of existing literatures and patents reveals
that few stabilization controllers are ultimately applied to
the practice or integrated on the commercial mobile robots.
In contrast, it is interesting that, in the robotics and con-
trol applications community, motion planning and trajectory
tracking control are more focused than stabilization control
especially faced with practical applications [10]–[14]. In this
situation, one may ask: what are the key obstacles in the way
of existing stabilization controllers to real applications?
One reason is that the velocity and acceleration lim-
its cannot be guaranteed to be satisﬁed theoretically for
most existing stabilization controllers. Some of remarkable
achievements in [15]–[17] only considers a part of these
constraints,whichlargelylimititsapplicationfortruemobile
robots to conduct realizable tasks. Another reason is that
stabilization controllers are not appropriate to be utilized in
This work is supported in part by National Natural Science Foundation
of China under Grant 61203333, in part by Specialized Research Fund
for the Doctoral Program of Higher Education of China under Grant
20120031120040, in part by Tianjin Natural Science Foundation under
Grant 13JCQNJC03200, and in part by the Open Project of Chongqing Key
Laboratory of Computational Intelligence under Grant CQ-LCI-2013-03.
X. Zhang, Y. Li, Y. Fang (corresponding author) and B. Li are with the
Institute of Robotics and Automatic Information System(IRAIS) and Tianjin
Key Laboratory of Intelligent Robotics, Nankai University, Tianjin 300071,
China. Email: fzhangxb, yfangg@robot.nankai.edu.cn
the scenario with large pose errors. Since a general idea of
the feedback control is that “greater error, greater control”,
when the control gains are tuned to generate appropriate
control inputs for the case of small pose errors, it is prone
to generate too large control signals to violate kinematic
constraints. Alternatively, if we decrease the control gains
to generate realizable motions in the presence of large pose
errors, the servoing efﬁciency will become lower and lower
as the pose error decreases.
With the aforementioned two reasons in mind, a question
naturally emerges: when facing various state and control
constraints, are the existing luxuriant stabilizers almost use-
less in practice? In this paper, we try to give the answer
“No!” and we aim to propose an approach which ﬁrst uses
an (arbitrary) feedback stabilizer to generate the ‘path’ and
then rebuilt the corresponding ‘trajectory’ along this ‘path’
to meet various kinematic constraints, which ultimately gives
a practical satisfactory solution for local trajectory planning.
One of our essential idea in this paper is to regard the
feedback stabilization system as a “path generator” rather
than a “trajectory generator”. By numerically solving the
closed-loop differential system equations, a discrete trajec-
torycanberepresentedbyatime-relatedsequenceofdiscrete
points in the conﬁguration space. By discarding the time
label, the satisfaction of kinematic constraints can be rebuilt.
Another idea is to convert the implicit discrete path into an
explicit analytical expression. In this way, we can obtain a
more compact representation of the path, which is appropri-
ate for teleoperation or remote control with low-bandwidth
communications with lower-level controllers. Moreover, this
analytical expression facilitates the subsequent replanning
process since the computation of the derivative and curvature
becomes more simple.
By combining the aforementioned two ideas together, we
propose a framework of transforming practical infeasible
feedback stabilization controllers into a feasible and highly
efﬁcient trajectory planner by using path generation and
optimal velocity planning techniques, despite the presence
of both kinematic and differential constraints. Various com-
parative simulation results are conducted to verify the effec-
tiveness of the proposed approach.
The main contribution of this paper is summarized as: 1)
a bridge is built between the feedback stabilization control
and highly efﬁcient local trajectory planning, which extends
the function of existing stabilizers to act as new types of tra-
jectory planners; 2) The established framework is stabilizer-
free,which meansthat thestabilizer canbe chosen arbitrarily
from existing methods.
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 4600
Note that we only consider local trajectory planning prob-
lem in this work, while the upper level motion planning with
obstacles are beyond the scope of this paper.
II. GENERAL FRAMEWORK
A. Basic Framework
Therearethreebasicproceduresinthegeneralframework:
1) Feedback stabilizer-based path generation by numer-
ical solvers. The kinematic/dynamic model of mo-
bile robots, together with the stabilizers, constitutes a
closed-loop system represented by differential equa-
tions, which can be solved using numerical meth-
ods such as the Euler method or Runge-Kutta meth-
ods.Subsequently,appropriatediscretetrajectorypoints
in the conﬁguration space are carefully selected to be
utilizedinthenextproceduretogenerateexplicitpaths.
2) Explicit analytical path derivation. we discard the time
label of the discrete trajectory points to yield a series
of discrete path points. To deal with the possible cusp
points in the trajectorythe discrete path is segmented
into several path segments, and the derivation of the
analytical form of every path segment becomes a con-
strained quadratic programming problem considering
the boundary conditions.
3) Optimal velocity allocation along the analytical path,
wherein the linear and angular velocity/acceleration
limits are guaranteed to be satisﬁed. Therefore, a
practically feasible and efﬁcient trajectory is obtained.
B. Problem statement
In this paper, we consider a unicycle mobile robot:
_ x = vcos? (1)
_ y = vsin? (2)
_
? = w (3)
where the system state is x x x = [x y ?]
T
representing the
robot position x,y ? R and orientation ? ? R, and the
control input is u u u = [v w]
T
with v ?R and w ?R being
the linear and angular velocities of the mobile robot.
To derive a practically feasible trajectory, the velocity and
acceleration should satisfy the following conditions:
?v?≤ v
max
, ?a
v
?≤ a
vmax
(4)
?w?≤ w
max
, ?a
w
?≤ a
wmax
(5)
where a
v
, a
w
?R denotes the linear acceleration and angu-
lar acceleration, respectively.v
max
, a
vmax
, w
max
, a
wmax
?
R represent the corresponding maximum value of the veloc-
ities and accelerations v, a
v
, w, a
w
.
Objective: for a given stabilization controller v(x x x,t) and
w(x x x,t), the objective is to transform this feedback stabilizer,
which is probably infeasible due to velocity and acceleration
constraints, into a practically feasible and high efﬁcient
trajectory planner as described in section II-A.
For simplicity, we chose the reference world coordinate
system to be coincident with the target robot frame. In this
case, the target pose of the mobile robot becomes x x x
g
=
[0, 0, 0]
T
, and thus the stabilization task is to design w(·)
and v(·) to drive the robot from its initial pose to the origin.
III. FEEDBACK STABILIZATION-BASED PATH
GENERATION
Given the kinematic model of mobile robots such as (1)–
(3), many existing feedback stabilizers can be chosen to
drive the mobile robot from its initial pose to the origin.
Without loss of generality, we choose the polar coordinate-
basedstabilizerasatypicalexampleduetoitsnaturaldriving
behavior [9], [20]. We introduce the polar coordinates as
?(x, y) =
√
x
2
+y
2
, (6)
?(x, y, ?) = atan2(y,x)?? +π, (7)
?(x, y) = ?(x, y, ?)+? = atan2(y,x)+π, (8)
where ?, ?, ? ?R are the polar coordinate-related param-
eters. Subsequently, the feedback stabilizer is then designed
as [9], [20]
v(?, ?) = k
1
?cos?, (9)
w(?, ?, ?) = k
2
? +k
1
sin?cos?
?
(? +k
3
?). (10)
with k
1
, k
2
, k
3
?R being constant control gains.
By substituting (6)–(8) into (9) and (10), we know that
the designed linear velocity and angular velocity are both
functions of the system state x, y, ?, namely, they can be
written in a form of
v(x, y, ?) = v
(
?(x, y), ?(x, y, ?)
)
(11)
w(x, y, ?) = w
(
?(x, y), ?(x, y, ?), ?(x, y)
)
(12)
Subsequently, substituting the resultant linear velocity and
angular velocity into the open-loop error dynamics (1)–(3),
we can obtain the closed-loop error dynamics as
_ x = v(x, y, ?)cos?; (13)
_ y = v(x, y, ?)sin?; (14)
_
? = w(x, y, ?). (15)
Additionally, we augment the system with an equation on
the path length s?R as
_ s = v(x, y, ?). (16)
So far, it is seen that the closed-loop system dynamics
can be described by a group of nonlinear differential equa-
tions (13)–(16) with respect to the system state variables.
Hence, given the initial state, these differential equations
can be solved using standard numerical methods such as
Euler method or Runge-Kutta methods. Let the sampling
period be T, then we can numerically obtain the path point
sequences x(kT),y(kT),?(kT) and the corresponding path
length s(kT) at the sampling instants.
To obtain higher precision, it is generally required that
the sampling frequency is sufﬁciently large, which leads to
a small sampling period. In this case, the discrete points
are very dense and the volume of the data might be huge.
Hence, we introduce a point selection mechanism to just
4601
save representative points in the computer memory for the
subsequent analytical path derivation. In this way, not only
the numerical precision is guaranteed, but also the efﬁciency
of the subsequent algorithms are improved and the usage of
the memory is decreased.
Let the initial pose of the robot be x(0) = x
0
, y(0) =
y
0
, ?(0) = ?
0
with x
0
, y
0
, ?
0
?R being arbitrarily known
constants, with the target pose being x(t
f
) = 0, y(t
f
) =
0, ?(t
f
) = 0 (since the reference world coordinate system
is chosen as the target robot frame as stated in section II-B).
The feedback stabilization-based path generation and point
selection algorithm is described in Algorithm 1.
In Algorithm 1, the sign function sgn(·), which is utilized
to ﬁnd the cusp points, is deﬁned as
sgn(?) =
{
1; if ? ≥ 0
?1; if ? < 0
(17)
with ? ?R being an arbitrary variable.
Several key points should be remarked in Algorithm 1:
1) For selection of path points, a threshold ??R, which
denotes the path length between the current point and
the last selected point, is utilized to select path points
in a regular way. Line 7 means that the current pose is
set as the target pose when they are sufﬁciently close.
2) Cusp points are detected for the subsequent path seg-
mentation: the index of cusp points among the selected
points are recorded in ptInd(i) (i = 1, 2, ··· , cnt)
withcnt?Rbeingthetotalnumberofthecusppoints.
These points are detected in Line 14 when the velocity
direction are changed.
3) As for trajectory generation by numerically solving
the forward kinematics, only eight temporary variables
preX, preY, pre, preS, curX, curY, cur?, curS,
rather than all the trajectory points in every sampling
instant, are utilized to decrease the usage of the com-
puter memory and improve the computing efﬁciency.
The output of this module includes a sequence of
selected path points and the corresponding path length
x(i), y(i), s(i) (i = 1, 2, ··· , N) with N being the total
number of the selected points. Additionally, the number of
the cusp points cnt, their index among the selected points
ptInd(i) (i = 1, 2, ··· , cnt), and the corresponding robot
orientation ?
cp
(i) at these cusp points are recorded.
IV. PATH SEGMENTATION AND EXPLICIT PATH
DERIVATION
On the basis of the derived cusp points, we segment the
previous discrete path into several path segments, which will
be approximated using analytical polynomials with respect
to the path length parameter s.
A. Path segmentation
In this subsection, we will introduce a path segmenta-
tion mechanism to segment the discrete path into several
smooth segments that can be approximated by a polyno-
mial for each segment. Let the whole path denoted by
L : x(i), y(i), s(i) (i = 1, 2, ··· , N), which is divided
Algorithm 1 Feedback stabilization-based path generation
Input: An initial pose (x
0
, y
0
, ?
0
), the target pose
(0, 0, 0), a feedback stabilizer v(x, y, ?), w(x, y, ?),
sampling period T, a positive threshold ??R.
Output: Path points x
s
(i), y
s
(i) selected from the numeri-
cally generated trajectory, the corresponding path length
s
s
(i), (i = 1, 2, ··· , N) with N being the number of
the selected points, the number of cusp points cnt and
their index ptInd(i), (i = 1, 2, ··· , cnt) within the
array of the selected points, the robot orientation ?
cp
(i)
at the cusp points.
1: Initialization: k = 0, i = 1, FLAG = 0, N =
1, cnt = 0, preX = x
s
(1) = x
0
, preY = y
s
(1) =
y
0
, pre? = ?
0
, preS = s
s
(1) = 0, preV =
v(preX, preY, pre?), curX = curY = cur? =
curS = curV = 0.
2: Employ the chosen controller v(x, y, ?), w(x, y, ?)
to obtain closed-loop system differential equations (13),
(14), (15), and the path evolution equation (16).
3: repeat
4: set k = k +1
5: On the basis of the robot pose and path length at
time (k ? 1)T, namely, preX, preY, pre?, preS,
Euler or Runge-Kutta methods are utilized to compute
those variables at the time kT from (13)–(16), namely
curX, curY, cur?, curS.
6: Update the current velocity from (11) as curV =
v(curX, curY, cur?) .
7: if curX
2
+curY
2
+cur?
2
≤ ?
2
then
8: N = i+1,FLAG = 1
9: s
s
(N) = curS, x(N) = 0, y(N) = 0
10: else
11: if curS ?s
s
(i)≥ ? then
12: i = i+1
13: s
s
(i) = curS, x(i) = curX, y(i) = curY
14: else {sgn(preV)! = sgn(curV)}
15: cnt = cnt+1, ptInd(cnt) = i+1
16: ?
cp
(cnt) = cur?, i = i+1
17: s
s
(i) = curS, x(i) = curX, y(i) = curY
18: end if
19: end if
20: set preX = curX, preY = curY, pre? =
cur?, preS = curS, preV = curV
21: until FLAG?= 0
into p = (cnt+1) path segments L
k
(k = 1, 2, ··· , p) by
the previously recorded cnt cusp points. The path segmen-
tation process is described in Algorithm 2.
After using the Algorithm 2, the whole path
L : x(i), y(i), s(i) (i = 1, 2, ··· , N) is divided
into p path segments L
k
:
(
x
s
(i), y
s
(i), s
s
(i)
)
(i =
N
k
, N
k
+ 1, ··· , N
k+1
), with N
k
and N
k+1
being the
starting and ending point index within the whole path.
B. Explicit path derivation
For every path segment L
k
:
(
x
s
(i), y
s
(i), s
s
(i)
)
(i =
N
k
, N
k
+ 1, ··· , N
k+1
), we can approximate it with
4602
Algorithm 2 Path segmentation algorithm
Input: The whole path L :
(
x(i), y(i), s(i)
)
(i =
1, 2, ··· , N) and the cusp point index ptInd(i) (i =
1, 2, ··· , cnt).
Output: Starting and ending point index:
N
1
, N
2
, ··· , N
p+1
such that a total of p = (cnt+1)
path segments L
k
:
(
x(i), y(i), s(i)
)
(i =
N
k
, N
k
+ 1, ··· , N
k+1
) are obtained, with
k = 1, 2, ··· , p.
1: Initialization: k = 1, N
1
= 1.
2: repeat
3: N
k
= ptInd(k)
4: set k = k +1
5: until k > p
6: N
p+1
= N.
polynomials to yield an analytical expression.
Since the robot orientations ?
cp
(k) are recorded for com-
mon positions
(
x
s
(N
k+1
), y
s
(N
k+1
), s
s
(N
k+1
)
)
connect-
ing the path segment L
k
and L
k+1
, one novel point in this
subsection is that we propose to formulate these common
robot poses as linear equality constraints that must be sat-
isﬁed. Consequently, the path approximation for every path
segment becomes independent and they can be conducted
simultaneously in a parallel way to increase the whole
efﬁciency of the algorithm.
With the selected points for the path segment L
k
:
(
x
s
(i), y
s
(i), s
s
(i)
)
(i = N
k
, N
k
+1, ··· , N
k+1
),Wecan
parameterize the segment L
k
using polynomials as follows:
x(s) = a
k0
+a
k1
s+a
k2
s
2
···+a
kn
s
n
(18)
y(s) = b
k0
+b
k1
s+b
k2
s
2
···+b
kn
s
n
(19)
where n ?R is a carefully selected polynomial order, with
a
ki
, b
ki
?R (i = 0, 1, ··· , n) being the coefﬁcients to
be determined.
By substituting the path points
(
x
s
(i), y
s
(i), s
s
(i)
)
(i =
N
k
, N
k
+ 1, ··· , N
k+1
) into the (18) and (19), the
following relationship is obtained:
AX =B (20)
with the matrix A ? R
2(N
k+1
 N
k
+1)2(n+1)
and vectors
X, B ?R
2(N
k+1
 N
k
+1)
being
A =
[
Q 0
0 Q
]
(21)
X = [X
T
1
X
T
2
]
T
(22)
B = [B
T
1
B
T
2
]
T
(23)
where the matrix Q?R
(N
k+1
 N
k
+1)(n+1)
and the vectors
X
1
, X
2
, B
1
, B
2
? R
N
k+1
 N
k
+1
are of the following
forms:
Q =
?
?
?
?
1 s(N
k
) s
2
(N
k
) ... s
n
(N
k
)
1 s(N
k
+1) s
2
(N
k
+1) ... s
n
(N
k
+1)
... ... ... ... ...
1 s(N
k+1
) s
2
(N
k+1
) ... s
n
(N
k+1
)
?
?
?
?
(24)
X
1
=
[
a
k0
a
k1
a
k2
··· a
kn
]
T
, (25)
X
2
=
[
b
k0
b
k1
b
k2
··· b
kn
]
T
, (26)
B
1
=
[
x(N
k
) x(N
k
+1) ··· x(N
k+1
)
]
T
, (27)
B
2
=
[
y(N
k
) y(N
k
+1) ··· y(N
k+1
)
]
T
. (28)
To determine the coefﬁcients of the polynomialsX, it is
generally to minimize the following cost function
min?AX ?B?
2
= min(AX ?B)
T
(AX ?B) (29)
Furthermore, to guarantee the motion feasibility and the
smooth connection of successive path segments, the initial
robot pose and the ﬁnal one for each path segment L
k
are
formulatedasequalityconstraints.Speciﬁcally,theinitialand
ﬁnal position constraints are described as
?
?
?
?
C
T
1
0
0 C
T
1
C
T
2
0
0 C
T
2
?
?
?
?
X =
?
?
?
?
x(N
k
)
y(N
k
)
x(N
k+1
)
y(N
k+1
)
?
?
?
?
(30)
with vectorsC
1
, C
2
?R
n+1
being
C
1
=
[
1 s(N
k
) s
2
(N
k
) ··· s
n
(N
k
)
]
T
(31)
C
2
=
[
1 s(N
k+1
) s
2
(N
k+1
) ··· s
n
(N
k+1
)
]
T
(32)
To depict the equality constraints for the initial robot orien-
tation, we have
∂x(s)
∂s
|
s=s(N
k
)
sin?
cp
(k)?
∂y(s)
∂s
|
s=s(N
k
)
cos?
cp
(k) = 0
(33)
It follows from the polynomial expressions (18) and (19) that
@x(s)
@s
|
s=s(N
k
)
and
@y(s)
@s
|
s=s(N
k
)
can be written in a linear
form with respect to the coefﬁcientsX
1
andX
2
as
∂x(s)
∂s
|
s=s(N
k
)
=
[
C
T
d1
0
]
X
∂y(s)
∂s
|
s=s(N
k
)
=
[
0 C
T
d1
]
X.
withC
d1
?R
n+1
being
C
d1
=
[
0 1 2s(N
k
) ··· ns
n 1
(N
k
)
]
T
(34)
Therefore, the initial orientation constraint (33) can be writ-
ten in a linear form with respect toX as
[
sin?
cp
(k)C
T
d1
?cos?
cp
(k)C
T
d1
]
X = 0 (35)
In a similarly way, we can obtain the linear equality con-
straint for the ﬁnal orientation of the path segment L
k
as:
[
sin?
cp
(k +1)C
T
d2
?cos?
cp
(k +1)C
T
d2
]
X = 0 (36)
withC
d2
?R
n+1
being
C
d2
=
[
0 1 2s(N
k+1
) ··· ns
n 1
(N
k+1
)
]
T
(37)
To summarize, the objective function (29), together with the
linear equality constraints for the initial/ﬁnal position (30)
and orientation (35), (36), constitute a constrained linear
4603
least-square problem for approximation of the path segment
L
k
as
min(AX ?B)
T
(AX ?B) (38)
subject to
?
?
?
?
C
T
1
0
0 C
T
1
C
T
2
0
0 C
T
2
?
?
?
?
X =
?
?
?
?
x(N
k
)
y(N
k
)
x(N
k+1
)
y(N
k+1
)
?
?
?
?
(39)
[
sin?
cp
(k)C
T
d1
?cos?
cp
(k)C
T
d1
]
X = 0 (40)
[
sin?
cp
(k +1)C
T
d2
?cos?
cp
(k +1)C
T
d2
]
X = 0 (41)
For this constrained linear least-square problem, standard
equality constrained quadratic programming can be utilized
to obtain the optimal solution of the polynomial coefﬁcients
X by transforming the original objective function into an
equivalent standard quadratic form as
min
(
X
T
A
T
AX ?2B
T
AX
)
(42)
with the equality constraints (39), (40) and (41).
V. OPTIMAL VELOCITY PLANNING ALONG THE
PRE-COMPUTED EXPLICIT PATH
Along the computed explicit analytical paths, many
velocity scheduling algorithms, usually termed as “path-
constrained trajectory planning”, have been reported in the
literature [18], [19]. Note that for the unicycle mobile robots,
the time-optimal solution under kinematic constraints has
already been obtained by Miˇ sel Brezak and Ivan Petrovi´ c
in [18], which is directly applied in our framework.
VI. SIMULATION RESULTS
To verify the effectiveness of the proposed approach, we
present some comparative simulation results.
In the simulation, the feedback stabilizer is chosen as the
polar coordinate-based one as described in section III, the
control gains are selected as k
1
= 3.1, k
2
= 6.9, k
3
= 1.1,
while the velocity and acceleration limits are set as v
max
=
1 m/s, w
max
= 1 rad/s, a
vmax
= 0.5 m/s
2
, a
wmax
=
1 rad/s
2
. Since the robot should stop at the cusp points
leading to possible low efﬁciency, thus we utilize the path
generated from the initial pose symmetric to the origin if the
symmetric path presents no cusp points.
A. Polynomial order selection & ﬁtting precision
Though the ﬁtting precision has no impact on the feasibil-
ity of the ﬁtting path due to the linear equality constraints,
it is generally preferred to achieve relative good precision,
which can depict the original feedback stabilizer-based path
behavior in a better way. In general, higher order polynomial
canachievehigherﬁttingprecisionofthediscretepathgener-
ated by the feedback-stabilizer, however, it is undesirable to
useaveryhighorderforthesakeofsimplicityandnumerical
stability. To chose a proper order of the polynomial, we can
use the residual to evaluate the ﬁtting precision. Hence, we
5 6 7 8 9 10 11
0
0.02
0.04
0.06
0.08
0.1
0.12
0.14
polynomial order
residual
 
 
initial pose(?1,?1,pi/2)
initial pose(0,?1,pi/2)
initial pose(1,?1,?pi/2)
initial pose(0,?1,?pi/2)
initial pose(?1,?1,pi/4)
initial pose(0,?1,pi/4)
initial pose(1,?1,?pi/4)
initial pose(0,?1,?pi/4)
initial pose(?1,?1,0)
initial pose(1,?1,0)
Fig. 1. Fitting precision with respect to polynomial order
?1.5 ?1 ?0.5 0 0.5 1 1.5
?1.5
?1
?0.5
0
0.5
1
1.5
x (m)
y (m)
 
 
fitted polynomial paths
paths by the stabilizer
Fig. 2. The feedback stabilizer-based path (solid lines) and the ﬁtted path
using polynomials (dotted lines) with different initial conﬁgurations
choose a lot of different initial poses, and then we compute
the residuals for different orders of polynomials to ﬁnd a
tradeoff. In Fig. 1, we display the results for 10 initial poses,
and it is shown that after an order of 10, the decreasing of the
residual becomes not evident. Therefore, we choose the used
polynomial order be 10. In this case, the ﬁtting results for
different initial conﬁgurations are shown in Figure 2, from
which we can see that the ﬁtting precision is high and thus
the analytical 10-order polynomials are acceptable for path
representation.
B. Comparative simulation results
1) Comparison between the original feedback stabilizer
and the proposed approach: Figure 3 and Figure 4 dis-
play the practical velocity limit curves (dashed lines) com-
puted based on the linear/angular velocity/acceleration con-
straints, the velocity by the original feedback stabilizer
(dotted-dashed lines) and the velocity by the proposed
approach (solid lines). The initial pose is selected as
(1 m,?1 m,π/2 rad) in this example. It is evident that the
original feedback stabilizer lead to too large velocity controls
to be realizable since it is greater than the allowable com-
puted velocity limits, while the proposed approach generates
realizablevelocitysignalsthatareveryclosetothecomputed
velocity curve to simultaneously achieve high efﬁciency.
2) Comparison between a classical path planning ap-
proach and the proposed approach: a classical local path
4604
0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6
0
0.5
1
1.5
2
2.5
3
3.5
4
s(m)
v (m/s)
 
 
velocity limit
our method
feedback stabilizer
Fig. 3. Comparative results for linear velocity
0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6
?2
0
2
4
6
8
10
12
14
s(m)
w (rad/s)
 
 
velocity limit
our method
feedback stabilizer
Fig. 4. Comparative results for angular velocity
TABLE I
COMPARISON OF THE ARRIVAL TIME
Initial poses
(m, m, rad)
proposed approach
(sec)
3-order polynomial
(sec)
(1, 0, =2) 8.63 6.68
(1, 1, =2) 3.31 9.92
(0, 1, =2) 4.03 6.67
(-1, 1, =2) 6.09 6.71
(1, 0, 0) 2.71 3.25
(1, 1, 0) 4.03 6.77
(0, 1, 0) 6.03 6.64
(-1, 1, 0) 4.01 6.55
planning method for mobile robot is to use the three-order
interpolation polynomial as stated in section 11.5.3 of the
book [9], and the path parameters are set as k
i
= k
f
= 1.5.
For an equal comparison, the subsequent path-constrained
trajectory planning for both approaches are conducted with
the same velocity planning method as stated in [18]. Table I
presents the comparison results for the arrival time, and it is
seen that the proposed approach is generally more efﬁcient
than the traditional one in most cases.
VII. CONCLUSION
This paper propose a general approach to transform feed-
back stabilizers into feasible and highly efﬁcient trajec-
tory planners by using numerical path generation, quadratic
programming-based polynomial ﬁtting and optimal velocity
planningtechniques.Byusingtheproposedmethod,practical
velocity/acceleration constraints can be taken into account to
yield feasible trajectories. Extensive simulation results verify
the effectiveness of the presented method.
REFERENCES
[1] R. W. Brockett, “Asymptotic stability and feedback stabilization,” in
Differential Geometric Control Theory, R. W. Brockett, R. S. Millman,
and H. J. Sussmann, Eds. Boston: Birkhauser, 1983, pp. 181-191.
[2] A. De Luca, G. Oriolo, C. Samson, “Feedback control of a nonholo-
nomic car-like robot,” in Robot Motion Planning and Control, J.-P.
Laumond, Ed., LNCIS, vol. 229, pp. 171-253, Springer, 1998
[3] G. Oriolo, A. De Luca, M. Vendittelli, “WMR control via dynamic
feedback linearization: Design, implementation and experimental val-
idation,” IEEE Trans. on Control Systems Technology, vol. 10, no. 6,
pp. 835-852, 2002
[4] A. Astolﬁ, “Discontinuous control of nonholonomic systems,” Systems
& Control Letters, vol. 27, no. 1, pp. 37-45, 1996.
[5] Y. P. Tian, S. Li, “Exponential stabilization of nonholonomic dynamic
systems by smooth time-varying control,” Automatica, vol. 38, no. 7,
pp. 1139-1146, 2002.
[6] Z. P. Jiang, “Iterative design of time varying stabilizers for multi-input
systems in chained form,” Systems & Control Letters, vol. 28, no. 5,
pp. 255-262, 1996.
[7] X. Zhang, Y. Fang, Y. Zhang. “Discrete-time control of chained non-
holonomic systems,” IET Control Theory and Applications, vol. 5, no.
4, pp. 640-646, 2011.
[8] X. Zhang, Y. Fang, X. Liu, “Motion-estimation-based visual servoing
of nonholonomic mobile robots,” IEEE Trans. on Robotics, vol. 27,
no. 6, pp. 1167-1175, 2011.
[9] B. Siciliano, L. Sciavicco, L. Villani, G. Oriolo, Robotics: Modelling,
Planning and Control, Springer, 2009.
[10] P. Ogren, and N. Leonard, “A convergent dynamic window approach
to obstacle avoidance,” IEEE Trans. on Robotics, vol. 21, no. 2, pp.
188-195, 2005.
[11] M. Seder, I. Petrovic, “Dynamic Window Based Approach to Mobile
robot Motion Control in the Presence of Moving Obstacles,” Proc. of
IEEE International Conference on Mobile robotics and Automation,
pp. 1986-1992, April 2007.
[12] K. Goto, K. Kon, F. Matsuno, “Motion Planning of an Autonomous
Mobile Robot Considering Regions with Velocity Constraint,” Proc.
IEEE/RSJ International Conference on Intelligent Robots and Systems,
Taipei, pp. 3269-3274, 2010.
[13] D. Kiss, G. Tevesz, “A receding horizon control approach to obstacle
avoidance,” IEEE International Symposium on Applied Computational
Intelligence and Informatics, pp. 397-402, 2011.
[14] N. Faiz, S. Agrawal, R. Murray. “Trajectory planning of differentially
ﬂat systems with dynamics and inequalities,” AIAA Journal of Guid-
ance, Control and Dynamics, 2001, 24(2): 219-227.
[15] J.Huang,C.Wen,W.WangandZ.P.Jiang,“Adaptivestabilizationand
tracking control of a nonholonomic mobile robot with input saturation
and disturbance,” Systems & Control Letters, vol. 62, no. 3, pp. 234-
241, 2013.
[16] Z. P. Jiang, E. Lefeber and H. Nijmeijer,“Saturated stabilization and
tracking of a nonholonomic mobile robot,” System & Control Letters,
vol.42, no.5, pp.327-332, 2001.
[17] V. Sankaranarayanan, A. D. Mahindrakar, “Conﬁguration constrained
stabilization of a wheeled mobile robot-theory and experiment,” IEEE
Trans. Control System Technology, vol. 21, no. 1, pp. 275-280, 2013.
[18] M. Brezak and I. Petrovi´ c, “Time-optimal trajectory planning along
predeﬁned path for mobile robots with velocity and acceleration con-
straints,” Proc. of IEEE/ASME International Conference on Advanced
Intelligent Mechatronics, Hungary, 2011, pp. 942-947.
[19] S. M. LaValle, Planning Algorithms. Cambridge, U.K.: Cambridge
University Press, 2006, also available at http://planning.cs.uiuc.edu/
[20] M. Aicardi, G. Casalino, A. Bicchi, A. Balestrino. “Closed loop
steering of unicycle like vehicles via lyapunov techniques,” IEEE
Robotics and Automation Magazine, vol. 2, no. 1, 1995, pp. 27-35.
[21] X. Zhang, Y. Fang, N. Sun, “Visual servoing of mobile robots for
posture stabilization: from theory to experiments,” Int. J. Robust
Nonlinear Control, 2013, online, doi: 10.1002/rnc.3067.
4605
