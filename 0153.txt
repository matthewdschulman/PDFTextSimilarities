MARRT: Medial Axis Biased Rapidly-Exploring Random Trees
Jory Denny, Evan Greco, Shawna Thomas, and Nancy M. Amato
Abstract— Motion planning is a difﬁcult and widely studied
problem in robotics. Current research aims not only to ﬁnd
feasible paths, but to ensure paths have certain properties,
e.g., shortest or safest paths. This is difﬁcult for current state-
of-the-art sampling-based techniques as they typically focus
on simply ﬁnding any path. Despite this difﬁculty, sampling-
based techniques have shown great success in planning for a
wide range of applications. Among such planners, Rapidly-
Exploring Random Trees (RRTs) search the planning space
by biasing exploration toward unexplored regions. This paper
introduces a novel RRT variant, Medial Axis RRT (MARRT),
which biases tree exploration to the medial axis of free space
by pushing all conﬁgurations from expansion steps towards
the medial axis. We prove that this biasing increases the tree’s
clearance from obstacles. Improving obstacle clearance is useful
where path safety is important, e.g., path planning for robots
performing tasks in close proximity to the elderly. Finally,
we experimentally analyze MARRT, emphasizing its ability
to effectively map difﬁcult passages while increasing obstacle
clearance, and compare it to contemporary RRT techniques.
I. INTRODUCTION
Planning the path of a robot through complex environ-
ments is notoriously difﬁcult. Despite the difﬁculty, many
applications require solving motion planning tasks such
as robotics, virtual reality [11], bioinformatics [18], and
computer-aided design [1], among others.
Motion planning algorithms ﬁnd a sequence of valid (e.g.,
collision-free) states that take a movable object from some
initial position to some ﬁnal position. However, determinis-
tically ﬁnding a path is thought to be intractable [15].
Sampling-based motion planning has proven to be a great
success in overcoming this complexity [6], [9]. One such
method, Rapidly-exploring Random Trees (RRTs) [9], starts
at some state q
root
and incrementally expands, ﬁlling the
planning space. RRTs are useful for single-query scenarios
and non-holonomic systems. There are several RRT variants
aimed at enhancing various properties of the algorithm, such
as improving the speed of single-query planning [7] or
planning in narrow passages [16], [21]. To our knowledge,
there has been little prior work on tailoring RRT growth
to produce paths that attempt to maximize clearance, the
This research supported in part by NSF awards CNS-0551685, CCF-
0833199, CCF-0830753, IIS-0916053, IIS-0917266, EFRI-1240483, RI-
1217991, by NIH NCI R25 CA090301-11, by Chevron, IBM, Intel, Ora-
cle/Sun and by Award KUS-C1-016-04, made by King Abdullah University
of Science and Technology (KAUST). J. Denny supported in part by an
NSF Graduate Research Fellowship.
Jory Denny, Shawna Thomas, and Nancy M. Amato are with the
Parasol Lab, Department of Computer Science and Engineering, Texas
A&M University, College Station, TX, USA, {jdenny, sthomas,
amato}@cse.tamu.edu.
E. Greco contributed to this work as an undergraduate at Texas A&M
University. He is currently employed by National Instruments.
distance from obstacles. Thus, current RRT approaches are
not suited for applications where path clearance is important,
such as planning in close proximity to the elderly or in
industrial settings.
However, one such graph-based approach, Medial Axis
PRM (MAPRM) [3], [12], [20], is able to create roadmaps
with nodes that have high obstacle clearance. Graph-based
planners, e.g., Probabilistic RoadMaps (PRMs) [6], randomly
sample all of the planning space and connect neighboring
samples to create a graph representing the connectivity of the
planning space. MAPRM differs from PRM in that the nodes
of the graph are pushed to the medial axis. MAPRM has the
additional beneﬁt of efﬁciently mapping narrow passages.
In this paper, we present a novel RRT variant, Medial
Axis RRT(MARRT), that grows a tree on the medial axis
of the free space. Like RRT, MARRT begins by iteratively
extending the tree towards a randomly sampled conﬁgura-
tion. However, MARRT differs from RRT by pushing each
extension of the tree to the medial axis of the free space. In
low dimensions, samples can be transformed to the medial
axis at a low cost using an exact clearance calculation to
nearby obstacles. The speciﬁc contributions of the paper are
as follows:
• Introduction of a novel method, MARRT, that grows an
RRT ?-close to the medial axis of the free space.
• Prove ?-closeness of the tree to the medial axis
and probabilistic completeness under mild assumptions
about the planning space, clearance computations, and
algorithmic inputs.
• A detailed experimental evaluation in 2D and 3D envi-
ronments including a demonstration that MARRT yields
greater tree and path clearance with minimal com-
putation time overhead compared with other common
RRT-based planners such as RRT [9], RRT
?
[5], and
OBRRT [16].
We note that the goal of MARRT is not necessarily to
provide the most efﬁcient planning algorithm but to establish
the feasibility of growing an RRT along the medial axis,
thereby creating paths with high obstacle clearance.
II. PRELIMINARIES AND RELATED WORK
In this section, we present some basics of motion planning,
review previous algorithms for single-query motion planning,
and survey sampling-based planning on the medial axis of
the free space.
Motion planning preliminaries. A robot is a movable
object whose position and orientation can be described by n
parameters, or degrees of freedom (DOFs), each correspond-
ing to an axis of movement (e.g., positions, orientations, joint
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
U.S. Government work not protected by
U.S. copyright
90
angles, etc.). Hence, a robot’s placement, or conﬁguration,
can be described by a unique pointq =hx
1
,x
2
,...,x
n
i in an
n-dimensional space (where x
i
is the ith DOF). This space,
consisting of all possible robot conﬁgurations (feasible or
not), is called conﬁguration space (C
space
) [13]. The subset
of all feasible conﬁgurations is the free space (C
free
), while
the union of the infeasible conﬁgurations is the obstacle
space (C
obst
). Thus, the motion planning problem becomes
that of ﬁnding a continuous trajectory inC
free
from a given
start conﬁguration q
s
to a goal conﬁguration q
g
.
In general, it is intractable to compute explicit C
obst
boundaries [15], but we can often determine whether a
conﬁguration is valid or invalid quite efﬁciently, e.g., by
performing a collision detection (CD) test in the workspace,
the robot’s natural space. The clearance, or obstacle clear-
ance, of a conﬁguration is its distance to the closest point on
the boundary ofC
obst
. In low dimensions, clearance can be
computed exactly with CD tests [8]. Because of the cost of
explicitly computingC
obst
boundaries, research has turned
to sampling-based techniques [6], [9] to efﬁciently explore
C
free
for valid paths.
A. Rapidly-Exploring Random Trees (RRTs)
Rapidly-exploring Random Trees (RRTs) [9] are a
sampling-based approach to solving single-query motion
planning problems. They iteratively grow a tree outwards
from a root conﬁgurationq
root
. RRTs have been quite useful
for a broad range of robotic systems including dynamic en-
vironments, kinodynamic robots, and non-holonomic robots.
In each expansion attempt, a random conﬁguration q
rand
is
chosen, and the nearest conﬁguration within the tree q
near
is extended towards q
rand
up to or at a ﬁxed step size ?q.
From this extension, a new conﬁguration q
new
is computed
and added to the tree if and only if there is a valid path
from q
near
to q
new
. RRTs are probabilistically complete and
have an exponential convergence to the sampling distribution
overC
space
because of V oronoi bias, i.e., RRTs exploreC
free
efﬁciently. Despite these important properties, RRTs suffer
in the presence of narrow passages or very complex planning
systems. In this section, we highlight a few of the RRT
variants most relevant to this research.
In an effort to solve single query problems faster, RRT-
Connect [7] constructs two trees, one rooted at a start
conﬁguration q
s
and one rooted at a goal conﬁguration q
g
.
Each tree grows towards the other using a greedy heuristic.
Once the two trees meet, a path can be extracted between q
s
and q
g
using a simple path ﬁnding algorithm in the tree.
An important contribution of this work was showing the
beneﬁt of allowing RRTs to grow with variable step sizes
in their greedy heuristic. More speciﬁcally, a tree expansion
is sometimes allowed to extend until either an obstacle, a
maximum expansion distance, or q
rand
is reached.
V olume-based sampling with RRTs [17] is an approach
which utilizes clearance information of nodes in the tree. The
clearance of a node deﬁnes a hypersphere inC
free
which
is entirely visible to the node. In this way, volume-based
sampling deﬁnes an RRT with each node as a hypersphere
and deﬁnes an efﬁcient exploration technique biasing tree
growth away from already covered volumes ofC
free
. How-
ever, this is an efﬁciency improvement for RRT growth and
provides no clearance guarantees on the paths created or tree
constructed.
Obstacle-based RRT (OBRRT) [16] exploits obstacle in-
formation in biasing the growth of the tree to more effectively
plan in narrow passages. OBRRT introduces nine growth
variations based upon random vectors, random obstacle
vectors, tangent obstacle vectors, and even a medial axis bi-
ased growth. OBRRT incrementally chooses growth methods
based on user-provided probabilities. However, this method
does not aim to increase clearance.
Retraction-based RRT [21] uses information gained via
obstacle contact analysis and optimization to retract RRT
growth along the boundary ofC
obst
to improve RRT perfor-
mance in narrow passages. It was later extended to handle ar-
ticulated models [14]. Selective Retraction-based RRT (SR-
RRT) [10] uses simple tests to focus the retractions to narrow
passages and avoid expensive growth in open areas ofC
free
.
T-RRT [4] is a method for growing trees along a cost-map
overC
space
. In this approach, a cost-map is deﬁned over the
space, and optimization techniques are used to explore this
space. However, there needs to be a deﬁnition of a threshold
allowed for transition costs, and this can be difﬁcult to tune.
This method does not guarantee any growth along the medial
axis of the space and does not optimize the cost of the path.
However, T-RRT has been adopted for obstacle clearance in
the work space and performs well in practice.
RRT
?
[5] is an approach to ensure asymptotic optimality
of tree growth. For example, ensuring the tree asymptotically
ﬁnds the shortest path is possible and has been shown to be
quite effective with this approach. The method can optimize
other cost functions, but these have not been well explored
and in general must be additive cost metrics. RRT
?
expands
in the same way as RRT except after expansion the tree
will locally “rewire” itself to ensure optimization of the cost
function.
B. Sampling-based Planning on the Medial Axis
The medial axis of a polytope is the set of all points
equidistant to two or more obstacle boundaries. For an n-
dimensional space, the medial axis is an n?1-dimensional
manifold which represents the connectivity of the space;
the medial axis is deﬁned from some distance metric, e.g.,
Euclidean. There have been several motion planning tech-
niques proposed that utilize the medial axis as points on
it have maximal clearance and can be used to form ‘safe’
paths. A method that constructs a medial axis ‘skeleton’
of workspace biases PRM sampling to increase clearance
of roadmaps [3]. Medial Axis PRM (MAPRM) [12], [20]
constructs a roadmap with all nodes on or near the medial
axis ofC
free
. Figure 1 shows an example of a MAPRM
roadmap for a 2D point robot. The strength of MAPRM is
that it retracts all sampled nodes (valid or not) to the medial
axis ofC
free
without explicitly computing the medial axis
structure. By retracting all sampled nodes, the probability
91
Fig. 1. Resulting MAPRM roadmap for a 2D point robot. Nodes in the
roadmap have high clearance and navigate the narrow passage.
of sampling a narrow passage is not only dependent on its
volume but also on the volume of the obstacles surrounding
it. Thus, in most cases, MAPRM more efﬁciently maps
narrow passages compared to uniform random sampling [20].
MAPRM’s main operation, PushToMedialAxis(q,?), re-
tracts a conﬁguration q to within an ? distance of the medial
axis ofC
free
, where ? > 0 is arbitrarily close to 0. If q is
initially invalid, the function retracts q to its nearestC
obst
boundary point. Once inC
free
, the function computes the
nearestC
obst
boundary point to q, called a witness conﬁgu-
ration w (e.g., by using an exact computation of clearance
in the workspace). The function pushes q away from w,
which is in a direction perpendicular to theC
obst
boundary,
until w changes. Once w changes, it performs a binary
search between the current and previous conﬁgurations to
locally maximize clearance on the ray
? ?
wq and ensure ?-
closeness to the medial axis. We review a proof of this in
Section III. Unfortunately, the edges in the roadmaps created
by MAPRM are not ?-close to the medial axis.
The expense of MAPRM is dominated by this retraction
function, especially in higher dimensions. For this reason,
approximate penetration and clearance computations can
be used in higher dimension to push conﬁgurations to an
approximation of the medial axis [12].
In [2], a path modiﬁcation technique is introduced to push
a path the medial axis of theC
free
. In low dimensions, it
uses techniques similar to MAPRM to yield a path along
the medial axis, and in high dimensions, uses optimization
techniques to perturb a path towards the medial axis. This
can be an expensive operation and can be used in conjunction
with techniques shown here. It is irrespective of the planner
used to create the path.
III. MEDIAL AXIS RRT
In this section, we describe Medial Axis RRT (MARRT),
a novel variant of the standard RRT algorithm that grows
a tree on the medial axis ofC
free
. Inspired by MAPRM,
it uses medial axis retractions to generate RRT-style growth
near the medial axis without having to explicitly compute its
structure.
A. Algorithm
MARRT is presented in Algorithm 1. Like RRT, it begins
with a starting conﬁguration q
root
and iteratively grows the
tree outward toward unexplored regions ofC
free
. In each
iteration, it randomly samples a conﬁgurationq
rand
?C
space
and identiﬁes the nearest sample q
near
in the tree based on
some distance metric ? (e.g., Euclidean distance). MARRT
differs from RRT in that instead of growing from q
near
directly toward q
rand
, it constrains the growth near the
medial axis, see line 5 of Algorithm 1. This medial axis
growth is recorded as a polygonal chain I of intermediate
conﬁgurations located ?-close to the medial axis. Any inter-
mediate conﬁgurations, along with their connections in the
polygonal chain, will be added to the tree as nodes, and
edges, respectively in Update().
Algorithm 1 Medial Axis RRT
Input: The number of expansion attempts n, a root conﬁg-
uration q
root
, a maximum expansion length l, step size
?q, and a tolerance ?.
Output: A tree T
1: T.AddNode(PushToMedialAxis(q
root
,?))
2: for 1...n do
3: q
rand
? RandomCfg()
4: q
near
? NearestNeighbor(T,q
rand
)
5: I? MARRTExpand(q
near
,q
rand
,?q,?,l)
6: Update(T,q
near
,I)
7: return T
The key difference between RRT and MARRT is the
expansion step. Algorithm 2 expands along the medial axis
until a maximum expansion length l is reached, expansion
fails to make progress, or a connection between successive
nodes is blocked by an obstacle (checked by a visibility test
Visible()). A conﬁguration q
prev
is ﬁrst initialized with
q
near
and I, the polygonal chain of intermediate nodes on
the medial axis, is initialized to?. During each iteration,
q
prev
is added to I, q
new
is extended from q
prev
toward
q
rand
at a step size ?q, and q
new
is pushed to the medial
axis. At this point visibility between q
prev
and q
new
and the
terminating conditions are tested.
Algorithm 2 MARRT Expand - expandsq
near
towardsq
rand
along the medial axis
Input: Conﬁgurations q
near
and q
rand
, a step-size ?q, a
tolerance ?, and a maximum expansion length l
Output: Intermediate Conﬁgurations I
1: Polygonal Chain I??
2: Conﬁgurations q
prev
? q
near
,q
new
3: repeat
4: q
prev
? q
new
5: I? I?{q
prev
}
6: q
new
? Extend(q
prev
,q
rand
,?q)
7: PushToMedialAxis(q
new
,?)
8: dist? ?(q
prev
,q
new
)+
P
qi,qi+1?I
?(q
i
,q
i+1
)
9: until q
prev
? q
new
?¬Visible(q
prev
,q
new
)? dist > l
10: return I
Figure 2 shows an example of medial axis expansion for
a 2D point robot. MA(C
free
) is indicated by the dashed
92
(a) (b) (c) (d)
Fig. 2. Example of MARRT expansion for a 2D point robot. (a) MA(C
free
) is shown by the dashed line. The closest node qnear in the tree (shown
in blue) to the random sample q
rand
is selected for expansion. (b) qnear extends towards q
rand
by ?q (along the green dotted line) and is pushed
to the medial axis to create qnew
?
(shown in red). (c) qnew
?
is connected to qnear , if possible. (d) The process repeats until the maximum number of
intermediates Imax is reached or qnew
?
is farther than l from qnear along the conﬁgurations of I.
line (Figure 2(a)). The closest node q
near
in the tree (in
blue) to the random sampleq
rand
(in magenta) is selected for
expansion. In Figure 2(b), q
near
is expanded toward q
rand
a
step size?q. The resultingq
new
is then pushed to the medial
axis, and in Figure 2(c), connected to the previously pushed
node, if possible. Upon termination, the resulting sequence
of intermediates I is constrained to the medial axis with a
bias towards q
rand
, as shown in Figure 2(d).
B. Analysis
In this section, we theoretically analyze MARRT. We show
that MARRT grows trees that are ?-close to the medial axis
and is probabilistically complete under mild assumptions
regarding the input parameters andC
free
.
Assumptions and Deﬁnitions. LetWitness(q) be a func-
tion to compute the closest conﬁguration on the boundary
of C
obst
to a conﬁguration q. For the following lemmas,
assume all robots are rigid bodies in 2D or 3D workspaces
and all clearance and penetration computations are exact
computations performed using collision detection libraries
such as PQP [8]. With this assumption, Witness() can be
implemented to exactly compute the witness in the speciﬁc
C
free
. The theory below will hold as long as clearance in
C
free
can be computed. Let ? > 0 be an arbitrarily small
constant. In the following Lemmas, medial axis refers to the
medial axis ofC
free
.
Lemma 1: PushToMedialAxis(q,?) moves the input
conﬁguration q to a conﬁguration q
?
?-close to the medial
axis.
Proof: Let w? Witness(q). We select a directional
ray r. If q?C
free
, let r =
? ?
wq. If q?C
obst
, let r =
? ?
qw.
If q ? w, let r be a ray through w perpendicular to the
boundary ofC
obst
extending intoC
free
. In all cases r is
perpendicular to the boundary ofC
obst
. PushToMedialAxis
steps alongr until the witness point from the clearance com-
putation changes, i.e., the q
i+1
conﬁguration’s witness point
w
i+1
? Witness(q
i+1
) differs from the q
i
conﬁguration’s
witness point w
i
? Witness(q
i
). The medial axis now
lies between q
i
and q
i+1
. A binary search will compute a
conﬁguration q
?
of maximal clearance along q
i
q
i+1
within a
resolution of ?.
Lemma 2: The nodes of the tree built by MARRT are ?-
close to the medial axis.
Proof: MARRT begins by computingq
?
root
, the pushed
conﬁguration of q
root
. q
?
root
is ?-close to the medial axis by
Lemma 1. Only conﬁgurations from the medial axis extend
operation are added as nodes to the tree. Each conﬁguration
q
new
of the medial axis extend operation is pushed to the
medial axis. By Lemma 1, each q
new
is ?-close to the medial
axis.
Lemma 3: Assuming that the medial axis has as least ?
clearance, when ?q≤ ?, the entire tree built by MARRT is
?-close to the medial axis.
Proof: Without loss of generality, assumer? ? is used
byPushToMedialAxis() as the resolution in the binary step,
thus the nodes of the tree are?-close to the medial axis. Each
edge of the tree is a polygonal chain I ={q
0
,q
1
,...,q
n
}. It
sufﬁces to show that each segment(q
i
,q
i+1
) of the polygonal
chain will be ?-close to the medial axis. Let q
i
be the current
node being expanded in MARRTExpand(), ~ r
i
be the push
direction after stepping q
i
towards q
rand
, ~ m
i
be the tangent
of the medial axis in the direction of r
i
at q
i
, and q
i+1
the
conﬁguration after pushing to the medial axis. Because the
medial axis has ? clearance, in the worst case ~ r
i
will be
parallel to ~ m
i
. To show that q
i
q
i+1
, we analyze the shape of
the medial axis between q
i
and q
i+1
. There are three cases.
(1) If the medial axis converges toward ~ r
i
or (2) if the medial
axis stays parallel to ~ r
i
, then q
i
q
i+1
is trivially ?-close to the
medial axis. (3) If the medial axis diverges from ~ r
i
, then there
must be another obstacle inﬂuencing the shape of the medial
axis. However, if this is the case, then the witness point
for the stepped conﬁguration would have changed and the
medial axis would have been found. This is a contradiction,
thus q
i
q
i+1
is also ?-close to the medial axis.
Lemma 4: Assuming that the medial axis has as least ?
clearance, MARRT is probabilistically complete.
Proof: Let q
s
,q
g
?C
free
be any two conﬁgurations in
the same connected component ofC
free
. Then there exists a
path betweenq
s
andq
g
of at least?-clearance from obstacles.
Let q
?
s
and q
?
g
be ?-close conﬁgurations to the medial axis
after calling PushToMedialAxis on q
s
and q
g
, respectively.
Thus, there is a path between q
?
s
and q
?
g
along the medial
93
(a) Clutter (b) Tunnel (c) 2DMaze (d) 3DMaze (e) ZTunnel
Fig. 3. Clutter (a), Tunnel (b), and 2DMaze (c) are 2-DOF environments used to compare the RRT growth of various methods. 3DMaze (d) and ZTunnel
(e) are 6-DOF problems used to compare the solvability of various methods with example paths shown from start (blue) to goal (magenta).
axis. Note there will be a valid path from q
s
to q
?
s
and from
q
g
and q
?
g
, and MARRT builds a tree from q
?
s
to q
?
g
. Deﬁne
a set of spheres of ? volume B ={B
0
,B
1
,...,B
k
} along
the path along the medial axis from q
?
s
to q
?
g
such that B
0
and B
k
are the ?-spheres at q
?
s
and q
?
g
, respectively, and for
all B
i
? B
i+1
6=?. It sufﬁces to show that MARRT can
successfully expand to any B
i
.
Because each ?-sphere has non-zero volume, there is a
probability to sample the sphere and extend the tree into
that sphere. Thus, there is a non-zero probability that a path
along the medial axis will be found as the samples tend to
inﬁnity.
IV. EXPERIMENTAL RESULTS
In this section, we experimentally analyze MARRT and
compare to related approaches which have some method
of ensuring clearance. We compare MARRT against the
following methods:
• RRT [9] without any clearance restrictions, referred to
as RRT,
• RRT with a clearance constraint for the entire tree,
referred to as RRTObst,
• RRT
?
[5] optimizing for path clearance instead of path
length, referred to as RRT
?
,
• and OBRRT [16] which has the ability to bias some
growth towards the medial axis, referred to as OBRRT.
RRT
?
is adapted by using the edge clearance as the cost
metric, or the minimum distance between the conﬁgurations
on the edge and the boundary ofC
obst
and deﬁning the total
cost along a path to be the minimum of the edge clearances
along a path within the tree. To compute the edge clearance,
the clearance of each conﬁguration along the edge must also
be computed. Thus this adaptation of RRT
?
is extremely
expensive (as seen in the following sections). Note that only
two of the above methods create paths along the medial
axis ofC
free
, RRT
?
and MARRT, and only one, MARRT,
does this for the entire tree. We study both 2D and 3D
environments of varying topology.
A. Experimental Setup
RRT, RRTObst, RRT
?
, OBRRT, and MARRT were im-
plemented in a C++ motion planning library developed in
the Parasol Lab at Texas A&M University. This library
uses a distributed graph data structure from the Standard
Template Adaptive Parallel Library (STAPL) [19], a C++
library designed for parallel computing. For each method, the
growth step?q was kept constant at approximately5?10%
of the diagonal of the environment boundary. All methods
use PQP [8] for collision detection (CD call), Euclidean
distance for distance computations, a brute force neighbor-
hood ﬁnding strategy for determining the nearest neighbor
of a conﬁguration, and an ?=0.01 for PushToMedialAxis
(where applicable). MARRT uses ?I =
?q
10
and straight-
line local planning for visibility checks. RRTObst uses a
clearance constraint proportional to the minimum clearance
achieved using MARRT.
We study RRT growth for the various methods in two
separate experiments:
• a quantitative and qualitative look at RRT growth over
a ﬁxed number of extensions for 2-DOF problems in-
cluding Clutter (Figure 3(a)), Tunnel (Figure 3(b)), and
2DMaze (Figure 3(c)) and
• analysis of RRT growth for practical problem solving in
the following 6-DOF problems: 3DMaze (Figure 3(d))
and ZTunnel(Figure 3(e)).
We use the total number of CD calls required for RRT
growth as a standard efﬁciency metric, while the average
and maximum tree/path clearances measure the quality of
trees/paths generated. Average (maximum) tree/path clear-
ance is computed as an average (maximum) over the clear-
ances of all edges in the tree/path. We do not analyze
the minimums here, as in these environments the medial
axis ofC
free
touches the boundary ofC
obst
thus having an
effective clearance of0. All experiments were averaged over
10 random seeds, and standard deviations appear as error
bars.
B. RRT Growth
Here we analyze the quality and efﬁciency of varying RRT
growth techniques in three 2-DOF environments: Clutter,
Tunnel, and 2DMaze. Each method except RRT
?
expands its
tree 200 times from a root at the origin of each environment.
RRT
?
only expands 50 times due to the inefﬁciency of
computing edge clearances when rewiring the tree.
Figure 5 demonstrates the ability of MARRT to create a
tree with maximal clearance. MARRT has both the highest
94
(a) RRT (b) RRTObst (c) RRT
?
(d) OBRRT (e) MARRT
Fig. 4. Example trees in the Tunnel environment for each method.
 0
 1
 2
 3
 4
 5
 6
 7
Clutter Tunnel 2DMaze
Normalized Clearance
RRT
RRTObst
RRT*
OBRRT
MARRT
(a) Average tree clearance
 0.6
 0.8
 1
 1.2
 1.4
 1.6
Clutter Tunnel 2DMaze
Normalized Clearance
RRT
RRTObst
RRT*
OBRRT
MARRT
(b) Maximum tree clearance
Fig. 5. Tree quality: clearances normalized to RRT for the 2-DOF
environments.
average and maximal clearance across the three environ-
ments, with RRT
?
coming in second in most cases. Recall
that RRT
?
is only allowed to expand 50 times due to its
high cost, so the coverage of these trees is lower and results
might be skewed showing it having higher clearance. Even
so, MARRT out-performs RRT
?
by this metric. Note that
while RRT
?
is still able to return a path with asymptotically
 0.1
 1
 10
 100
 1000
 10000
Clutter Tunnel 2DMaze
Normalized CD Calls
RRT
RRTObst
RRT*
OBRRT
MARRT
Fig. 6. Method efﬁciency: log scale of the CD calls required to construct
the trees normalized to RRT for the 2-DOF environments.
maximal clearance, it would require a large number of
iterations to yield close to maximal clearance for paths.
RRTObst is difﬁcult to tune and is not sensitive to regions
of the environment, so the clearance constraint can only be
as large as the minimum clearance along the medial axis of
the environment which explains its suboptimal performance.
Figure 4(e) shows an example MARRT tree grown in the
Tunnel environment. Because RRT (Figure 4(a)), RRTObst
(Figure 4(b)), RRT
?
(Figure 4(c)), and OBRRT (Figure 4(d))
are allowed to expand away from the medial axis, their trees
have suboptimal average and maximum clearance values.
Note the difference in overall tree clearance for MARRT
as compared with the other methods.
Despite signiﬁcantly improving the tree’s clearance,
MARRT has a comparable cost to the base RRT growth
methods, as shown in Figure 6, within a factor of 10 in
the worst case. Observe that RRT
?
with path clearance
as an optimization parameter is extremely expensive to
compute cost-to-go metrics between possible connections
of the tree, causing an enormous cost as compared with
the other methods. Considering this, MARRT provably and
experimentally shows increased clearance for the entire tree,
not just paths, with comparable computation overhead to
other RRT variants.
95
 0
 2
 4
 6
 8
 10
 12
3DMaze ZTunnel
Normalized Clearance
RRT
RRTObst
RRT*
OBRRT
MARRT
(a) Average path clearance
 0
 0.5
 1
 1.5
 2
 2.5
 3
3DMaze ZTunnel
Normalized Clearance
RRT
RRTObst
RRT*
OBRRT
MARRT
(b) Maximum path clearance
Fig. 7. Path quality: clearances normalized to RRT for the 6-DOF
environments.
 0.1
 1
 10
 100
 1000
 10000
 100000
3DMaze ZTunnel
Normalized CD Calls
RRT
RRTObst
RRT*
OBRRT
MARRT
Fig. 8. Method efﬁciency: log scale of the CD calls required to construct
the trees normalized to RRT for the 6-DOF environments.
C. Querying
We have seen that MARRT experimentally improves the
overall tree quality in terms of clearance as compared to
contemporary approaches. In this experiment, we show how
MARRT can be useful for solving example queries in difﬁ-
cult environments with high clearance paths.
We compare the various methods in two complex 6-DOF
problems, 3DMaze and ZTunnel, to see their comparative
effectiveness in solving queries for difﬁcult problems. We
compare the average and maximum path clearance values as
a metric of path quality, shown in Figure 7 and the cost in
terms of CD calls, shown in Figure 8. We give each method
at most 10 hours to solve the query. Because of RRT
?
’s high
cost, it was only able to complete 7 runs instead of 10 like
the others.
Figure 7 echoes the quality metrics seen in tree clearance
for path clearances. MARRT successfully yields the largest
average and maximum path clearances, sometimes by a large
margin as in the 3DMaze environment. RRT
?
and RRTObst
are relatively close to MARRT on these environments in
terms of clearances as the narrow passages are quite tight.
RRT and OBRRT perform poorly on this metric because
they create paths which typically scrape along obstacle
boundaries.
Additionally, Figure 8 shows the minimal overhead of
MARRT to optimize the path clearance as compared with
RRT
?
. MARRT is within a factor of 10 in the worst case
to RRT, RRTObst, and OBRRT for ZTunnel and can be
more cost effective that RRTObst in the 3DMaze. This
emphasizes the relative efﬁciency used to guarantee the
clearance properties of the tree. Again, RRT
?
is extremely
expensive to compute and is in the best case still two
orders of magnitude slower than MARRT. RRT, RRTObst,
and OBRRT efﬁciently map the narrow passages but lack
clearance guarantees, which could be quite important, e.g.,
when needing path safety.
V. CONCLUSION
In this paper, we present a new technique, called Me-
dial Axis RRT, that increases tree and path clearance for
RRT growth. We illustrate MARRT’s ability to maximize
clearance in environments spanning 2-DOF and 6-DOF prob-
lems with minimal cost as compared to a contemporary
optimization technique, RRT
?
. In the worst case, MARRT
is approximately only an order of magnitude off methods
speciﬁcally designed for narrow passages. In the future, we
would like to relax some of the assumptions made on the
input parameters and analyze the growth rate of MARRT
to see if it matches that of RRT. Additionally, improving
the efﬁciency of approximate medial axis computations [12],
[20] will allow this method to be applicable to high DOF
problems, including articulated linkage robots, and improve
the efﬁciency of MARRT in the worst case conditions to still
be quite comparable to contemporary methods.
REFERENCES
[1] O. B. Bayazit, G. Song, and N. M. Amato. Enhancing randomized
motion planners: Exploring with haptic hints. In Proc. IEEE Int. Conf.
Robot. Autom. (ICRA), pages 529–536, 2000.
[2] R. Geraerts and M. H. Overmars. Creating high-quality paths for
motion planning. Int. J. Robot. Res., 26(8):845–863, 2007.
96
[3] C. Holleman and L. E. Kavraki. A framework for using the workspace
medial axis in prm planners. In Proc. IEEE Int. Conf. Robot. Autom.
(ICRA), volume 2, pages 1408–1413, San Franasisco, CA, 2000.
[4] L. Jaillet, J. Cort´ es, and T. Sim´ eon. Sampling-based path planning
on conﬁguration-space costmaps. Trans. Rob., 26(4):635–646, Aug.
2010.
[5] S. Karaman and E. Frazzoli. Sampling-based algorithms for optimal
motion planning. International Journal of Robotics Research (IJRR),
30:846–894, 2011.
[6] L. E. Kavraki, P.
ˇ
Svestka, J. C. Latombe, and M. H. Overmars. Proba-
bilistic roadmaps for path planning in high-dimensional conﬁguration
spaces. IEEE Trans. Robot. Automat., 12(4):566–580, August 1996.
[7] J. J. Kuffner and S. M. LaValle. RRT-connect: An efﬁcient approach
to single-query path planning. In Proc. IEEE Int. Conf. Robot. Autom.
(ICRA), pages 995–1001, 2000.
[8] E. Larsen, S. Gottschalk, M. C. Lin, and D. Manocha. Distance queries
with rectangular swept sphere volumes. In Proc. IEEE Int. Conf.
Robot. Autom. (ICRA), volume 4, pages 3719–3726 vol.4, 2000.
[9] S. M. LaValle and J. J. Kuffner. Randomized kinodynamic planning.
Int. J. Robot. Res., 20(5):378–400, May 2001.
[10] J. Lee, O. Kwon, L. Zhang, and S. Yoon. Sr-rrt: Selective retraction-
based rrt planner. In Proc. IEEE Int. Conf. Robot. Autom. (ICRA),
pages 2543–2550, 2012.
[11] J.-M. Lien, O. B. Bayazit, R.-T. Sowell, S. Rodriguez, and N. M.
Amato. Shepherding behaviors. In Proc. IEEE Int. Conf. Robot.
Autom. (ICRA), pages 4159–4164, April 2004.
[12] J.-M. Lien, S. Thomas, and N. Amato. A general framework for
sampling on the medial axis of the free space. In Robotics and Automa-
tion, 2003. Proceedings. ICRA ’03. IEEE International Conference on,
volume 3, pages 4439 – 4444, sept. 2003.
[13] T. Lozano-P´ erez and M. A. Wesley. An algorithm for planning
collision-free paths among polyhedral obstacles. Communications of
the ACM, 22(10):560–570, October 1979.
[14] J. Pan, L. Zhang, and D. Manocha. Retraction-based RRT planner for
articulated models. In Proc. IEEE Int. Conf. Robot. Autom. (ICRA),
pages 2529–2536, 2010.
[15] J. H. Reif. Complexity of the mover’s problem and generalizations. In
Proc. IEEE Symp. Foundations of Computer Science (FOCS), pages
421–427, San Juan, Puerto Rico, October 1979.
[16] S. Rodriguez, X. Tang, J.-M. Lien, and N. M. Amato. An obstacle-
based rapidly-exploring random tree. In Proc. IEEE Int. Conf. Robot.
Autom. (ICRA), 2006.
[17] A. C. Shkolnik and R. Tedrake. Sample-based planning with volumes
in conﬁguration space. CoRR, abs/1109.3145, 2011.
[18] G. Song and N. M. Amato. Using motion planning to study protein
folding pathways. In Proc. Int. Conf. Comput. Molecular Biology
(RECOMB), pages 287–296, 2001.
[19] G. Tanase, A. Buss, A. Fidel, Harshvardhan, I. Papadopoulos,
O. Pearce, T. Smith, N. Thomas, X. Xu, N. Mourad, J. Vu, M. Bianco,
N. M. Amato, and L. Rauchwerger. The STAPL Parallel Container
Framework. In Proc. ACM SIGPLAN Symp. Prin. Prac. Par. Prog.
(PPoPP), pages 235–246, San Antonio, Texas, USA, 2011.
[20] S. A. Wilmarth, N. M. Amato, and P. F. Stiller. MAPRM: A
probabilistic roadmap planner with sampling on the medial axis of the
free space. In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), volume 2,
pages 1024–1031, 1999.
[21] L. Zhang and D. Manocha. An efﬁcient retraction-based RRT planner.
In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), 2008.
97
