Open Loop Stable Control in Repetitive
Manipulation Tasks
Michiel Plooij
?
, Wouter Wolfslag
?
and Martijn Wisse
Delft University of Technology
AbstractÑMost conventional robotic arms depend on sensory
feedback to perform their tasks. When feedback is inaccurate,
slow or otherwise unreliable, robots should behave more like
humans: rely on feedforward instead. This paper presents an
approach to perform repetitive tasks with robotic arms, without
the need for feedback (i.e. the control is open loop). The cyclic
motions of the repetitive tasks are analyzed using an approach
similar to limit cycle theory. We optimize open loop control
signals that result in open loop stable motions. This approach
to manipulator control was implemented on a two DOF arm in
the horizontal plane with a spring on the Þrst DOF, of which we
show simulation and hardware results. The results show that
both in simulation and in hardware experiments, it is possible to
create open loop stable cycles. However, the two resulting cycles
are different due to model inaccuracies. We also show simulation
and hardware results for an inverted pendulum, of which we
have a more accurate model. These results show stable cycles
that are the same in simulation and hardware experiments.
I. INTRODUCTION
The vast majority of robotic manipulators require sensory
feedback in order to perform their tasks. Humans, on the
other hand, use both feedback and feedforward (or open loop)
control when controlling their body [1]. Using feedforward
allows humans to control their body despite having large
time delays (typically 150 ms [2, 3]). Although robots have
faster feedback loops, feedforward still has advantages. First,
feedforward can anticipate on future states of the system,
second, is can offer cheaper control when the cost is critical,
and third, it is suitable for systems with slow and imprecise
feedback, such as camera based feedback.
In a previous study, we showed the remarkable result that
sensitivity to some modeling inaccuracies can be eliminated
by choosing the right feedforward controller [4]. This result
was similar to observations in humans, who minimize the
inßuence of uncertainty on the Þnal position of feedforward
controlled movements [5]. Where the previous study only
considered short motions (one second), this paper takes those
ideas a step further by considering long term stability of open
loop controlled robotic arms (see Fig. 1), inspired by (human)
stable walking motions.
One of the commonly cited disadvantages of open loop
controllers is that they cannot directly compensate for per-
turbations, since those perturbations are not fed back into the
controller. Since most tasks of robotic arms are repetitive,
we propose to view them as cycles and consider the inherent
stability of those cycles. If the trajectories we perform are
?
These authors contributed equally to this paper
Top view
feedforward 
controller
Open loop 
stable cycle
?1
?2
?1
?2
T2
T1
I
t
Fig. 1. This Þgure shows the top view of the concept of open loop stable
manipulation for our two DOF robot setup. Since there is no feedback
available, the torque signal is a function of time only. Using numerical
optimizations, we Þnd torque signals that result in open loop stable cycles
and allow the robot to perform repetitive tasks. Both the path displayed and
the current signals are obtained from hardware experiments.
stable, perturbations will simply decay over time, without
the need for sensory feedback.
Other researchers have already used the inherent stability
of speciÞc motions in order to create functional robots. Those
robots can be split into two groups: robots with only limited
state feedback and robots without any state feedback.
A well known example of robots with limited state feed-
back is given by Schaal and Atkeson [6], who studied open
loop stable juggling with a robotic arm. In their case, open
loop means that the state of the ball is not used as an input
for the controller, but the arm itself is position controlled.
Other examples include a timed position controlled swing leg
retraction to stabilize running [7] and rope turning without
measuring the state of the rope [8].
The group that is more related to this study is the group of
robots without any state feedback. The most striking result
in this group was obtained by McGeer, who introduced the
concept of passive dynamic walking [9].Those walkers do not
have motors and thus they do not use any feedback control,
while their walking motion is stable. The stable walking
motions do not rely on the motion being stable at each point
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 949
Side views
g
Top views
(a)      (b)       (c)     (d)
Lower arm
Upper arm
Shoulder joint
Elbow joint
Gripper
Off centered 
mass
Joint
Fig. 2. The four conÞgurations we studied: (a) a simulation model of a
two DOF robotic arm, (b) a two DOF robotic arm, (c) a simulation model
of an inverted pendulum and (d) an inverted pendulum.
in time, rather they work due to the existence of stable cyclic
motions, called limit cycles. Such cycles were later on used
in so called limit cycle walkers in combination with feedback
control [10, 11, 12]. The work most strongly related to this
paper is that by Mombaur et al. [13, 14]. They found stable
open loop controllers for walking and running robots by
optimizing the open loop controllers for both stability of the
motion and energy consumption. These results on a variety
of systems indicate that open loop stable control can be an
effective approach for robotic arms as well.
The goal of this paper is to introduce a new approach in
robot manipulator control: open loop stable manipulation and
to show the Þrst results using this approach. We show results
both in simulation studies and in hardware experiments.
The remainder of this paper is structured as follows.
Section II explains the conÞgurations we studied and the
optimization method we used. Section III shows the results
for the two DOF robotic arm, including a description of the
simulation model, the simulation results and the hardware
results. Section IV shows the results for the inverted pen-
dulum, including a description of the simulation model, the
simulation results and the hardware results. Finally, the paper
ends with a discussion in Section V and a conclusion in
Section VI, where we will conclude that it is possible to
perform manipulation tasks with an open loop controller by
performing open loop stable cycles.
II. METHODS
We studied open loop stable task execution of robotic arms
by optimizing the open loop controller such that the task
is performed by a stable cyclic motion. In this section, we
discuss the conÞgurations we studied and the optimization
method.
A. ConÞgurations
We studied four conÞgurations, which are also shown in
Fig. 2:
(a) A simulation model of a two DOF robotic arm.
On this model we optimized the open loop controller
such that the arm makes stable cyclic motions while
performing the speciÞed task.
(b) A prototype of a two DOF robotic arm. We imple-
mented the controller obtained in (a) on a two DOF
robotic arm to test how the controller performs on
a real system. The results will show that the open
loop controller generates stable cycles on the robot, but
does not converge to the same trajectory as in (a). In
Section V-B, we will argue that this is caused by a
bending of the second DOF due to gravity.
(c) A simulation model of an inverted pendulum.We
used the same techniques as used in (a) to obtain
open loop stable motions of an inverted pendulum. We
show that on this system, the results have an intuitive
explanation.
(d) A prototype of an inverted pendulum. We imple-
mented the controller obtained in (c) on an inverted
pendulum to test how the controller performs on a real
system for which an accurate model is known.
B. Optimization method
The stability of limit cycles can be assessed with a number
of different measures, such as Lyapunov stability [15] or
contraction analysis [16, 17]. We used the classic notion of
Poincar« e maps [15] to Þnd the stability of the open loop
controlled motions, which we will now explain.
Consider a non-linear system described by the following
differential equation:
ú x = f(x,u(t)) (1)
Since we use open loop control, we can consider the time as
an extra state. Using transverse coordinates [18, 19, 20] with
the time as phase variable in this appended state space is
the same as using error dynamics in the original state space.
This means that we can set a Poincar« e section at t = t
f
.
We calculated the error dynamics along the trajectory x
?
(t)
that results from the input u
?
(t). Since the controller is open
loop, the error dynamics are simply given as the difference
between the current state and the trajectory state, both at the
same time:
ú x
?
= f(x
?
,u
?
(t)) (2)
?x = x?x
?
(3)
ú
?x = f(x,u
?
(t))?f(x
?
,u
?
(t)) (4)
Linearizing the dynamics along the trajectory results in:
ú
?x =
¶f(x
?
,u
?
(t))
¶x
?x (5)
= A
?
(t)?x (6)
Where A
?
is the linearized system matrix, and ?x the error-
state. We constrained the motions to be cyclic with period t
f
(see below), which results in a cyclic A
?
(t) with the same
period. Since system (6) is linear, we can take the state
transition matrix ? from t = t
0
=0 to t = t
f
. Because
950
we know A
?
(t) analytically, we can Þnd ? by numerically
computing the solution to the following initial value problem:
ú
?= A
?
(t)?, ?(0) = I (7)
Similar to the monodromy matrix in Poincar« e map analysis
of limit cycles, the motion is stable if the eigenvalues of ?
have an absolute value smaller than one:
|?(?(t
f
))|
max
< 1 (8)
To Þnd a trajectory, we now use an optimal control approach
similar to [13]. We used the above condition as a constraint
rather than to minimize the left hand side of it, because
of two reasons. First, the above condition speciÞes the
convergence rate of the limit cycle, and does not specify
other stability related factors, such as basin of attraction
[21] and robustness against model uncertainties. Second, in
practice other performance issues are also of concern, such as
energy consumption and speed. We chose to use the integral
of the squared input as objective, resulting in the following
optimization:
minimize
u(t)

t
f
t0
u(t)
2
dt (9)
subject to|?(?(t
f
))|
max
< 0.9
|u(t)|<u
max
x(0) = x
pick
x(t
1
)= x
place
x(t
f
)= x
pick
= x(0)
(10)
Where u(t) is the input, u
max
is the maximum input and
x
pick
and x
place
are the pick and place states (see Sec-
tion III-B). The constraint that the Þnal state is equal to the
initial state causes the resultant motion to be cyclic.
In case of a setup with multiple motors, we used the
integral of the sum of squared inputs as cost function. We
used this cost function because it is often used in other con-
trol applications. Furthermore, the resulting controllers are
relatively smooth, whereas a time-optimal controller would
be bang-bang. Such a bang-bang controller is undesirable in
robot experiments, because it is more likely to be affected
by unmodeled effects such as backlash. The optimization is
performed using the optimal control package GPOPS [22] in
Matlab.
III. TWO DOF MANIPULATOR
We implemented open loop stable manipulation on a
SCARA type arm with two DOFs: two revolute joints moving
two links in the horizontal plane (see Fig. 2b and 3). Since
there is no spring present on the second joint of the arm, an
open loop controlled motion must depend on dynamic effects
for stabilization. SpeciÞcally, the zero input does not lead to a
stable result. Since the dynamic effects are highly non-linear,
it is not obvious whether stable motions exist. This section
starts with a system description, including a description of the
robotic arm and the simulation model. Next, we explain the
task the arm has to perform, followed by simulation results
and hardware results.
Top view
?1
k1
?2
m2, J2
m1, J1
L1
Lg1
L2
Lg2
x
y
Fig. 3. Top view of the two DOF system with a linear spring on the Þrst
joint. The second joint is actuated through a parallel mechanism (not shown
in this Þgure), such that the angle of the second arm is an absolute angle.
The friction acts on the absolute angles of the joints.
TABLE I
THE MODEL PARAMETERS OF THE TWO DOF ARM.
Parameter Symbol Value Unit
Coulomb friction ?
c1
, ?
c2
0.0481, 0.0218 Nm
Viscous friction ?
v1
, ?
v2
0.03, 0.03 Nms/rad
Torque dependent friction ?
tf1
, ?
tf2
21.87, 31.91 %
Inertia J
1
, J
2
0.0233, 0.0871 kgm
2
Mass m
1
, m
2
0.809, 1.599 kg
Length l
1
, l
2
0.410, 0.450 m
Position of COM l
g1
, l
g2
0.070, 0.325 m
Motor constant k
t1
, k
t2
26.7, 28.1 mNm/A
Gearbox ratio n
1
, n
2
1:54, 1:110 rad/rad
Spring stiffness k
1
1.6 Nm/rad
A. System description
Fig. 1 shows a picture of the two DOF robotic arm [23].
The DOFs are created by two 18x1.5mm stainless steel tubes,
connected with two revolute joints, with a spring on the
Þrst joint. A mass of 1 kg is connected to the end of the
second tube, which represents the weight of a gripper with
product. The motors are placed on a housing and AT3-gen III
16mm timing belts transfer the torques within the housing.
The joints are actuated by Maxon 60W RE30 motors with
gearbox ratios of respectively 18:1 and 1:66. The timing belts
provide an additional transfer ratio of 3:1 on the Þrst joint
and 5:3 on the second joint.
We used the TMT method [24] to obtain the equations
of motion of the simulation model of this arm, which are
too long to include in this paper. The model includes 19
parameters, which are listed in Table I. We included three
types of frictional losses: Coulomb friction, viscous friction
and torque dependent gearbox friction. Torque dependent
gearbox friction is less commonly used than the other two,
however, from the parameter values obtained through a
system identiÞcation of the motor it is clear that this type
of friction is not negligible (see Table I). The way we
implemented it is similar to the force dependent friction term
in [25]. The friction in a joint is equal to:
T
f
= ??
v
á? ? sign(?)á(?
c
+?
t
á|T|) (11)
for ? =0
T
f
= ?min(?
c
+?
t
á|T|;|T|)á sign(T) (12)
for ?=0.
951
? is the velocity of the joint, T is the torque exerted by the
motor on the joint, and ?
v
, ?
c
and ?
t
are the coefÞcients of
viscous, Coulomb and torque dependent friction respectively.
The simulation model includes a DC motor. The torque
applied by the DC motor on the joint is equal to:
T = nák
t
áI (13)
Where k
t
is the motor constant, n is the gearbox ratio and
I is the current through the motor. The current through the
motor is constrained to 1 A (see eq. 10).
Coulomb friction and torque dependent friction introduce
discontinuities in the equations of motion, which are difÞcult
for GPOPS to handle. Therefore, we optimized the open loop
controller on a model with only viscous friction, and added a
torque afterwards to compensate for the Coulomb friction and
torque dependent friction. Such a compensation can only be
done when it does not effect the stability of the cycle, so when
A
?
is independent of both the compensated friction and the
input. Both the Coulomb friction and the torque dependent
friction depend on the state through a sign function, which
is a piecewise constant function. Since A
?
is the result of
linearizing along the state, A
?
does not depend on those
friction terms (neglecting the always stabilizing effect of the
discontinuity in the sign function). To make A
?
independent
of the input, we consider momenta instead of velocities. The
equations of motion then become:
ú x = f(x)+Bu(t) (14)
With x, the state consisting of positions and momenta, and B
a constant matrix. Following the deÞnition in eq. (6), we see
that A
?
is therefore independent of u. Such a transformation
is possible for many mechanical systems. Although such a
transformation is not necessary, our speciÞc optimization was
faster with the transformation. For easier interpretation, we
will show the velocities in the results.
B. Task
The robotic arm has to perform a pick-and-place task.
The important task parameters are the pick state, the place
state and the time per stroke. We show the results of the
optimization for a motion which starts at t=0 at the pick
statex
pick
, goes to the place statex
place
att
1
and then returns
to the pick state at t
f
with
x
pick
=
? ? ? ? ?0.7 rad
?0.85 rad
0 rad/s
0 rad/s
? ? ? ? ;x
place
=
? ? ? ? 0.7 rad
?0.3 rad
0 rad/s
0 rad/s
? ? ? ? (15)
Where x is the vector consisting of the positions of the Þrst
and second arm, and their respective angular velocities. t
1
and t
f
are free parameters in the optimization, but bounded
as follows:
0.1 s ²t
1
² 1.2 s (16)
0.1 s ²t
f
?t
1
² 1.2 s (17)
The goal is to Þnd a path that statisÞes the task constraints
(that also include a stability-enforcing constraint) according
?0.2 0 0.2 0.4 0.6 0.8
0.5
0.7
0.9
X (m)
Y (m)
End point
Stable cycle
Pick position
Place position
Position cycle 1
Perturbed initial position
Position cycle 2
Position cycle 3
Fig. 4. This Þgure shows the plot of the end point of the arm in simulation.
The plot shows the stable cycle from simulation (thick dotted red line) and
the motion of the robotic arm that starts from a perturbed position and
converges to the stable cycle (thin blue line).
?1.2 ?0.4 0 0.4 0.8
?2
0
2
Position (rad)
Velocity (rad/s)
 
Upper arm
Lower arm
Stable cycle
-0.8
Place state
Pick state
Fig. 5. This Þgure shows the state space plot of the simulation data for
the two DOF robotic arm. The plot shows the stable cycle (thick dotted red
lines) and a motion that starts from a perturbed position and converges to
the open loop stable cycle (thin lines).
to eq. (10), and then minimize the integral of the square of
the current (see eq. (9)). Although we only show the result
of one speciÞc task, similar results were obtained using other
task constraints. In none of these cases multi-starts or tuned
initial conditions were needed, even though the optimization
is non-convex.
C. Simulation results
Fig. 4 shows the position of the gripper in the workspace.
The gripper does not start at the stable cycle, but converges
to it. The sharp corners in the motion are the pick and place
positions. Similar results were obtained for different pick and
place positions.
Fig. 5 shows an example motion converging to the stable
cycle in state space. The motion starts at a distance from the
pick state x
start
= x
pick
+[0.07;?0.15;0;0] and converges
to the open loop stable cycle.
Fig. 6 shows the motion and current proÞle that result from
the optimization. In Fig. 6a and 6b, we see that the motion
starts and ends at the pick state, while at t Å 1.2 s, the arm
is at the place state.
D. Hardware results
Fig. 7 shows the position of the gripper in the workspace.
It clearly shows that the gripper does not start at the stable
cycle, but converges to the cycle. Comparing the hardware
results (Fig. 7) with the simulation results (Fig. 5) leads to the
952
0 0.5 1 1.5 2
?1
0
1
Position (rad)
 
 
0 0.5 1 1.5 2
?2
0
2
Time (s)
Velocity (rad/s)
 
 
00.5 1 1.5 2
?1
0
1
Time (s)
Current (A)
 
 
Upper arm
Lower arm
Upper arm
Lower arm
Upper arm
Lower arm
(c)
(b)
(a)
Fig. 6. This Þgure shows the simulation data for the two DOF robotic
arm as function of time. The Þgure shows the positions of the joints (a), the
velocities of the joints (b) and the torques about the joints (c).
?0.2 0 0.2 0.4 0.6 0.8
0.5
0.7
0.9
X (m)
Y (m)
Fig. 7. This Þgure shows the plot of the gripper in hardware experiments.
The plot shows the motion of the robotic arm that starts from a perturbed
position and converges to the stable cycle.
conclusion that although both the simulation and hardware
results show convergence to a stable cycle, the stable cycles
themselves are different. In Section V-B we will argue that
the difference is probably caused by a bending of the second
DOF due to gravity. In Section IV, we will show that for
a simpler system (i.e. an inverted pendulum), our model is
accurate enough to predict the exact cycle.
Fig. 8 shows the motion of the arm in state space. We
see that the motion converges to a stable cycle in state
space. When comparing Fig. 8 with Fig. 5, we see that
range of positions of the upper arm is smaller in hardware
experiments, and that the range of positions of the lower arm
is larger in hardware experiments.
Fig. 9 shows the time series of a typical cycle of the robotic
arm in hardware experiments. Again we see that the hardware
results differ from the simulation results. In Fig. 9b, we notice
that the velocity signals show a vibration at approximately
10 Hz. This vibration is caused by the elasticity of the timing
belts between the motors (with encoders) and the joints.
The accompanying video shows a demonstration of the
disturbance recovery of the two DOF arm. This video also
indicates that the basin of attraction is large. In Section V-B,
we will show this basin of attraction in more detail.
IV. INVERTED PENDULUM
In the previous section, we showed the results of a two
DOF SCARA type arm. These results show that pick and
?1.2 ?0.8 ?0.4 0 0.4 0.8
?2
0
2
Position (rad)
Velocity (rad/s)
 
Upper arm
Lower arm
Fig. 8. This Þgure shows the state space plot of the hardware experiments
on the two DOF robotic arm. The plot shows the motion of the robotic
arm that starts from a perturbed state and converges to the open loop stable
cycle. In order to obtain a smooth graph, the velocity data is Þltered with a
Þfth order Butterworth Þlter with the cutoff frequency at 10 Hz.
0 0.5 1 1.5 2
?1
0
1
Time (s)
Position (rad)
 
 
00.5 1 1.5 2
?2
0
2
Time (s)
Velocity (rad/s)
 
00.5 1 1.5 2
?1
0
1
Time (s)
Current (A)
 
Upper arm
Lower arm
Upper arm
Lower arm
Upper arm
Lower arm
(c)
(b)
(a)
Fig. 9. This Þgure shows the data of a typical motion of the hardware
experiments on the two DOF robotic arm as function of time. The Þgure
shows the positions of the joints (a), the velocities of the joints (b) and the
current through the motors (c).
Side view
?
J
g
?v
Fig. 10. Side view of the one DOF system with linear viscous friction and
gravity.
place motions can be performed in an open loop stable
manner. However, there was a difference between simulation
and hardware results due to model inaccuracies. In this
Section we move to a simpler system, allowing us to both
give an intuitive explanation for how the stabilization works,
and indicate that with a more accurate model hardware
experiments and simulation can be made to match. For this
purpose an inverted pendulum is used (see Fig. 10).
A. System description
Fig. 2d shows a picture of the inverted pendulum setup we
used. The pendulum consists of a disk with an off-centered
mass, which is connected to a DC motor without a gearbox
953
TABLE II
THE MODEL PARAMETERS OF THE TWO DOF ARM.THE VALUES ARE
OBTAINED THROUGH A SYSTEM IDENTIFICATION OF THE INVERTED
PENDULUM.
Parameter Symbol Value Unit
Gravitational term c
1
112.9 s
?2
Motor parameters term c
2
28.0 V
?1
s
?2
Damping term c
3
-1.8 s
?1
in between. This direct drive actuation results in low friction,
which makes the system easier to model. The DC motor
is voltage controlled with a maximum voltage of 5 V (see
eq. 10).
The differential equation for this system is
	
ú
?
ú ?


=
	
?
c
1
sin(?)+c
2
U +c
3
?


(18)
Where, U is the input voltage, and c
1
, c
2
and c
3
are the
model parameters, which we identiÞed through a system
identiÞcation and are listed in Table II. In this model, c
1
can
be seen as the gravitational term, c
2
as the motor parameters
term and c
3
as the damping term, which includes the back-
emf term of the motor. All these terms have the inertia of
the pendulum included.
We again used GPOPS to optimize an open loop controller
such that we obtain an open loop stable motion for the task
described below.
B. Task
The task we will look at is a motion with the initial and
Þnal position of the arm both at ?=1/5¹ (nearly upright
position). Simply not moving will not result in stability, since
by itself this is an unstable position. So at Þrst, it seems
impossible to Þnd an open loop stable solution. However,
this is possible when we allow the pendulum to swing to the
region between
1
/
2
¹ and
3
/
2
¹ (around the lower equilibrium)
during the motion. The goal is to Þnd a path that is stable
according to (8), and then minimize the integral of the square
of the voltage (see eq. (9)). We limit the duration of the
motion to 1.2 seconds.
C. Simulation results
Fig. 11 shows the result of the optimization, which can be
explained intuitively. Since eq. (18) is linear in the velocity
and the input, the A
?
-matrix of the pendulum only depends
on the position. That is, being in a state with? between?¹/2
and ¹/2 has a destabilizing effect, and being in a state with ?
outside that range has a stabilizing effect. Loosely speaking, a
stable motion requires that the stabilizing effects compensate
the destabilizing ones. This means that the system should
spend enough time in sufÞciently stabilizing positions to
counter the time it spends in the destabilizing positions. In
Fig. 11, we see that the pendulum moves directly from the
destabilizing initial position to stabilizing positions, where it
spends most of the time before moving back at the end of
the motion. We use the condition in eq. (8) to evaluate if the
stabilizing effects are compensating the destabilizing effects.
0 0.3 0.6 0.9
0
2
4
6
Time (s)
Position (rad)
 
 
0 0.3 0.6 0.9
?20
0
20
Time (s)
Velocity (rad/s)
 
 
0 0.3 0.6 0.9
?2
0
2
Time (s)
Voltage (V)
 
 
Simulation
Hardware
Simulation
Hardware
Simulation
Hardware
Fig. 11. This Þgure shows the data for the single pendulum in the vertical
plane as function of time. The Þgure shows the position of the joint (a),
the velocity of the joint (b), and the torque about the joint (c) for both the
simulation as the hardware experiments.
02 46
?20
?10
0
10
20
Position (rad)
Velocity (rad/s)
 
Predicted stable cycle
Hardware
Fig. 12. This Þgure shows the state space trajectory for the single pendulum
in the vertical plane. The plot shows the stable cycle as determined in
simulation (thick dotted line) and a motion on the hardware setup that starts
from a perturbed position and converges to the stable cycle (thin line).
D. Hardware results
Fig. 12 shows the results of applying the input signal found
in simulation on the hardware setup. It shows a motion being
initialized in a perturbed position, after which it converges
towards a cycle close to the one predicted by simulation.
Fig. 11 shows that the motion over time after convergence is
the same in simulation and hardware experiments. This shows
that when an accurate model is available, the method we
used Þnds a controller that performs the desired task on the
real system. Extending the method to allow task performance
even when accurate models are not readily available is an
important next step in the research on open loop stable
manipulation.
V. DISCUSSION
A. Model mismatch
For the two DOF robotic arm, the results from simulation
(see Fig. 4, 5 and 6) are clearly different from those of the
hardware experiments (see Fig. 7, 8 and 9). However, both
simulation and hardware experiments show convergence to
a stable cycle. These results show that the speciÞc cycle
the system converges to is sensitive to unmodeled behavior.
For the inverted pendulum, we showed the results from
954
open loop stable cycle, but the cycles they converge to are not
the same, probably caused by a bending of the second DOF
due to gravity. We expect that this problem can be solved by
online learning of the stable cycles.
ACKNOWLEDGEMENT
This work is part of the research programme STW, which
is (partly) Þnanced by the Netherlands Organisation for
ScientiÞc Research (NWO).
REFERENCES
[1] M. Desmurget and S. Grafton, ÒForward modeling
allows feedback control for fast reaching movements,Ó
Trends in cognitive sciences, vol. 4, no. 11, pp. 423Ð
431, 2000.
[2] S. Thorpe, D. Fize, and C. Marlot, ÒSpeed of processing
in the human visual system,Ó Nature, vol. 381, no. 6582,
pp. 520Ð522, 1996.
[3] P. Cordo, L. Carlton, L. Bevan, M. Carlton, and G. K.
Kerr, ÒProprioceptive coordination of movement se-
quences: role of velocity and position information,Ó
Journal of Neurophysiology, vol. 71, no. 5, pp. 1848Ð
1861, 1994.
[4] M. Plooij, M. de Vries, W. Wolfslag, and M. Wisse,
ÒOptimization of feedforward controllers to minimize
sensitivity to model inaccuracies,Ó in Intelligent Robots
and Systems (IROS), 2013 IEEE/RSJ International Con-
ference on, 2013, pp. 3382Ð3389.
[5] C. M. Harris and D. M. Wolpert, ÒSignal-dependent
noise determines motor planning,Ó Nature, vol. 394, no.
6695, pp. 780Ð784, 1998.
[6] S. Schaal and C. Atkeson, ÒOpen loop stable control
strategies for robot juggling,Ó in Robotics and Au-
tomation, 1993. Proceedings., 1993 IEEE International
Conference on, may 1993, pp. 913 Ð918 vol.3.
[7] A. Seyfarth, H. Geyer, and H. Herr, ÒSwing-leg retrac-
tion: a simple control model for stable running,Ó Journal
of Experimental Biology, vol. 206, no. 15, pp. 2547Ð
2555, 2003.
[8] C. H. Kim, K. Yonekura, H. Tsujino, and S. Sugano,
ÒPhysical control of the rotation of a ßexible objectrope
turning with a humanoid robot,Ó Advanced robotics,
vol. 25, no. 3-4, pp. 491Ð506, 2011.
[9] T. McGeer, ÒPassive dynamic walking,Ó The Interna-
tional Journal of Robotics Research, vol. 9, no. 2, pp.
62Ð82, 1990.
[10] Y. H¬ urm¬ uzl¬ u and G. Moskowitz, ÒThe role of impact
in the stability of bipedal locomotion,Ó Dynamics and
Stability of Systems, vol. 1, no. 3, pp. 217Ð234, 1986.
[11] A. Goswami, B. Espiau, and A. Keramane, ÒLimit
cycles and their stability in a passive bipedal gait,Ó
in Robotics and Automation, 1996. Proceedings., 1996
IEEE International Conference on, vol. 1. IEEE, 1996,
pp. 246Ð251.
[12] D. Hobbelen and M. Wisse, ÒLimit cycle walking,Ó
2007.
[13] K. D. Mombaur, R. W. Longman, H. G. Bock, and
J. P. Schl¬ oder, ÒOpen-loop stable running,Ó Robotica,
vol. 23, no. 1, pp. 21Ð33, Jan. 2005.
[14] K. D. Mombaur, H. G. Bock, J. P. Schl¬ oder, and
R. W. Longman, ÒOpen-loop stable solutions of periodic
optimal control problems in robotics,Ó ZAMM-Journal
of Applied Mathematics and Mechanics/Zeitschrift f¬ ur
Angewandte Mathematik und Mechanik, vol. 85, no. 7,
pp. 499Ð515, 2005.
[15] S. Strogatz, ÒNonlinear dynamics and chaos: with appli-
cations to physics, biology, chemistry and engineering,Ó
2001.
[16] W. Lohmiller and J. Slotine, ÒContraction analysis of
nonlinear systems,Ó Ph.D. dissertation, Massachusetts
Institute of Technology, Dept. of Mechanical Engineer-
ing, 1999.
[17] I. Manchester and J. Slotine, ÒContraction criteria for
existence, stability, and robustness of a limit cycle,Ó
arXiv preprint arXiv:1209.4433, 2012.
[18] A. Banaszuk and J. Hauser, ÒFeedback linearization
of transverse dynamics for periodic orbits,Ó Systems &
control letters, vol. 26, no. 2, pp. 95Ð105, 1995.
[19] A. Shiriaev, L. Freidovich, and S. Gusev, ÒTransverse
linearization for controlled mechanical systems with
several passive degrees of freedom,Ó Automatic Control,
IEEE Transactions on, vol. 55, no. 4, pp. 893Ð906,
2010.
[20] I. Manchester, ÒTransverse dynamics and regions of sta-
bility for nonlinear hybrid limit cycles,Ó arXiv preprint
arXiv:1010.2241, 2010.
[21] D. Hobbelen and M. Wisse, ÒA disturbance rejection
measure for limit cycle walkers: The gait sensitivity
norm,Ó Robotics, IEEE Transactions on, vol. 23, no. 6,
pp. 1213Ð1224, 2007.
[22] A. Rao, D. Benson, C. Darby, M. Patterson, C. Fran-
colin, I. Sanders, and G. Huntington, ÒAlgorithm 902:
Gpops, a matlab software for solving multiple-phase op-
timal control problems using the gauss pseudospectral
method,Ó ACM Transactions on Mathematical Software,
vol. 37, no. 2, pp. 1Ð39, 2010.
[23] M. Plooij and M. Wisse, ÒA novel spring mechanism
to reduce energy consumption of robotic arms,Ó in
Intelligent Robots and Systems (IROS), 2012 IEEE/RSJ
International Conference on, oct. 2012, pp. 2901 Ð2908.
[24] R. van der Linde and A. Schwab, ÒLecture notes on
multibody dynamics b, wb1413,Ó Delft University of
Technology, 1997/1998.
[25] P. E. Dupont, ÒThe effect of coulomb friction on the
existence and uniqueness of the forward dynamics prob-
lem,Ó in Robotics and Automation, 1992. Proceedings.,
1992 IEEE International Conference on. IEEE, 1992,
pp. 1442Ð1447.
[26] A. Kuo, ÒThe relative roles of feedforward and feedback
in the control of rhythmic movements.Ó Motor control,
vol. 6, no. 2, pp. 129Ð145, 2002.
956
