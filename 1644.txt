Online Parameter Estimation via Real-Time Replanning
of Continuous Gaussian POMDPs
Dustin J. Webb Kyle L. Crandall Jur van den Berg
Abstract— An accurate dynamics model of a robot is an
important ingredient of many algorithms used to solve robotics
problems, including motion planning, control, localization, and
mapping. Models derived from ﬁrst principles often contain
parameters (e.g. mass, moment of inertia, arm lengths, etc.)
for which values are unknown. Those which cannot be easily
measured must be estimated from the observed behavior of
the robot. A good approach to address this problem is to plan
control policies for the robot that elicit maximal amounts of
information about the parameters of the system, while still
achieving other objectives speciﬁed for the robot. In case of
parameters subject to drift, this must be done continuously
over the lifetime of the robot if costly re-calibrations are to
be avoided. In this paper, we introduce a new method that
formulates the parameter estimation problem as a continuous
partially-observable Markov decision process (POMDP), which
plans control policies that optimally trade-off the effort spent
on learning parameters and effort spent on achieving regular
robot objectives (exploration vs. exploitation), and allow for
online, continual parameter estimation. While POMDPs have,
until recently, been mostly of theoretical interest due to their
inherent complexity, we build on recent advances that allow
continuous, Gaussian POMDPs to be approximately-optimally
solved in near-real-time rates. We show that the computed
control policies lead to improved convergence of the belief of
the parameters compared to system identiﬁcation approaches
based on applying random controls.
I. INTRODUCTION
Many techniques in robotics require a dynamics model of
a robot. Some examples include motion planning algorithms
like RRT and its variants [1], [2], [3], planning algorithms
like those found in [4] and [5], simultaneous localization and
mapping (SLAM) [6], and many control algorithms. While
a model can be derived from ﬁrst principles this often leaves
parameters that need to be estimated, such as component
masses and moments of inertia, etc.
One major issue that arises when combining planning and
learning is the exploration-exploitation problem. In other
words, while maximizing an objective function, when should
an agent exploit knowledge it has versus exploring strategies
that may improve its knowledge and therefore lead to a
reduction in cost over the long run? POMDPs naturally solve
this problem as a result of the fact that they exhibit optimal
information seeking behavior.
While using POMDPs has been of theoretical interest
for quite some time their use in real-time applications has
been considered impractical because, in the general form,
POMDPs are computationally expensive [7]. However recent
The authors are with the School of Computing and the Depart-
ment of Mechanical Engineering at the University of Utah. E-mail:
dustin.j.webb@utah.edu, kyle.crandall@utah.edu, berg@cs.utah.edu.
Fig. 1: Flow diagram of the general process of our approach. Given
a nominal trajectory 
t, which includes an initial belief Yt, a
control policy t is calculated and applied to the system (shown
in dotted box). In the case of replanning only the ﬁrst control is
applied and the resulting belief Yt+1 is used in conjunction with
the policy to generate a new nominal trajectory.
advances in calculating approximate solutions [4], [5], [8],
[9], [10], [11] have brought this into the realm of possibility.
Here we introduce a method that efﬁciently estimates
parameters by posing the problem of planning controls that
elicit maximal amounts of information about the parameters
as a partially observable Markov decision process (POMDP).
This method uses the POMDP to calculate a control policy
which yields, with each subsequent control applied, the
greatest amount of information possible about the parameters
while meeting any other objectives that need to be achieved.
The control policy is then used to apply controls to the
system and an extended Kalman ﬁlter is used to update the
belief about the system. In our formulation the parameters are
included in the state and therefore estimated simultaneously
with it. This works so long as the real parameters are
observable from the behavior of the system.
In this work we use the method developed in [4] and [5]
which approximates beliefs as Gaussian distributions and the
belief dynamics by an extended Kalman ﬁlter. This technique
enables us to approximately solve continuous POMDPs in
real-time which in turn allows for continually estimating the
parameters through the life of the robot and prevents the need
for possibly time consuming and costly re-calibrations.
We tested our method in simulation and with real hard-
ware. Speciﬁcally we simulated a force controlled double
integrator system as proof-of-concept. We performed exper-
iments with an iRobot Create to show that our method does
in fact work on real robots. Finally we simulated a 2 degree
of freedom (DOF) planar arm to show that our method can
ﬁnd values for multiple parameters simultaneously.
The remainder of this paper is organized as follows. In
the next section we discuss related work. In Section III
we precisely deﬁne the problem we are addressing. We
then outline our approach in Section IV. Results from our
simulations and experiments are presented in Section V.
2014 IEEE International Conference on Robotics & Automation (ICRA)
Hong Kong Convention and Exhibition Center
May 31 - June 7, 2014. Hong Kong, China
978-1-4799-3684-7/14/$31.00 ©2014 IEEE 5998
Section VI concludes with a discussion of the results and
an outline of future work.
II. RELATED WORK
Our work most closely aligns with system identiﬁcation
(SI) methods known as grey-box modeling methods because
such methods estimate the parameters of a given model
[12]. Many of these methods use statistical tools to de-
termine the unknown parameters from observations made,
and, if available, the controls applied to the system. These
algorithms come in one of two forms; ofﬂine and online.
Ofﬂine methods, such as expectation-maximization (EM) and
Kalman smoothing, operate on data after it has been collected
while online methods, such as Kalman ﬁltering, perform the
estimation while the system is functioning. One of the oldest
and still highly popular grey-box modeling methods is to
include model parameters in the state and use a Kalman ﬁlter
[13], [14], [15], [16], and common variants like the extended
Kalman ﬁlter [17] and the unscented Kalman ﬁlter [18], [19],
to observe the behavior of the system as it executes some
series of, often random, controls.
While our approach employs Kalman ﬁltering in this same
way, it goes further in that it plans control policies that yield
the greatest information gain with respect to the parameters
being estimated for each control executed.
Our approach is not the ﬁrst to combine planning and
learning. In fact there is a long and varied history to doing
so. The earliest approaches date back to the work of Bellman
[20] and Feldbaum [21]. Since their work this problem has
been explored with many different methodologies including
active learning [22], reinforcement learning [23], [24], adap-
tive control [25], neurodynamic control [26], evolutionary
approaches [27], and model predictive control [28]. Of course
these approaches are not necessarily focused on ﬁnding the
unknown parameters to a given model.
Our approach is not even the ﬁrst to plan control policies
via POMDPs. Planning in a belief space while assuming
maximum likelihood observations was introduced in [29].
Similarly [30] explores planning in a belief space but focuses
on planning in large spaces over long periods of time. More
recently the idea of calculating approximate solutions was
explored in [4], [5], and even more recently it was shown in
[31] that optimal online learning can be achieved by using a
POMDP to plan policies ofﬂine that direct an agent to opti-
mally balance exploration and exploitation during execution.
Our method differs from that of [31] in two important
ways. First, the method of [31] requires discretization of the
state-space which limits its scalability. This follows from the
fact that discretizing a continuous state-space results in an
exponential growth in the number states therefore inﬂicting
such methods with the curse of dimensionality. Second, our
method is targeted at real-time applications through rapid
replanning which permits it to adapt to unexpected events.
III. PRELIMINARIES AND DEFINITIONS
In the following subsections we review the basics of
POMDPs and extended Kalman ﬁlters (EKFs). From there
we brieﬂy summarize the speciﬁc method that we use for
solving POMDPs. Then we deﬁne parameter and augmented-
state spaces. Finally we formally state the problem we are
addressing in this paper.
A. Partially Observable Markov Decision Processes
POMDPs are a principled method for planning under
uncertainty [6]. They build on Markov Decision Processes
(MDPs) by taking into account that the state of the world is
not directly or completely observable.
Formally a POMDP consists of a set X of all possible
states a system can take, a set U representing all possible
controls that can be applied to the system, a setZ describing
all possible observations that can be made of the system. A
POMDP also requires stochastic transition and observation
models. The stochastic nature of these models leads to a set
of beliefs B whereX2B is a probability distribution over
a state given all past inputs and observations, and a function
 :BUZ!B known as a Bayesian ﬁlter, or the belief
dynamics, that describes how beliefs evolve as a function of
the current belief, the control applied to that belief, and the
observation acquired after applying the control:
X
t
=(X
t 1
;u
t 1
;z
t
): (1)
A ﬁnite horizon POMDP is used when an agent is limited
to a ﬁnite number T of sequential actions. The objective is
to derive policies 
t
: B! U for all 0 t < T , referred
to collectively as the control policy , such that applying
controls u
t
= 
t
(X
t
) minimizes the expected value of an
objective function:
E
z1;:::;z
T
[c
T
(X
T
) +
T 1
X
t=0
c
t
(X
t
;u
t
)]; (2)
where c
T
:B!R and c
t
:BU!R are immediate cost
functions and are considered inputs to the POMDP problem.
Value iteration is a general approach to solving ﬁnite
horizon POMDPs. It works by iterating backwards from step
T and calculating the value function which maps beliefs to
the expected cost-to-go at any given step t, i.e. v
t
:B!R:
v
T
(X ) =c
T
(X ); (3)
v
t
(X ) = min
u2U
(c
t
(X;u) + E
z
[v
t+1
((X;u;z))]): (4)
The optimal control u
t
given a beliefX
t
is then the one
that minimizes the minimand of Eq. (4) at step t:

t
[X ] = argmin
u2U
(c
t
(X;u) + E
z
[v
t+1
((X;u;z))]): (5)
B. Extended Kalman Filter
The EKF is a Bayesian ﬁlter for Gaussian beliefsX 
N (^ x; ). It adapts the Kalman ﬁlter to systems with non-
linear transition and observation models of the form:
x
t+1
=f(x
t
;u
t
) +m
t
; m
t
N (0;M(x
t
;u
t
)); (6)
z
t
=h(x
t
) +n
t
; n
t
N (0;N(x
t
)); (7)
wherem
t
is state and control dependent Gaussian distributed
noise related to the transition model and, similarly, n
t
is
5999
state dependent Gaussian distributed noise related to the
observation model.
Given a beliefX
t
N (^ x
t
; 
t
), a control u
t
, and an ob-
servation z
t+1
, Eq. (1) is approximated to calculateX
t+1

N (^ x
t+1
; 
t+1
) by the EKF update equations
^ x
t+1
=f(^ x
t
;u
t
) +K
t
(z
t+1
 h(f(^ x
t
;u
t
))); (8)

t+1
= (I K
t
H
t
) 
t
; (9)
where
 
t
=A
t

t
A
T
t
+M(^ x
t
;u
t
); (10)
K
t
=  
t
H
T
t
(H
t
 
t
H
T
t
+N(f(^ x
t
;u
t
)))
 1
; (11)
A
t
=
@f
@x
(^ x
t
;u
t
); H
t
=
@h
@x
(f(^ x
t
;u
t
)); (12)
and A
t
, H
t
represent linearizations of the transition and
observation models about the maximum likelihood state.
C. Approximate Locally Optimal POMDP
It is well known that exact solutions to POMDPs are
computationally complex [7]. However, recent work [4], [5]
has shown that in the case of continuous state, control, and
observation spaces (i.e X = R
n
, U = R
m
, and Z = R
p
),
and sufﬁciently smooth transition and observation models of
the form in Eqs. (6) and (7), and for which the Gaussian
distribution forms a reasonable approximation of the belief,
i.e.X =N (^ x; ), locally optimal solutions can be computed
efﬁciently. Further, it takes into account the fact that the
measurements being unknown in advance means the belief
dynamics are stochastic. The net result is that the belief
dynamics given a beliefX
t
become

^ x
t+1

t+1

= (^ x
t
; 
t
;u
t
) +w
t
; (13)
with w
t
N (0;W (^ x
t
; 
t
;u
t
)),
(^ x
t
; 
t
;u
t
) =

f(^ x
t
;u
t
)
(I K
t
H
t
) 
t

; (14)
W (^ x
t
; 
t
;u
t
) =

K
t
H
t
 
t
0
0 0

; (15)
and  
t
, K
t
, and H
t
are given by Eqs. (10), (11), and (12)
respectively.
Besides the stochastic transition and observation models
this method requires local cost functions c
t
: BU! R
and c
T
:B!R which can be reasonably approximated by
quadratization with respect to the belief. These cost functions
form the basis of the objective function (see Eq. (2)) to be
optimized.
The method requires an initial beliefX
0
= N (^ x
0
; 
0
)
and an arbitrary nominal trajectory to be given of the form
consistent with the deterministic part of the belief dynamics:

 = ( x
0
;


0
;u
0
;:::;  x
T 1
;


T 1
;u
T 1
;  x
T
;


T
): (16)
Additionally it uses an iterative approach based on linear
quadratic approximations of the belief dynamics and cost
functions about the nominal trajectory that converges to a
locally optimal control policy of the linear form:
u
t
=
t
(X
t
) =L
t

^ x
t
vec[
t
]

+l
t
; (17)
for 0 t < T . Details for implementing the algorithm can
be found in [4] and [5].
Using an approximate representation of the value function
that is quadratic in the belief means that a locally optimal
control policy can be calculated with a running time polyno-
mial in the dimensionn of the state-space (O(n
4
)) and opens
the door to applying POMDPs to real-time applications.
D. Parameter and Augmented Spaces
Given transition and observation models withk parameters
whose values are unknown or of which one only has a rough
estimate, we deﬁne a parameter-spaceK =R
k
as the space
of all possible parameter combinations.
We assume the unknown parameters are subject to drift
as modeled by stochastic white noise. As such the transition
model is:
k
t+1
=k
t
+
t
; 
t
N (0; ); (18)
where k
t
2 K, and 
t
is a noise term drawn from a zero
mean Gaussian distribution with covariance .
We compose an augmented-space vector y2Y =XK
by appending a parameter-space vector to a state-space vector
as follows:
y =

x
k

; x2X; k2K: (19)
The augmented-space transition and observation models
are then:
y
t+1
=

f(y
t
;u
t
)
k
t

+

m
t

t

; (20)
z
t
=h(y
t
) +n
t
; (21)
with m
t
, n
t
, and 
t
being Gaussian distributed noise as
deﬁned for Eqs. (6), (7), and (18) and
f(y
t
;u
t
) =f(x
t
;k
t
;u
t
); h(y
t
) =h(x
t
;k
t
): (22)
In other words the transition model is a function of the state
x
t
and control u
t
as in Eq. (6) but also the parameters to
be estimatedk
t
. Similarly the observation model becomes a
function of the parametersk
t
in addition to the statex
t
. Note
that we will refer to beliefs associated with augmented-space
vectors asY.
E. Problem Deﬁnition
Our method addresses the question of how to compute
control polices that yield maximal amounts of information
about parameters to be estimated. That is control policies
that when employed 1) result in behavior from which the
true parameter values of the system can be inferred, 2) can be
inferred quickly, and 3) achieve any other objectives encoded
in the objective function.
In this paper we consider controllable systems with con-
tinuous stochastic and possibly non-linear transition and
6000
observation models of the form denoted by Eqs. (6) and (7)
with k unknown but observable parameters. Given an initial
beliefY
t
, these models are used to form augmented-space
transition and observation models of the form in Eqs. (20)
and (21).
We assume the state, control, observation, and parameter
spaces to be continuous (i.e. X = R
n
, U = R
m
, Z = R
p
,
and K = R
k
) and that the belief dynamics are reasonably
approximated by an EKF.
The objective is to minimize the variance in the belief
of the parameters, i.e. learn the values for these parameters,
while at the same time achieving any other objective that may
be speciﬁed for the system, e.g. reaching a particular goal
state. We do this by seeking control polices u
t
= 
t
(Y)
for 0  t < T that minimize Eq. (2) for cost functions
that penalize the state of the robot and the variance of the
parameters. In other words, functions of the following form,
though any function quadratic in the belief, will work.
c
T
(^ y; ) = (^ x x

)
T
Q
T
(^ x x

)
+ tr(S
T

x
) + tr(T
T

k
); (23)
c
t
(^ y; ;u) = (^ x x

)
T
Q
t
(^ x x

) +u
T
R
t
u
+ tr(S
t

x
) + tr(T
t

k
); (24)
for Q
t
 0 which penalizes the deviation of the state-space
elements ^ x of the augmented-space vector ^ y = [^ x
T
;
^
k
T
]
T
from the desired goal state x

, S
t
;T
t
 0 which penalize
the state-space elements 
x
and parameter-space elements

k
respectively of the augmented-space covariance matrix
 =

x 
xk

kx

k

, and R
t
> 0 which penalizes the magnitude
of the controls.
The penalty matrices Q, R, S, and T deﬁne the relative
importance between precisely reaching the goal, constrain-
ing the control magnitudes, and seeking information about
the parameters. R must be positive-deﬁnite while the other
matrices must be either zero or positive semideﬁnite. If the
norms ofQ andT are greater than 0 then the control policies
generated will seek information about the parameters to be
estimated but only in so far as is necessary to meet the other
objectives.
IV. APPROACH
In this section we outline our approach. We begin by
describing the basics of our approach. From there we discuss
real-time use of our method through continual replanning.
Finally we highlight details that need to be considered when
implementing our method.
A. Basic Approach
At a high level the most basic implementation of our
method is to plan a single control policy and use it to control
the robot. Each control applied informs our belief as to the
robots state and the parameters to be estimated leaving us
with an improved estimate of the parameters. This is the
portion of the diagram outlined by the dashed line in Fig. 1.
Given an arbitrary nominal trajectory, a continuous Gaus-
sian POMDP as formulated in Section III-C is used to plan a
ESTIMATEPARAMSWITHREPLANNING(Y
0
; 

0
)
1: for t2 [0;T ) do
2: fL
i
;l
i
g
T 1
i=t
 SOLVEPOMDP(

t
)
3:  u
t
 L
t
h
^ xt
vec[t]
i
+l
t
4: APPLYCONTROL( u
t
)
5: z
t+1
 RECEIVEMEASUREMENT()
6: Y
t+1
 UPDATEBELIEF(Y
t
;  u
t
;z
t+1
)
7: 

t+1
 
UPDATENOMTRAJ(t + 1;Y
t+1
;fL
i
;l
i
g
T 1
i=t+1
)
8: returnfY
i
g
T
i=0
Fig. 2: Pseudocode for an implementation of our method that
replans the control policy after each control applied. this has the
beneﬁt of improving the control policy as the robot operates.
control policy. The control policy is then used to determine
the controls to be applied to the system where the initial
belief estimate is used to calculate the ﬁrst control. An EKF
is simultaneously used to update the belief which is used
to calculate the next control in turn. Being an augmented-
space state, estimates of the parameters are included. If the
parameters are observable from the behavior of the system
then parameter estimates will automatically be updated as
will the variance of the parameters which gives an indication
of the uncertainty about the parameters.
B. Continual Replanning Approach
In the basic approach the control policy is calculated based
on the initial belief alone. As such the control policies are
locally optimal with respect to some nominal trajectory that
is necessarily based on highly uncertain parameter estimates.
These uncertainties lead to suboptimal control policies and
as the length of the trajectory increases the errors that arise
compound.
This issue can be addressed by taking into account the data
we acquire at each time step to further inform the control
policy through rapid replanning. In other words, at each step
and before a control is applied to the system, we calculate
a new control policy, for that step and beyond. We use our
current control policy and our current belief to generate a
new nominal trajectory from which the new control policy
will be derived, a process we refer to as a warm start because
it begins with a control policy that is likely to be similar to
the new control policy.
Since the POMDP approach is iterative it is expected to
converge quickly given a warm start, making it truly applica-
ble to real-time application. However, convergence can still
take too long under certain conditions. This is especially the
case when the stopping criteria is overly strict, when the
control frequency is high, or when the parameters estimates
suddenly change signiﬁcantly, a scenario which occurs if the
initial parameter estimates are far from the true parameter
values. To address this issue we use an anytime version of
the POMDP algorithm wherein we stop the iterative process
as soon as time runs out, meaning a new control must be
applied, and use the latest control policy to determine the
next control.
6001
Once a new control policy has been calculated the al-
gorithm proceeds as before; a control is calculated and
applied, a measurement received, the belief updated, and
a new control policy computed, etc.. This proceeds for T
steps for episodic tasks which means the number of control
policies planned at each step becomes smaller with each step.
For use on long-term autonomous robots T control policies
are calculated with each iteration, as is common with model
predictive controllers.
C. Implementation details
A number of considerations need to be made when im-
plementing our method, from selecting initial controls to
extracting the parameter estimates from the belief data. These
considerations are outlined here.
1) Initial Controls: The initial nominal trajectory is based
on an initial belief and a series of controls. A common
approach to generating such controls is to use the initial
estimate of the model with a motion planning algorithm like
RRT. Of course, this requires a speciﬁc goal state. If the
objective is strictly to estimate the parameters of the model
then the initial controls can be generated at random.
2) Constraints and Obstacles: All real systems have con-
straints. Control saturation is one such example. Controls can
be penalized through the cost functions in Eqs. (23) and (24)
however this does not place a hard bound on the controls. As
such the control policy calculated by our method can yield
controls that are beyond the capabilities of the system. To
handle this, one can saturate the controls. While doing so
is inconsistent with the model, experiments show it works
well.
Constraints also appear as bounds on the state, such as
maximum velocity, and as physical obstacles. The POMDP
approach we use allows for encoding such constraints into
the objective function. Details can be found in [4] and [5].
3) Extracting Parameter Estimates: Each belief in the
sequence generated by our method include an estimate of the
parameters. The naive approach to extracting these values
would be to take them directly from the last beliefY
T
in
the case of episodic usage and the most recent beliefY
t
in the case of long-term applications. However given the
presence of noise in the dynamics a better approach may be
to calculate a moving average over some window of the last
few beliefs, i.e.
~
k =
1
n
t
X
i=t j
^
k
i
; (25)
where
^
k
t
comes from the augmented-space vector ^ y
t
as
deﬁned in Eq. (19), t is the most recent step, and n =t j
deﬁnes a window size.
V. SIMULATION AND EXPERIMENT RESULTS
We tested our approach with three systems. The ﬁrst was
a simulation of the classic double integrator model as a
proof of concept to the idea. The second was a differential
drive model which allowed us to show the idea works with
(a) Random Controls
(b) POMDP Controls
Fig. 3: Comparison of random controls with those planned via
POMDP for double integrator model with actual mass  = 1kg.
The inverse of the mass 
 1
was learned to improve numerical
stability and four different initial values were tested; 0.5kg, 0.9kg,
1.1kg, and 1.5kg.
real robots. The third and ﬁnal model was a simulated 2
DOF planar arm to show that our method can learn multiple
parameters. We compare our method to that of applying
random controls to a robot and estimating the parameters
via an EKF, a technique frequently used with SI methods.
The results of our simulations and experiments are discussed
in the following subsections.
A. Double Integrator Model
The ﬁrst system we used to test our approach was a force
controlled 2D double integrator. By using force control we
introduced a learnable parameter, namely the mass of the
robot. The parameter-space model for this system is deﬁned:
y
t+1
=Ay
t
+Bu
t
+m
t
; z
t
=Hy
t
+n
t
; (26)
with y = [p
T
;v
T
;]
T
,
A =
2
4
I It 0
0 I 0
0
T
0
T
1
3
5
; B =
2
4
It
2
=2
It=
0
3
5
; H =

I;0

;
(27)
where y is an augmented-space vector,  is the unknown
mass parameter,I is the 22 identity matrix, t is the time
step between controls, and at any given timet,p
x
,p
y
,v
x
, and
v
y
are the x and y coordinates and respective instantaneous
velocities of the robot.
6002
Though the double integrator is normally a linear system
it becomes non-linear when we convert it to force control
because  appears in the control matrix B.
Given that  appears in both the position and velocity
components of the transition model most actions are infor-
mative. However higher magnitude controls produce larger
movements over a given time delta which in effect reduces
the impact of the motion noise.
This fact permits us to show that the POMDP seeks
out more informative controls. First we generate nominal
controls from a zero-mean Gaussian distribution with unit
variance. For a 1 kg mass such controls will produce move-
ment and thus information regarding the mass of the robot.
Figure 3a shows the results of using such controls. Figure
3b shows the results of using these controls to generate a
nominal trajectory for planning a control policy and using it
in turn to control the robot.
Each method was executed 30 times. The left graph for
each method shows the average of the mean belief as a
function of time. The right graphs show the average standard
deviation of the belief at each step. Each graph also includes
the 98% conﬁdence interval which describes the variation in
the 30 experiments.
From Figure 3a we can see that the random controls
generally result in updates of the mean of the belief of the
parameter towards the correct value. They also consistently
reduce the average standard deviation on the belief. On the
other hand, as we see in Figure 3b, the controls from the
POMDP result in much swifter convergence, and move the
belief towards the correct value regardless of the initial esti-
mate. We also see that the POMDP controls serve to reduce
the standard deviation considerably more in comparison and
does so at a faster rate which indicates that our method
becomes conﬁdent of its estimate in fewer control steps.
B. Differential Drive
We used an iRobot Create to test our method in the
real world. This is a two-wheel differential drive robot. As
such our state contains the 2D location of the robot and
its heading, i.e. x = [x;y;]
T
, which was measured via a
motion capture system. The parameter to be learned is the
distance between the wheels, i.e. k =L. The real value for
this parameter was estimated to be 26cm. The control for
the Create is a two dimensional vector comprised of a linear
velocity for each of the wheels u = [u
r
;u
l
]
T
.
The continuous model for this system is:
_ x =
u
r
+u
l
2
cos; _ y =
u
r
+u
l
2
sin;
_
 =
u
r
 u
l
L
: (28)
Since this is a continuous model we discretize it using
Runge-Kutta (RK4) to form the discrete model f(y
t
;u
t
).
It is obvious from the model that only movements involv-
ing some amount of rotation are informative with respect
to L. Inspection of the control space reveals that u
l
= u
r
produces pure translations while u
l
= u
r
produces pure
rotations. Furthermore all other controls result in a combina-
tion of translation and rotation except the trivial case where
u
l
=u
r
= 0 which produces no movement at all.
(a) Random Controls
(b) POMDP Controls
‘
Fig. 4: Comparison of random controls with those planned via
POMDP for differential drive system with actual wheel displace-
ment L = 26cm. The inverse of the length L
 1
was learned to
improve numerical stability and four different initial values were
tested; 0.5cm, 20cm, 30cm, and 50cm.
From these observations it is clear that the vast majority of
controls selected at random will be informative. This comes
from the fact that predictions of such movements while using
the wrong parameter will differ from what actually happens.
Similarly, larger controls will produce larger differences and
will be less burdened by the noise in the translation and
sensor models. As such we can reason that the optimal
movements are the pure clockwise and counter-clockwise
rotations executed at full velocity.
Figure 4 shows how the belief develops using random
controls versus those generated by our approach. As with
the double integrator system we see that learning does occur
when using the random controls but that using the POMDP
controls results in much quicker convergence in the mean
of the belief and a greater decrease in the average standard
deviation of the belief.
C. 2 DOF Planar Arm
The ﬁnal system we used to test our approach was a
simulation of the Quanser SRV02 conﬁgured as a 2 DOF
planar arm. This system is highly non-linear and contains
many parameters making it a great candidate for showing
that our method can learn multiple interrelated parameters
simultaneously. The state is comprised of the angular posi-
tions and velocities of each joint, i.e.x = [
T
;
_

T
]
T
and the
controls are the currents applied to each motoru = [i
1
;i
2
]
T
.
We seek to learn the lengths and masses for each link in the
6003
(a) Random Controls (b) POMDP Controls
Fig. 5: Comparison of random controls with those planned via POMDP. To improve numerical stability, the inverse of the length a
 1
i
and massm
 1
i
was learned for each of the two linksi2f1; 2g in the 2 DOF planar arm. We ran the approach with four different initial
values with initial standard deviation of 1m for the lengths and 1kg for the masses: (0.12 m, 0.1 m, 0.1 kg, 0.07 kg), (0.18 m, 0.2 m,
0.084 kg, 0.084 kg), (0.3 m, 0.25 m, 0.079 kg, 0.065 kg), (0.05 m, 0.05 0 m, 0.105 kg, 0.089 kg). The actual values were (0.15 m, 0.15
m, 0.092 kg, 0.077 kg).
arm, i.e.k = [a
1
;a
2
;m
1
;m
2
]
T
. The true length of each link
is 15cm while the true weights are 92g for the upper arm link
and 77g for the lower arm link including all the hardware
connecting them. Finally, the observation model consists of
the position of the end effector and the angular position of
each joint.
For this robot we used the continuous current control
model:

N
1
k
t1
i
1
N
2
k
t2
i
2

=

H
11
H
12
H
21
H
22



1


2

+

0  h
h 0

_

1
_

2

+

G
1
G
2

+

F
1
F
2

; (29)
where
F
1
=b
1
_

1
+c
1
sgn(
_

1
);
F
2
=b
2
_

2
+c
2
sgn(
_

2
);
H
11
=N
2
1
J
m1
+I
1
+m
2
a
2
1
;
H
22
=N
2
2
J
m2
+I
2
;
G
1
= (r
01
m
2
+a
1
m
2
)gcos(
2
));
G
2
=r
12
m
2
gcos(
2
);
H
12
=H
21
=a
1
r
12
m
2
cos(
2
 
1
);
and forn2f1; 2g,a
n
represents link lengths,m
n
represents
link masses,r
n 1;n
represents link center of mass,I
n
repre-
sents link moment of inertia,J
mn
represents motor inertia,b
n
represents viscous damping, c
n
represents coulomb friction,
and N
n
represents gear ratio. Since this is a continuous
6004
model we discretize it using Runge-Kutta (RK4) to form
f(y
t
;u
t
) as with the model of the iRobot Create.
Figure 5 compares our approach with that of applying
random controls to the arm. Each ﬁgure has two graphs for
each of the link masses and lengths. The left graph shows
the average of the mean of the belief and the right shows
the average of the standard deviation of the belief over 30
trials. Each graph also shows the 98% conﬁdence intervals
over the trials.
As with the other systems we see that random controls
do result in learning and reduction in the standard deviation
of the belief. However our method converges in all cases,
and considerably more quickly in most of them, while using
random controls generally does not converge to correct val-
ues. Of particular interest here is that both methods perform
well when learning the link lengths. However when it comes
to the masses its clear again that our method learns more
quickly implying the masses are harder to learn.
VI. DISCUSSION, CONCLUSION, AND FUTURE WORK
In this paper we introduced a method for planning optimal
learning control policies in real-time using an approximate
POMDP solver. These policies identify controls that are
approximately optimal for learning one or more unknown
parameters associated with the model of a robot while re-
specting any other objectives encoded in the cost functions.
Further, it does so in a manner that approximately optimally
solves the exploration-exploitation problem and operates fast
enough for use in real-time applications.
From the simulation and experimental results it is clear
that our method effectively learns the unknown parameters of
a robot model as the parameter estimates converge quickly to
the real parameter values when using our method, especially
as compared to using random controls. While this serves as
a proof-of-concept there is still plenty of work ahead.
Going forward we will be exploring the limits of our
method. We will do so by comparing it to other methods,
by assessing the effects of the assumptions we make and
the approximations we use, by simulating and experimenting
with more complicated models that include more parameters
and parameters that change over time, and by delving more
into the rapid replanning to determine when it is useful versus
when it is necessary. In conclusion, the work we have started
in this paper is a major step towards a paradigm of life-long
calibration.
REFERENCES
[1] S. M. LaValle and J. J. Kuffner, “Randomized kinodynamic planning,”
The International Journal of Robotics Research, vol. 20, no. 5, pp.
378–400, 2001.
[2] R. Tedrake, “Lqr-trees: Feedback motion planning on sparse random-
ized trees,” 2009.
[3] D. J. Webb and J. van den Berg, “Kinodynamic rrt*: Optimal motion
planning for systems with linear differential constraints,” in Proc.
IEEE Conf. on Robotics and Automation, 2013.
[4] J. Van Den Berg, S. Patil, and R. Alterovitz, “Motion planning under
uncertainty using iterative local optimization in belief space,” The
International Journal of Robotics Research, vol. 31, no. 11, pp. 1263–
1278, 2012.
[5] J. van den Berg, S. Patil, and R. Alterovitz, “Efﬁcient approximate
value iteration for continuous gaussian pomdps.” in AAAI, 2012.
[6] S. Thrun, W. Burgard, D. Fox et al., Probabilistic robotics. MIT
press Cambridge, 2005, vol. 1.
[7] C. Papadimitriou and J. N. Tsitsiklis, “The complexity of markov
decision processes,” Math. Oper. Res., vol. 12, no. 3, pp. 441–450,
Aug. 1987.
[8] H. Kurniawati, D. Hsu, and W. S. Lee, “Sarsop: Efﬁcient point-based
pomdp planning by approximating optimally reachable belief spaces.”
in Robotics: Science and Systems, 2008, pp. 65–72.
[9] T. Smith and R. G. Simmons, “Point-based POMDP algorithms:
Improved analysis and implementation,” in Proc. Int. Conf. on Un-
certainty in Artiﬁcial Intelligence (UAI), 2005.
[10] Y . Du, D. Hsu, H. Kurniawati, W. Lee, S. Ong, and S. Png, “A pomdp
approach to robot motion planning under uncertainty,” in Int. Conf. on
Automated Planning Scheduling, Workshop on Solving Real-World
POMDP Problems, 2010.
[11] L. L. Ko, D. Hsu, W. S. Lee, and S. C. Ong, “Structured parameter
elicitation.” in AAAI, 2010.
[12] K. Keesman, System Identiﬁcation: An Introduction, ser. Advanced
textbooks in control and signal processing. Springer, 2011.
[13] A. H. Jazwinski, Stochastic processes and ﬁltering theory. Courier
Dover Publications, 2007.
[14] V . Aidala, “Parameter estimation via the kalman ﬁlter,” Automatic
Control, IEEE Transactions on, vol. 22, no. 3, pp. 471–472, 1977.
[15] J. N. Nielsen, H. Madsen, and P. C. Young, “Parameter estimation
in stochastic differential equations: an overview,” Annual Reviews in
Control, vol. 24, pp. 83–94, 2000.
[16] N. R. Kristensen, H. Madsen, and S. B. Jørgensen, “Parameter esti-
mation in stochastic grey-box models,” Automatica, vol. 40, no. 2, pp.
225–237, 2004.
[17] L. Ljung, “Asymptotic behavior of the extended kalman ﬁlter as a
parameter estimator for linear systems,” Automatic Control, IEEE
Transactions on, vol. 24, no. 1, pp. 36–50, 1979.
[18] E. A. Wan and R. Van Der Merwe, “The unscented kalman ﬁlter
for nonlinear estimation,” in Adaptive Systems for Signal Processing,
Communications, and Control Symposium 2000. AS-SPCC. The IEEE
2000. IEEE, 2000, pp. 153–158.
[19] R. Van Der Merwe and E. A. Wan, “The square-root unscented
kalman ﬁlter for state and parameter-estimation,” in Acoustics, Speech,
and Signal Processing, 2001. Proceedings.(ICASSP’01). 2001 IEEE
International Conference on, vol. 6. IEEE, 2001, pp. 3461–3464.
[20] R. Bellman and R. Kalaba, “On adaptive control processes,” Automatic
Control, IRE Transactions on, vol. 4, no. 2, pp. 1–9, 1959.
[21] A. Feldbaum, “Dual control theory,” Automation and Remote Control,
vol. 21, no. 9, pp. 874–1039, 1960.
[22] D. A. Cohn, Z. Ghahramani, and M. I. Jordan, “Active learning with
statistical models,” Journal of Artiﬁcial Intelligence Research, vol. 4,
pp. 129–145, 1996.
[23] L. P. Kaelbling, M. L. Littman, and A. W. Moore, “Reinforcement
learning: A survey,” Journal of Artiﬁcial Intelligence Research, vol. 4,
pp. 237–285, 1996.
[24] J. Kober and J. Peters, “Reinforcement learning in robotics: a survey,”
in Reinforcement Learning. Springer, 2012, pp. 579–610.
[25] N. M. Filatov and H. Unbehauen, Adaptive dual control: Theory and
applications. Springer, 2004, vol. 302.
[26] D. P. Bertsekas and J. N. Tsitsiklis, “Neuro-dynamic programming: An
overview,” in Decision and Control, 1995., Proceedings of the 34th
IEEE Conference on, vol. 1. IEEE, 1995, pp. 560–564.
[27] K. Tan and Y . Li, “Grey-box model identiﬁcation via evolutionary
computing,” Control Engineering Practice, vol. 10, no. 7, pp. 673 –
684, 2002.
[28] A. Aswani, H. Gonzalez, S. S. Sastry, and C. Tomlin, “Provably
safe and robust learning-based model predictive control,” Automatica,
2013.
[29] R. Platt Jr, R. Tedrake, L. Kaelbling, and T. Lozano-Perez, “Belief
space planning assuming maximum likelihood observations,” 2010.
[30] R. He, E. Brunskill, and N. Roy, “Efﬁcient planning under uncer-
tainty with macro-actions,” Journal of Artiﬁcial Intelligence Research,
vol. 40, no. 1, pp. 523–570, 2011.
[31] H. Bai, D. Hsu, and W. S. Lee, “Planning how to learn,” in Proc.
IEEE Conf. on Robotics and Automation, 2013.
6005
